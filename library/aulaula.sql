-- phpMyAdmin SQL Dump
-- version 3.4.2
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Feb 20, 2012 at 01:19 PM
-- Server version: 5.1.56
-- PHP Version: 5.3.6

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `aulaula`
--

DELIMITER $$
--
-- Procedures
--
DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByArea_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByArea_id`(
IN pArea_id INT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`area_id` = pArea_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByExtension`(
IN pExtension VARCHAR (10)
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`extension` = pExtension;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByFull_path`(
IN pFull_path MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`full_path` = pFull_path;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByLink`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByLink`(
IN pLink VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`link` = pLink;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByMime_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByMime_type`(
IN pMime_type VARCHAR (200)
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`mime_type` = pMime_type;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByObject`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByObject`(
IN pObject TEXT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`object` = pObject;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerBySize`(
IN pSize INT 
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBannerByType`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBannerByType`(
IN pType VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner` 
WHERE 		`type` = pType;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromBanner_areaByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromBanner_areaByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`banner_area` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByParent_id`(
IN pParent_id INT 
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`parent_id` = pParent_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByShow_in_menu`(
IN pShow_in_menu VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`show_in_menu` = pShow_in_menu;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategoryByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategoryByType_id`(
IN pType_id INT 
)
BEGIN

DELETE 
FROM 		`category` 
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByCategory_id`(
IN pCategory_id INT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByDirect_object_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByDirect_object_count`(
IN pDirect_object_count TINYINT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`direct_object_count` = pDirect_object_count;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByIndirect_object_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByIndirect_object_count`(
IN pIndirect_object_count TINYINT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`indirect_object_count` = pIndirect_object_count;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByMeta_data`(
IN pMeta_data TEXT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`meta_data` = pMeta_data;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByMeta_desc`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByMeta_desc`(
IN pMeta_desc TEXT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`meta_desc` = pMeta_desc;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByMeta_key`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByMeta_key`(
IN pMeta_key TEXT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`meta_key` = pMeta_key;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByMeta_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByMeta_title`(
IN pMeta_title TEXT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`meta_title` = pMeta_title;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByPage_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByPage_title`(
IN pPage_title TEXT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`page_title` = pPage_title;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_infoBySubcat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_infoBySubcat_count`(
IN pSubcat_count TINYINT 
)
BEGIN

DELETE 
FROM 		`category_info` 
WHERE 		`subcat_count` = pSubcat_count;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByShow_in_menu`(
IN pShow_in_menu VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`show_in_menu` = pShow_in_menu;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_typeByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_typeByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`category_type` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByCategory_type_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByCategory_type_id`(
IN pCategory_type_id INT 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`category_type_id` = pCategory_type_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByDirect_cat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByDirect_cat_count`(
IN pDirect_cat_count TINYINT 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`direct_cat_count` = pDirect_cat_count;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByIndirect_cat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByIndirect_cat_count`(
IN pIndirect_cat_count TINYINT 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`indirect_cat_count` = pIndirect_cat_count;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromCategory_type_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromCategory_type_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`category_type_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromLocaleByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromLocaleByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`locale` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromLocaleByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromLocaleByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`locale` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromLocaleByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromLocaleByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`locale` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromLocaleById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromLocaleById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`locale` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromLocaleByLocale`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromLocaleByLocale`(
IN pLocale VARCHAR (6)
)
BEGIN

DELETE 
FROM 		`locale` 
WHERE 		`locale` = pLocale;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromLocaleByLocale_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromLocaleByLocale_title`(
IN pLocale_title VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`locale` 
WHERE 		`locale_title` = pLocale_title;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromLocaleByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromLocaleByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`locale` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromLocaleByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromLocaleByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`locale` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromLocaleByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromLocaleByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`locale` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuByLink`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuByLink`(
IN pLink MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`link` = pLink;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuByParent_id`(
IN pParent_id INT 
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`parent_id` = pParent_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuBySublevel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuBySublevel`(
IN pSublevel INT 
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`sublevel` = pSublevel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenuByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenuByType_id`(
IN pType_id INT 
)
BEGIN

DELETE 
FROM 		`menu` 
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByMenu_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByMenu_id`(
IN pMenu_id INT 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`menu_id` = pMenu_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_infoByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`menu_info` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromMenu_typeByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromMenu_typeByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`menu_type` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByCategory_id`(
IN pCategory_id INT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByCreated_date`(
IN pCreated_date DATETIME 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`created_date` = pCreated_date;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByGuid_url`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByGuid_url`(
IN pGuid_url MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`guid_url` = pGuid_url;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByLocale_id`(
IN pLocale_id INT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByMeta_data`(
IN pMeta_data TEXT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`meta_data` = pMeta_data;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByMeta_desc`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByMeta_desc`(
IN pMeta_desc TEXT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`meta_desc` = pMeta_desc;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByMeta_key`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByMeta_key`(
IN pMeta_key TEXT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`meta_key` = pMeta_key;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByMeta_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByMeta_title`(
IN pMeta_title TEXT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`meta_title` = pMeta_title;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByOriginal_author`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByOriginal_author`(
IN pOriginal_author VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`original_author` = pOriginal_author;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByPage_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByPage_title`(
IN pPage_title TEXT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`page_title` = pPage_title;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByParent_id`(
IN pParent_id INT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`parent_id` = pParent_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByShow_in_list`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByShow_in_list`(
IN pShow_in_list VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`show_in_list` = pShow_in_list;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectBySource_id`(
IN pSource_id INT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByTags`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByTags`(
IN pTags TEXT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`tags` = pTags;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObjectByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObjectByType_id`(
IN pType_id INT 
)
BEGIN

DELETE 
FROM 		`object` 
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByAlias`(
IN pAlias VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByEmail`(
IN pEmail VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`email` = pEmail;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByIs_abuse`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByIs_abuse`(
IN pIs_abuse VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`is_abuse` = pIs_abuse;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByLocale_id`(
IN pLocale_id INT 
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByType_id`(
IN pType_id INT 
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuseByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuseByUser_id`(
IN pUser_id INT 
)
BEGIN

DELETE 
FROM 		`object_abuse` 
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_abuse_typeByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_abuse_typeByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_abuse_type` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByAlias`(
IN pAlias VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByCategory_id`(
IN pCategory_id INT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByCreated_date`(
IN pCreated_date DATETIME 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`created_date` = pCreated_date;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByFull_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByFull_text`(
IN pFull_text TEXT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`full_text` = pFull_text;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByIntro_text`(
IN pIntro_text MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleByShow_in_object`(
IN pShow_in_object VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_articleBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_articleBySource_id`(
IN pSource_id INT 
)
BEGIN

DELETE 
FROM 		`object_article` 
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByContent`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByContent`(
IN pContent TEXT 
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`content` = pContent;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByCountry_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByCountry_id`(
IN pCountry_id INT 
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`country_id` = pCountry_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByEmail`(
IN pEmail VARCHAR (150)
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`email` = pEmail;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByLocale_id`(
IN pLocale_id INT 
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByTitle`(
IN pTitle VARCHAR (150)
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByUser_id`(
IN pUser_id VARCHAR (100)
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_commentByWebpage`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_commentByWebpage`(
IN pWebpage MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_comment` 
WHERE 		`webpage` = pWebpage;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByAuthor_id`(
IN pAuthor_id VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByCategory_id`(
IN pCategory_id INT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByFiles_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByFiles_count`(
IN pFiles_count INT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`files_count` = pFiles_count;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByFull_path`(
IN pFull_path MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`full_path` = pFull_path;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByName`(
IN pName VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`name` = pName;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByParent_id`(
IN pParent_id INT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`parent_id` = pParent_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryByShow_in_object`(
IN pShow_in_object VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_directoryBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_directoryBySize`(
IN pSize INT 
)
BEGIN

DELETE 
FROM 		`object_directory` 
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByAuthor_id`(
IN pAuthor_id VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByCategory_id`(
IN pCategory_id INT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByExtension`(
IN pExtension VARCHAR (10)
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`extension` = pExtension;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByFolder_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByFolder_id`(
IN pFolder_id INT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`folder_id` = pFolder_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByFull_path`(
IN pFull_path MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`full_path` = pFull_path;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByMime_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByMime_type`(
IN pMime_type VARCHAR (200)
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`mime_type` = pMime_type;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByName`(
IN pName VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`name` = pName;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileByShow_in_object`(
IN pShow_in_object VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_fileBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_fileBySize`(
IN pSize INT 
)
BEGIN

DELETE 
FROM 		`object_file` 
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByLayout_id`(
IN pLayout_id INT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`layout_id` = pLayout_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoBySkin_id`(
IN pSkin_id INT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`skin_id` = pSkin_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByTemplate_id`(
IN pTemplate_id INT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`template_id` = pTemplate_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByTheme_publish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByTheme_publish_from`(
IN pTheme_publish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`theme_publish_from` = pTheme_publish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByTheme_publish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByTheme_publish_to`(
IN pTheme_publish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`theme_publish_to` = pTheme_publish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByTotal_comments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByTotal_comments`(
IN pTotal_comments INT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`total_comments` = pTotal_comments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByTotal_rating`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByTotal_rating`(
IN pTotal_rating INT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`total_rating` = pTotal_rating;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_infoByTotal_views`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_infoByTotal_views`(
IN pTotal_views INT 
)
BEGIN

DELETE 
FROM 		`object_info` 
WHERE 		`total_views` = pTotal_views;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByAlias`(
IN pAlias VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByCategory_id`(
IN pCategory_id INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByExtension`(
IN pExtension VARCHAR (32)
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`extension` = pExtension;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByHeight`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByHeight`(
IN pHeight INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`height` = pHeight;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByIntro_text`(
IN pIntro_text MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByMeta_data`(
IN pMeta_data TEXT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`meta_data` = pMeta_data;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByShow_in_object`(
IN pShow_in_object VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoBySize`(
IN pSize INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoBySource_id`(
IN pSource_id INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByTaken_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByTaken_date`(
IN pTaken_date DATETIME 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`taken_date` = pTaken_date;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByTaken_location`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByTaken_location`(
IN pTaken_location VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`taken_location` = pTaken_location;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_photoByWidth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_photoByWidth`(
IN pWidth INT 
)
BEGIN

DELETE 
FROM 		`object_photo` 
WHERE 		`width` = pWidth;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_ratingByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_ratingByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_rating` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_ratingById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_ratingById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_rating` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_ratingByLast_ip`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_ratingByLast_ip`(
IN pLast_ip VARCHAR (50)
)
BEGIN

DELETE 
FROM 		`object_rating` 
WHERE 		`last_ip` = pLast_ip;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_ratingByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_ratingByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_rating` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_ratingByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_ratingByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_rating` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_ratingByRating_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_ratingByRating_count`(
IN pRating_count INT 
)
BEGIN

DELETE 
FROM 		`object_rating` 
WHERE 		`rating_count` = pRating_count;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_ratingByRating_total`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_ratingByRating_total`(
IN pRating_total INT 
)
BEGIN

DELETE 
FROM 		`object_rating` 
WHERE 		`rating_total` = pRating_total;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_ratingByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_ratingByUser_id`(
IN pUser_id INT 
)
BEGIN

DELETE 
FROM 		`object_rating` 
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByCountry_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByCountry_id`(
IN pCountry_id INT 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`country_id` = pCountry_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByLocale_id`(
IN pLocale_id INT 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByName`(
IN pName VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`name` = pName;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceBySource_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceBySource_type`(
IN pSource_type VARCHAR (32)
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`source_type` = pSource_type;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByTime_delay`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByTime_delay`(
IN pTime_delay INT 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`time_delay` = pTime_delay;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_sourceByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_sourceByUrl`(
IN pUrl MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_source` 
WHERE 		`url` = pUrl;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_source_infoBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_source_infoBySource_id`(
IN pSource_id INT 
)
BEGIN

DELETE 
FROM 		`object_source_info` 
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByAlias`(
IN pAlias VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByCategory_id`(
IN pCategory_id INT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByCreated_date`(
IN pCreated_date DATETIME 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`created_date` = pCreated_date;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByFull_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByFull_text`(
IN pFull_text TEXT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`full_text` = pFull_text;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByIntro_text`(
IN pIntro_text TEXT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_staticByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_staticByUrl`(
IN pUrl MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_static` 
WHERE 		`url` = pUrl;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_tagByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_tagByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_tag` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_tagByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_tagByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_tag` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_tagByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_tagByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_tag` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_tagById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_tagById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_tag` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_tagByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_tagByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_tag` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_tagByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_tagByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`object_tag` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_tagByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_tagByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_tag` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_tagByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_tagByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_tag` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_typeByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_typeByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_type` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_typeByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_typeByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`object_type` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_typeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_typeByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_type` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_typeByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_typeByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`object_type` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_typeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_typeById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_type` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_typeByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_typeByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_type` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_typeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_typeByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`object_type` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_typeByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_typeByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_type` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_typeByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_typeByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_type` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_type_infoByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_type_infoByType_id`(
IN pType_id INT 
)
BEGIN

DELETE 
FROM 		`object_type_info` 
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByAlias`(
IN pAlias VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByCategory_id`(
IN pCategory_id INT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByIntro_text`(
IN pIntro_text MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByShow_in_object`(
IN pShow_in_object VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlBySource_id`(
IN pSource_id INT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByStyle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByStyle`(
IN pStyle MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`style` = pStyle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByUrl`(
IN pUrl MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`url` = pUrl;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_urlByUrl_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_urlByUrl_type`(
IN pUrl_type VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_url` 
WHERE 		`url_type` = pUrl_type;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_user_favouriteByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_user_favouriteByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_user_favourite` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_user_favouriteByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_user_favouriteByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_user_favourite` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_user_favouriteById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_user_favouriteById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_user_favouriteByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_user_favouriteByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_user_favourite` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_user_favouriteByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_user_favouriteByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_user_favourite` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_user_favouriteByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_user_favouriteByUser_id`(
IN pUser_id INT 
)
BEGIN

DELETE 
FROM 		`object_user_favourite` 
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByAlias`(
IN pAlias VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByCategory_id`(
IN pCategory_id INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByEncoded`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByEncoded`(
IN pEncoded VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`encoded` = pEncoded;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByExtension`(
IN pExtension VARCHAR (5)
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`extension` = pExtension;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByHeight`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByHeight`(
IN pHeight INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`height` = pHeight;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByIntro_text`(
IN pIntro_text MEDIUMTEXT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByMeta_data`(
IN pMeta_data TEXT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`meta_data` = pMeta_data;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByObject_id`(
IN pObject_id INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByShow_in_object`(
IN pShow_in_object VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoBySize`(
IN pSize INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoBySource_id`(
IN pSource_id INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByTaken_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByTaken_date`(
IN pTaken_date DATETIME 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`taken_date` = pTaken_date;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByTaken_location`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByTaken_location`(
IN pTaken_location VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`taken_location` = pTaken_location;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromObject_videoByWidth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromObject_videoByWidth`(
IN pWidth INT 
)
BEGIN

DELETE 
FROM 		`object_video` 
WHERE 		`width` = pWidth;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackageByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackageByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackageByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackageByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`package` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackageById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackageById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`package` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackageByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackageByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackageByPrerequisite_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackageByPrerequisite_id`(
IN pPrerequisite_id INT 
)
BEGIN

DELETE 
FROM 		`package` 
WHERE 		`prerequisite_id` = pPrerequisite_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackageByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackageByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackageByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackageByShow_in_menu`(
IN pShow_in_menu VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package` 
WHERE 		`show_in_menu` = pShow_in_menu;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackageByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackageByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackageByType`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackageByType`(
IN pType VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package` 
WHERE 		`type` = pType;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionByAction_description`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionByAction_description`(
IN pAction_description TEXT 
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`action_description` = pAction_description;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionByAction_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionByAction_name`(
IN pAction_name VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`action_name` = pAction_name;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionByAction_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionByAction_title`(
IN pAction_title VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`action_title` = pAction_title;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionByClass_id`(
IN pClass_id INT 
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`class_id` = pClass_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionByFile_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionByFile_name`(
IN pFile_name VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`file_name` = pFile_name;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_actionByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_actionByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`package_action` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_classByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_classByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`package_class` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_classByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_classByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`package_class` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_classByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_classByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`package_class` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_classByFile_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_classByFile_name`(
IN pFile_name VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package_class` 
WHERE 		`file_name` = pFile_name;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_classById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_classById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`package_class` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_classByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_classByName`(
IN pName VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package_class` 
WHERE 		`name` = pName;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_classByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_classByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`package_class` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_classByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_classByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`package_class` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_classByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_classByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package_class` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoByDefault_action_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoByDefault_action_name`(
IN pDefault_action_name VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`default_action_name` = pDefault_action_name;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoByDefault_action_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoByDefault_action_title`(
IN pDefault_action_title VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`default_action_title` = pDefault_action_title;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPackage_infoByVersion`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPackage_infoByVersion`(
IN pVersion VARCHAR (15)
)
BEGIN

DELETE 
FROM 		`package_info` 
WHERE 		`version` = pVersion;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPollByVotes_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPollByVotes_count`(
IN pVotes_count INT 
)
BEGIN

DELETE 
FROM 		`poll` 
WHERE 		`votes_count` = pVotes_count;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByPoll_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByPoll_id`(
IN pPoll_id INT 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`poll_id` = pPoll_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_answerByVotes_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_answerByVotes_count`(
IN pVotes_count INT 
)
BEGIN

DELETE 
FROM 		`poll_answer` 
WHERE 		`votes_count` = pVotes_count;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_voteByAnswer_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_voteByAnswer_id`(
IN pAnswer_id INT 
)
BEGIN

DELETE 
FROM 		`poll_vote` 
WHERE 		`answer_id` = pAnswer_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_voteByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_voteByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`poll_vote` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_voteByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_voteByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`poll_vote` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_voteById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_voteById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`poll_vote` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_voteByIp_address`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_voteByIp_address`(
IN pIp_address BIGINT 
)
BEGIN

DELETE 
FROM 		`poll_vote` 
WHERE 		`ip_address` = pIp_address;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_voteByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_voteByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`poll_vote` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_voteByPoll_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_voteByPoll_id`(
IN pPoll_id INT 
)
BEGIN

DELETE 
FROM 		`poll_vote` 
WHERE 		`poll_id` = pPoll_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromPoll_voteByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromPoll_voteByUser_id`(
IN pUser_id INT 
)
BEGIN

DELETE 
FROM 		`poll_vote` 
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromSearch_logByHits`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromSearch_logByHits`(
IN pHits INT 
)
BEGIN

DELETE 
FROM 		`search_log` 
WHERE 		`hits` = pHits;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromSearch_logBySearch_term`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromSearch_logBySearch_term`(
IN pSearch_term VARCHAR (128)
)
BEGIN

DELETE 
FROM 		`search_log` 
WHERE 		`search_term` = pSearch_term;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTagByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTagByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`tag` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTagByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTagByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`tag` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTagByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTagByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`tag` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTagById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTagById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`tag` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTagByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTagByLocale_id`(
IN pLocale_id INT 
)
BEGIN

DELETE 
FROM 		`tag` 
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTagByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTagByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`tag` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTagByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTagByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`tag` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTagByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTagByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`tag` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByAction_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByAction_id`(
IN pAction_id INT 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`action_id` = pAction_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByClass_id`(
IN pClass_id INT 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`class_id` = pClass_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByLayout_id`(
IN pLayout_id INT 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`layout_id` = pLayout_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByPackage_id`(
IN pPackage_id INT 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeBySkin_id`(
IN pSkin_id INT 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`skin_id` = pSkin_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromThemeByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromThemeByTemplate_id`(
IN pTemplate_id INT 
)
BEGIN

DELETE 
FROM 		`theme` 
WHERE 		`template_id` = pTemplate_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByDefault`(
IN pDefault VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`default` = pDefault;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByDirection`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByDirection`(
IN pDirection VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`direction` = pDirection;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layoutByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layoutByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_layout` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByLayout_id`(
IN pLayout_id INT 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`layout_id` = pLayout_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_layout_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_layout_infoByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_layout_info` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByDefault`(
IN pDefault VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`default` = pDefault;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByLayout_id`(
IN pLayout_id INT 
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`layout_id` = pLayout_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByTemplate_id`(
IN pTemplate_id INT 
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`template_id` = pTemplate_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skinByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skinByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_skin` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_skin_infoBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_skin_infoBySkin_id`(
IN pSkin_id INT 
)
BEGIN

DELETE 
FROM 		`theme_skin_info` 
WHERE 		`skin_id` = pSkin_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateByAuthor_id`(
IN pAuthor_id INT 
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateByDefault`(
IN pDefault VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`default` = pDefault;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateByOrder`(
IN pOrder INT 
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateByPublished`(
IN pPublished VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_templateByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_templateByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`theme_template` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByPublish_from`(
IN pPublish_from DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByPublish_to`(
IN pPublish_to DATETIME 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTheme_template_infoByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTheme_template_infoByTemplate_id`(
IN pTemplate_id INT 
)
BEGIN

DELETE 
FROM 		`theme_template_info` 
WHERE 		`template_id` = pTemplate_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationByLocale_id`(
IN pLocale_id INT 
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromTranslationByTranslation`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromTranslationByTranslation`(
IN pTranslation TEXT 
)
BEGIN

DELETE 
FROM 		`translation` 
WHERE 		`translation` = pTranslation;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUserByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUserByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`user` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUserByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUserByEmail`(
IN pEmail VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user` 
WHERE 		`email` = pEmail;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUserByFullname`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUserByFullname`(
IN pFullname VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user` 
WHERE 		`fullname` = pFullname;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUserById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUserById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`user` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUserByPassword`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUserByPassword`(
IN pPassword VARCHAR (32)
)
BEGIN

DELETE 
FROM 		`user` 
WHERE 		`password` = pPassword;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUserByUsername`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUserByUsername`(
IN pUsername VARCHAR (32)
)
BEGIN

DELETE 
FROM 		`user` 
WHERE 		`username` = pUsername;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUserByUser_level_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUserByUser_level_id`(
IN pUser_level_id INT 
)
BEGIN

DELETE 
FROM 		`user` 
WHERE 		`user_level_id` = pUser_level_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByApproved`(
IN pApproved VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByBlocked`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByBlocked`(
IN pBlocked VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`blocked` = pBlocked;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByCompany`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByCompany`(
IN pCompany VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`company` = pCompany;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByConfirmed`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByConfirmed`(
IN pConfirmed VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`confirmed` = pConfirmed;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByDate_of_birth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByDate_of_birth`(
IN pDate_of_birth DATETIME 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`date_of_birth` = pDate_of_birth;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByDepartment`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByDepartment`(
IN pDepartment VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`department` = pDepartment;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByHome_phone`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByHome_phone`(
IN pHome_phone VARCHAR (17)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`home_phone` = pHome_phone;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByLast_login_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByLast_login_date`(
IN pLast_login_date DATETIME 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`last_login_date` = pLast_login_date;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByMobile`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByMobile`(
IN pMobile VARCHAR (17)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`mobile` = pMobile;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByPosition`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByPosition`(
IN pPosition VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`position` = pPosition;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByRegistration_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByRegistration_date`(
IN pRegistration_date DATETIME 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`registration_date` = pRegistration_date;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByUser_id`(
IN pUser_id INT 
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByWork_fax`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByWork_fax`(
IN pWork_fax VARCHAR (17)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`work_fax` = pWork_fax;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_infoByWork_phone`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_infoByWork_phone`(
IN pWork_phone VARCHAR (17)
)
BEGIN

DELETE 
FROM 		`user_info` 
WHERE 		`work_phone` = pWork_phone;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByDate_added`(
IN pDate_added TIMESTAMP 
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByDescription`(
IN pDescription TEXT 
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByLabel`(
IN pLabel VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByLocked_by`(
IN pLocked_by INT 
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByLocked_time`(
IN pLocked_time DATETIME 
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByModified_by`(
IN pModified_by INT 
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByModified_time`(
IN pModified_time DATETIME 
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_levelByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_levelByTitle`(
IN pTitle VARCHAR (255)
)
BEGIN

DELETE 
FROM 		`user_level` 
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_level_permissionByAction_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_level_permissionByAction_id`(
IN pAction_id INT 
)
BEGIN

DELETE 
FROM 		`user_level_permission` 
WHERE 		`action_id` = pAction_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_level_permissionByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_level_permissionByClass_id`(
IN pClass_id INT 
)
BEGIN

DELETE 
FROM 		`user_level_permission` 
WHERE 		`class_id` = pClass_id;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_level_permissionByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_level_permissionByComments`(
IN pComments TEXT 
)
BEGIN

DELETE 
FROM 		`user_level_permission` 
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_level_permissionById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_level_permissionById`(
IN pId INT 
)
BEGIN

DELETE 
FROM 		`user_level_permission` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_level_permissionByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_level_permissionByOptions`(
IN pOptions TEXT 
)
BEGIN

DELETE 
FROM 		`user_level_permission` 
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_level_permissionByPermission`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_level_permissionByPermission`(
IN pPermission INT 
)
BEGIN

DELETE 
FROM 		`user_level_permission` 
WHERE 		`permission` = pPermission;

END$$

DROP PROCEDURE IF EXISTS `SP_DeleteFromUser_level_permissionByUser_level_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeleteFromUser_level_permissionByUser_level_id`(
IN pUser_level_id INT 
)
BEGIN

DELETE 
FROM 		`user_level_permission` 
WHERE 		`user_level_id` = pUser_level_id;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByArea_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByArea_idOrderById`( 
IN pArea_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pArea_id = pArea_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`area_id` = '",@pArea_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByArea_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByArea_idOrderByIdWithLimit`( 
IN pArea_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pArea_id = pArea_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`area_id` = '",@pArea_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByExtensionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByExtensionOrderById`( 
IN pExtension VARCHAR (10), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pExtension = pExtension;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`extension` = '",@pExtension,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByExtensionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByExtensionOrderByIdWithLimit`( 
IN pExtension VARCHAR (10), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pExtension = pExtension;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`extension` = '",@pExtension,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByFull_pathOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByFull_pathOrderById`( 
IN pFull_path MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_path = pFull_path;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`full_path` = '",@pFull_path,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByFull_pathOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByFull_pathOrderByIdWithLimit`( 
IN pFull_path MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_path = pFull_path;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`full_path` = '",@pFull_path,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByArea_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByArea_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Area_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByArea_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByArea_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Area_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByExtension`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Extension` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByExtensionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByExtensionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Extension` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByFull_path`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Full_path` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByFull_pathWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByFull_pathWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Full_path` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByLink`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByLink`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Link` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByLinkWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByLinkWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Link` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByMime_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByMime_type`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Mime_type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByMime_typeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByMime_typeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Mime_type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByObject`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByObject`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByObjectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByObjectWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderBySize`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderBySizeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByType`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByType`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByIdOrderByTypeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByIdOrderByTypeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId
ORDER BY 	`Type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByLinkOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByLinkOrderById`( 
IN pLink VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLink = pLink;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`link` = '",@pLink,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByLinkOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByLinkOrderByIdWithLimit`( 
IN pLink VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLink = pLink;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`link` = '",@pLink,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByMime_typeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByMime_typeOrderById`( 
IN pMime_type VARCHAR (200), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMime_type = pMime_type;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`mime_type` = '",@pMime_type,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByMime_typeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByMime_typeOrderByIdWithLimit`( 
IN pMime_type VARCHAR (200), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMime_type = pMime_type;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`mime_type` = '",@pMime_type,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByObjectOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByObjectOrderById`( 
IN pObject TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject = pObject;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`object` = '",@pObject,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByObjectOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByObjectOrderByIdWithLimit`( 
IN pObject TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject = pObject;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`object` = '",@pObject,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerBySizeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerBySizeOrderById`( 
IN pSize INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerBySizeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerBySizeOrderByIdWithLimit`( 
IN pSize INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByTypeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByTypeOrderById`( 
IN pType VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType = pType;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`type` = '",@pType,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerByTypeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerByTypeOrderByIdWithLimit`( 
IN pType VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType = pType;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`type` = '",@pType,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByArea_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByArea_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Area_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByArea_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByArea_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Area_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByExtension`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Extension` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByExtensionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByExtensionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Extension` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByFull_path`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Full_path` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByFull_pathWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByFull_pathWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Full_path` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByLink`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByLink`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Link` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByLinkWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByLinkWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Link` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByMime_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByMime_type`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Mime_type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByMime_typeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByMime_typeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Mime_type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByObject`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByObject`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByObjectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByObjectWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderBySize`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderBySizeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByType`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByType`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBannerOrderByTypeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBannerOrderByTypeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
ORDER BY 	`Type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllBanner_areaOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllBanner_areaOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByParent_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Parent_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByParent_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByParent_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Parent_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByShow_in_menu`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_menu` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByShow_in_menuWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByShow_in_menuWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_menu` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByType_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByIdOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByIdOrderByType_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByParent_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByParent_idOrderById`( 
IN pParent_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pParent_id = pParent_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`parent_id` = '",@pParent_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByParent_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByParent_idOrderByIdWithLimit`( 
IN pParent_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pParent_id = pParent_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`parent_id` = '",@pParent_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByShow_in_menuOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByShow_in_menuOrderById`( 
IN pShow_in_menu VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_menu = pShow_in_menu;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`show_in_menu` = '",@pShow_in_menu,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByShow_in_menuOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByShow_in_menuOrderByIdWithLimit`( 
IN pShow_in_menu VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_menu = pShow_in_menu;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`show_in_menu` = '",@pShow_in_menu,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByType_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByType_idOrderById`( 
IN pType_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryByType_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryByType_idOrderByIdWithLimit`( 
IN pType_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByParent_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Parent_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByParent_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByParent_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Parent_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByShow_in_menu`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Show_in_menu` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByShow_in_menuWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByShow_in_menuWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Show_in_menu` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByType_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategoryOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategoryOrderByType_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByCategory_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByCategory_idOrderById`( 
IN pCategory_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByDirect_object_countOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByDirect_object_countOrderById`( 
IN pDirect_object_count TINYINT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDirect_object_count = pDirect_object_count;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`direct_object_count` = '",@pDirect_object_count,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByDirect_object_countOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByDirect_object_countOrderByIdWithLimit`( 
IN pDirect_object_count TINYINT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDirect_object_count = pDirect_object_count;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`direct_object_count` = '",@pDirect_object_count,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByCategory_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByCategory_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByDirect_object_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByDirect_object_count`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Direct_object_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByDirect_object_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByDirect_object_countWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Direct_object_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByIndirect_object_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByIndirect_object_count`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Indirect_object_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByIndirect_object_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByIndirect_object_countWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Indirect_object_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByMeta_data`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Meta_data` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByMeta_dataWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByMeta_dataWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Meta_data` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByMeta_desc`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByMeta_desc`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Meta_desc` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByMeta_descWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByMeta_descWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Meta_desc` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByMeta_key`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByMeta_key`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Meta_key` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByMeta_keyWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByMeta_keyWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Meta_key` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByMeta_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByMeta_title`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Meta_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByMeta_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByMeta_titleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Meta_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByPage_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByPage_title`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Page_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByPage_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByPage_titleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Page_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderBySubcat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderBySubcat_count`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Subcat_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIdOrderBySubcat_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIdOrderBySubcat_countWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId
ORDER BY 	`Subcat_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIndirect_object_countOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIndirect_object_countOrderById`( 
IN pIndirect_object_count TINYINT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIndirect_object_count = pIndirect_object_count;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`indirect_object_count` = '",@pIndirect_object_count,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByIndirect_object_countOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByIndirect_object_countOrderByIdWithLimit`( 
IN pIndirect_object_count TINYINT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIndirect_object_count = pIndirect_object_count;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`indirect_object_count` = '",@pIndirect_object_count,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByMeta_dataOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByMeta_dataOrderById`( 
IN pMeta_data TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_data = pMeta_data;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`meta_data` = '",@pMeta_data,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByMeta_dataOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByMeta_dataOrderByIdWithLimit`( 
IN pMeta_data TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_data = pMeta_data;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`meta_data` = '",@pMeta_data,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByMeta_descOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByMeta_descOrderById`( 
IN pMeta_desc TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_desc = pMeta_desc;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`meta_desc` = '",@pMeta_desc,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByMeta_descOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByMeta_descOrderByIdWithLimit`( 
IN pMeta_desc TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_desc = pMeta_desc;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`meta_desc` = '",@pMeta_desc,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByMeta_keyOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByMeta_keyOrderById`( 
IN pMeta_key TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_key = pMeta_key;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`meta_key` = '",@pMeta_key,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByMeta_keyOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByMeta_keyOrderByIdWithLimit`( 
IN pMeta_key TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_key = pMeta_key;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`meta_key` = '",@pMeta_key,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByMeta_titleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByMeta_titleOrderById`( 
IN pMeta_title TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_title = pMeta_title;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`meta_title` = '",@pMeta_title,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByMeta_titleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByMeta_titleOrderByIdWithLimit`( 
IN pMeta_title TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_title = pMeta_title;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`meta_title` = '",@pMeta_title,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByPage_titleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByPage_titleOrderById`( 
IN pPage_title TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPage_title = pPage_title;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`page_title` = '",@pPage_title,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByPage_titleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByPage_titleOrderByIdWithLimit`( 
IN pPage_title TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPage_title = pPage_title;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`page_title` = '",@pPage_title,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoBySubcat_countOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoBySubcat_countOrderById`( 
IN pSubcat_count TINYINT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSubcat_count = pSubcat_count;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`subcat_count` = '",@pSubcat_count,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoBySubcat_countOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoBySubcat_countOrderByIdWithLimit`( 
IN pSubcat_count TINYINT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSubcat_count = pSubcat_count;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`subcat_count` = '",@pSubcat_count,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByCategory_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByCategory_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByDirect_object_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByDirect_object_count`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Direct_object_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByDirect_object_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByDirect_object_countWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Direct_object_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByIndirect_object_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByIndirect_object_count`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Indirect_object_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByIndirect_object_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByIndirect_object_countWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Indirect_object_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByMeta_data`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Meta_data` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByMeta_dataWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByMeta_dataWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Meta_data` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByMeta_desc`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByMeta_desc`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Meta_desc` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByMeta_descWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByMeta_descWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Meta_desc` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByMeta_key`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByMeta_key`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Meta_key` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByMeta_keyWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByMeta_keyWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Meta_key` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByMeta_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByMeta_title`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Meta_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByMeta_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByMeta_titleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Meta_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByPage_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByPage_title`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Page_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByPage_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByPage_titleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Page_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderBySubcat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderBySubcat_count`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Subcat_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_infoOrderBySubcat_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_infoOrderBySubcat_countWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
ORDER BY 	`Subcat_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByShow_in_menu`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_menu` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByShow_in_menuWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByShow_in_menuWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_menu` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByShow_in_menuOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByShow_in_menuOrderById`( 
IN pShow_in_menu VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_menu = pShow_in_menu;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`show_in_menu` = '",@pShow_in_menu,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByShow_in_menuOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByShow_in_menuOrderByIdWithLimit`( 
IN pShow_in_menu VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_menu = pShow_in_menu;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`show_in_menu` = '",@pShow_in_menu,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByShow_in_menu`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Show_in_menu` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByShow_in_menuWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByShow_in_menuWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Show_in_menu` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_typeOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_typeOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByCategory_type_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByCategory_type_idOrderById`( 
IN pCategory_type_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_type_id = pCategory_type_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`category_type_id` = '",@pCategory_type_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByCategory_type_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByCategory_type_idOrderByIdWithLimit`( 
IN pCategory_type_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_type_id = pCategory_type_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`category_type_id` = '",@pCategory_type_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByDirect_cat_countOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByDirect_cat_countOrderById`( 
IN pDirect_cat_count TINYINT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDirect_cat_count = pDirect_cat_count;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`direct_cat_count` = '",@pDirect_cat_count,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByDirect_cat_countOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByDirect_cat_countOrderByIdWithLimit`( 
IN pDirect_cat_count TINYINT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDirect_cat_count = pDirect_cat_count;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`direct_cat_count` = '",@pDirect_cat_count,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByCategory_type_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByCategory_type_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Category_type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByCategory_type_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByCategory_type_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Category_type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByDirect_cat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByDirect_cat_count`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Direct_cat_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByDirect_cat_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByDirect_cat_countWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Direct_cat_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByIndirect_cat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByIndirect_cat_count`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Indirect_cat_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByIndirect_cat_countOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByIndirect_cat_countOrderById`( 
IN pIndirect_cat_count TINYINT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIndirect_cat_count = pIndirect_cat_count;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`indirect_cat_count` = '",@pIndirect_cat_count,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByCategory_type_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByCategory_type_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Category_type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByCategory_type_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByCategory_type_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Category_type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByDirect_cat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByDirect_cat_count`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Direct_cat_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByDirect_cat_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByDirect_cat_countWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Direct_cat_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByIndirect_cat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByIndirect_cat_count`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Indirect_cat_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByIndirect_cat_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByIndirect_cat_countWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Indirect_cat_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCategory_type_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCategory_type_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllCleanPhotoEssaysOrderByColWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllCleanPhotoEssaysOrderByColWithLimit`( 
IN pColumn VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pColumn = pColumn;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS  u.*, ui.*, op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`, o.`category_id` AS `sub_category` 
FROM 		`object_photo` AS op  
INNER JOIN 	`object` AS o ON op.`object_id` = o.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE 		o.`source_id` != 0 
AND 		op.`published` = 'Yes' 
AND 		op.`approved`='Yes' 
ORDER BY 	",@pColumn," ",@pOrder,"  
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;

EXECUTE stmt ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByLocale`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByLocale`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Locale` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByLocaleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByLocaleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Locale` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByLocale_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByLocale_title`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Locale_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByLocale_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByLocale_titleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Locale_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByLocaleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByLocaleOrderById`( 
IN pLocale VARCHAR (6), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale = pLocale;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`locale` = '",@pLocale,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByLocaleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByLocaleOrderByIdWithLimit`( 
IN pLocale VARCHAR (6), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale = pLocale;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`locale` = '",@pLocale,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByLocale_titleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByLocale_titleOrderById`( 
IN pLocale_title VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_title = pLocale_title;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`locale_title` = '",@pLocale_title,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByLocale_titleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByLocale_titleOrderByIdWithLimit`( 
IN pLocale_title VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_title = pLocale_title;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`locale_title` = '",@pLocale_title,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByLocale`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByLocale`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Locale` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByLocaleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByLocaleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Locale` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByLocale_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByLocale_title`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Locale_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByLocale_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByLocale_titleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Locale_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllLocaleOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllLocaleOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByLink`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByLink`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Link` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByLinkWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByLinkWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Link` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByParent_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Parent_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByParent_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByParent_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Parent_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderBySublevel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderBySublevel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Sublevel` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderBySublevelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderBySublevelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Sublevel` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByType_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByIdOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByIdOrderByType_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByLinkOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByLinkOrderById`( 
IN pLink MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLink = pLink;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`link` = '",@pLink,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByLinkOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByLinkOrderByIdWithLimit`( 
IN pLink MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLink = pLink;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`link` = '",@pLink,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByParent_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByParent_idOrderById`( 
IN pParent_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pParent_id = pParent_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`parent_id` = '",@pParent_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByParent_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByParent_idOrderByIdWithLimit`( 
IN pParent_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pParent_id = pParent_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`parent_id` = '",@pParent_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuBySublevelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuBySublevelOrderById`( 
IN pSublevel INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSublevel = pSublevel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`sublevel` = '",@pSublevel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuBySublevelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuBySublevelOrderByIdWithLimit`( 
IN pSublevel INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSublevel = pSublevel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`sublevel` = '",@pSublevel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByType_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByType_idOrderById`( 
IN pType_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuByType_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuByType_idOrderByIdWithLimit`( 
IN pType_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByLink`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByLink`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Link` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByLinkWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByLinkWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Link` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByParent_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Parent_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByParent_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByParent_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Parent_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderBySublevel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderBySublevel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Sublevel` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderBySublevelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderBySublevelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Sublevel` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByType_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenuOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenuOrderByType_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByMenu_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByMenu_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Menu_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByMenu_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByMenu_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Menu_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByMenu_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByMenu_idOrderById`( 
IN pMenu_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMenu_id = pMenu_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`menu_id` = '",@pMenu_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByMenu_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByMenu_idOrderByIdWithLimit`( 
IN pMenu_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMenu_id = pMenu_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`menu_id` = '",@pMenu_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByMenu_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByMenu_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Menu_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByMenu_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByMenu_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Menu_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_infoOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_infoOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllMenu_typeOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllMenu_typeOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByCategory_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByCategory_idOrderById`( 
IN pCategory_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByCreated_dateOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByCreated_dateOrderById`( 
IN pCreated_date DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCreated_date = pCreated_date;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`created_date` = '",@pCreated_date,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByCreated_dateOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByCreated_dateOrderByIdWithLimit`( 
IN pCreated_date DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCreated_date = pCreated_date;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`created_date` = '",@pCreated_date,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByGuid_urlOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByGuid_urlOrderById`( 
IN pGuid_url MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pGuid_url = pGuid_url;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`guid_url` = '",@pGuid_url,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByGuid_urlOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByGuid_urlOrderByIdWithLimit`( 
IN pGuid_url MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pGuid_url = pGuid_url;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`guid_url` = '",@pGuid_url,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByCategory_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByCategory_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByCreated_date`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Created_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByCreated_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByCreated_dateWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Created_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByGuid_url`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByGuid_url`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Guid_url` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByGuid_urlWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByGuid_urlWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Guid_url` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByLocale_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByLocale_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByMeta_data`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Meta_data` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByMeta_dataWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByMeta_dataWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Meta_data` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByMeta_desc`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByMeta_desc`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Meta_desc` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByMeta_descWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByMeta_descWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Meta_desc` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByMeta_key`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByMeta_key`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Meta_key` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByMeta_keyWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByMeta_keyWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Meta_key` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByMeta_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByMeta_title`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Meta_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByMeta_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByMeta_titleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Meta_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByOriginal_author`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByOriginal_author`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Original_author` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByOriginal_authorWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByOriginal_authorWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Original_author` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByPage_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByPage_title`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Page_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByPage_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByPage_titleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Page_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByParent_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Parent_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByParent_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByParent_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Parent_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByShow_in_list`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByShow_in_list`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_list` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByShow_in_listWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByShow_in_listWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_list` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderBySource_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderBySource_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByTags`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByTags`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Tags` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByTagsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByTagsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Tags` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByType_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByIdOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByIdOrderByType_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByLocale_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByLocale_idOrderById`( 
IN pLocale_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByLocale_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByLocale_idOrderByIdWithLimit`( 
IN pLocale_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByMeta_dataOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByMeta_dataOrderById`( 
IN pMeta_data TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_data = pMeta_data;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`meta_data` = '",@pMeta_data,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByMeta_dataOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByMeta_dataOrderByIdWithLimit`( 
IN pMeta_data TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_data = pMeta_data;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`meta_data` = '",@pMeta_data,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByMeta_descOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByMeta_descOrderById`( 
IN pMeta_desc TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_desc = pMeta_desc;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`meta_desc` = '",@pMeta_desc,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByMeta_descOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByMeta_descOrderByIdWithLimit`( 
IN pMeta_desc TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_desc = pMeta_desc;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`meta_desc` = '",@pMeta_desc,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByMeta_keyOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByMeta_keyOrderById`( 
IN pMeta_key TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_key = pMeta_key;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`meta_key` = '",@pMeta_key,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByMeta_keyOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByMeta_keyOrderByIdWithLimit`( 
IN pMeta_key TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_key = pMeta_key;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`meta_key` = '",@pMeta_key,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByMeta_titleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByMeta_titleOrderById`( 
IN pMeta_title TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_title = pMeta_title;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`meta_title` = '",@pMeta_title,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByMeta_titleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByMeta_titleOrderByIdWithLimit`( 
IN pMeta_title TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_title = pMeta_title;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`meta_title` = '",@pMeta_title,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByOriginal_authorOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByOriginal_authorOrderById`( 
IN pOriginal_author VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOriginal_author = pOriginal_author;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`original_author` = '",@pOriginal_author,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByOriginal_authorOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByOriginal_authorOrderByIdWithLimit`( 
IN pOriginal_author VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOriginal_author = pOriginal_author;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`original_author` = '",@pOriginal_author,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByPage_titleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByPage_titleOrderById`( 
IN pPage_title TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPage_title = pPage_title;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`page_title` = '",@pPage_title,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByPage_titleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByPage_titleOrderByIdWithLimit`( 
IN pPage_title TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPage_title = pPage_title;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`page_title` = '",@pPage_title,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByParent_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByParent_idOrderById`( 
IN pParent_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pParent_id = pParent_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`parent_id` = '",@pParent_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByParent_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByParent_idOrderByIdWithLimit`( 
IN pParent_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pParent_id = pParent_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`parent_id` = '",@pParent_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByShow_in_listOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByShow_in_listOrderById`( 
IN pShow_in_list VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_list = pShow_in_list;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`show_in_list` = '",@pShow_in_list,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByShow_in_listOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByShow_in_listOrderByIdWithLimit`( 
IN pShow_in_list VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_list = pShow_in_list;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`show_in_list` = '",@pShow_in_list,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectBySource_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectBySource_idOrderById`( 
IN pSource_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectBySource_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectBySource_idOrderByIdWithLimit`( 
IN pSource_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByTagsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByTagsOrderById`( 
IN pTags TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTags = pTags;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`tags` = '",@pTags,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByTagsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByTagsOrderByIdWithLimit`( 
IN pTags TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTags = pTags;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`tags` = '",@pTags,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByType_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByType_idOrderById`( 
IN pType_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectByType_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectByType_idOrderByIdWithLimit`( 
IN pType_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByCategory_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByCategory_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByCreated_date`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Created_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByCreated_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByCreated_dateWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Created_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByGuid_url`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByGuid_url`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Guid_url` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByGuid_urlWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByGuid_urlWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Guid_url` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByLocale_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByLocale_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByMeta_data`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Meta_data` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByMeta_dataWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByMeta_dataWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Meta_data` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByMeta_desc`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByMeta_desc`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Meta_desc` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByMeta_descWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByMeta_descWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Meta_desc` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByMeta_key`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByMeta_key`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Meta_key` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByMeta_keyWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByMeta_keyWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Meta_key` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByMeta_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByMeta_title`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Meta_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByMeta_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByMeta_titleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Meta_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByOriginal_author`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByOriginal_author`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Original_author` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByOriginal_authorWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByOriginal_authorWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Original_author` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByPage_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByPage_title`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Page_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByPage_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByPage_titleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Page_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByParent_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Parent_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByParent_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByParent_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Parent_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByShow_in_list`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByShow_in_list`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Show_in_list` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByShow_in_listWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByShow_in_listWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Show_in_list` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderBySource_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderBySource_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByTags`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByTags`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Tags` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByTagsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByTagsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Tags` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByType_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObjectOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObjectOrderByType_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByAliasOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByAliasOrderById`( 
IN pAlias VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByAliasOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByAliasOrderByIdWithLimit`( 
IN pAlias VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByEmailOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByEmailOrderById`( 
IN pEmail VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pEmail = pEmail;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`email` = '",@pEmail,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByEmailOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByEmailOrderByIdWithLimit`( 
IN pEmail VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pEmail = pEmail;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`email` = '",@pEmail,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByAlias`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByAliasWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByEmail`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Email` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByEmailWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByEmailWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Email` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByIs_abuse`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByIs_abuse`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Is_abuse` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByIs_abuseWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByIs_abuseWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Is_abuse` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByLocale_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByLocale_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByType_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByType_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByUser_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIdOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIdOrderByUser_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIs_abuseOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIs_abuseOrderById`( 
IN pIs_abuse VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIs_abuse = pIs_abuse;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`is_abuse` = '",@pIs_abuse,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByIs_abuseOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByIs_abuseOrderByIdWithLimit`( 
IN pIs_abuse VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIs_abuse = pIs_abuse;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`is_abuse` = '",@pIs_abuse,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByLocale_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByLocale_idOrderById`( 
IN pLocale_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByLocale_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByLocale_idOrderByIdWithLimit`( 
IN pLocale_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByType_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByType_idOrderById`( 
IN pType_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByType_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByType_idOrderByIdWithLimit`( 
IN pType_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByUser_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByUser_idOrderById`( 
IN pUser_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseByUser_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseByUser_idOrderByIdWithLimit`( 
IN pUser_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByAlias`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByAliasWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByEmail`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Email` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByEmailWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByEmailWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Email` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByIs_abuse`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByIs_abuse`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Is_abuse` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByIs_abuseWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByIs_abuseWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Is_abuse` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByLocale_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByLocale_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByType_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByType_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByUser_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuseOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuseOrderByUser_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_abuse_typeOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_abuse_typeOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByAliasOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByAliasOrderById`( 
IN pAlias VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByAliasOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByAliasOrderByIdWithLimit`( 
IN pAlias VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByCategory_idOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByCategory_idOrderByColumnWithLimit`( 
IN pCategory_id INT , 
IN pColumn VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pColumn = pColumn;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`",@pColumn,"` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByCategory_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByCategory_idOrderById`( 
IN pCategory_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByCreated_dateOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByCreated_dateOrderById`( 
IN pCreated_date DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCreated_date = pCreated_date;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`created_date` = '",@pCreated_date,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByCreated_dateOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByCreated_dateOrderByIdWithLimit`( 
IN pCreated_date DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCreated_date = pCreated_date;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`created_date` = '",@pCreated_date,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByFull_textOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByFull_textOrderById`( 
IN pFull_text TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_text = pFull_text;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`full_text` = '",@pFull_text,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByFull_textOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByFull_textOrderByIdWithLimit`( 
IN pFull_text TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_text = pFull_text;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`full_text` = '",@pFull_text,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByAlias`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByAliasWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByCategory_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByCategory_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByCreated_date`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Created_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByCreated_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByCreated_dateWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Created_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByFull_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByFull_text`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Full_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByFull_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByFull_textWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Full_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByIntro_text`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByIntro_textWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByShow_in_object`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderByShow_in_objectWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderBySource_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIdOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIdOrderBySource_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIntro_textOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIntro_textOrderById`( 
IN pIntro_text MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByIntro_textOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByIntro_textOrderByIdWithLimit`( 
IN pIntro_text MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByShow_in_objectOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByShow_in_objectOrderById`( 
IN pShow_in_object VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleByShow_in_objectOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleByShow_in_objectOrderByIdWithLimit`( 
IN pShow_in_object VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleBySource_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleBySource_idOrderById`( 
IN pSource_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleBySource_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleBySource_idOrderByIdWithLimit`( 
IN pSource_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByAlias`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByAliasWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByCategory_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByCategory_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByCreated_date`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Created_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByCreated_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByCreated_dateWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Created_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByFull_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByFull_text`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Full_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByFull_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByFull_textWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Full_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByIntro_text`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByIntro_textWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByShow_in_object`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderByShow_in_objectWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderBySource_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_articleOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_articleOrderBySource_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByCategoryListOrderByColumnWithLimit`$$
CREATE DEFINER=`sarayanews`@`localhost` PROCEDURE `SP_GetAllObject_commentByCategoryListOrderByColumnWithLimit`( 
IN pCategory_id VARCHAR (255), 
IN pColumn VARCHAR (255),
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pColumn = pColumn;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT straight_join SQL_CALC_FOUND_ROWS oc.`id`, oc.`object_id`, oc.`user_id`, oc.`title`, oc.`content`, oc.`email`, oc.`webpage`, oc.`locale_id`, oc.`country_id`, oc.`published`, oc.`approved`, oc.`date_added`, oc.`comments`, oc.`options`, o.`title` AS `article_title`, o.`author_id` 
FROM `object_comment` AS oc 
INNER JOIN `object` AS o ON o.`id` = oc.`object_id` 
WHERE o.`category_id` IN (",@pCategory_id,") 
AND oc.`date_added` > '2010-07-15' 
ORDER BY ",pColumn," ",@pOrder," 
LIMIT ",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByCategory_idOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByCategory_idOrderByColumnWithLimit`( 
IN pCategory_id INT , 
IN pColumn VARCHAR (255),
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pColumn = pColumn;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS oc.`id`, oc.`object_id`, oc.`user_id`, oc.`title`, oc.`content`, oc.`email`, oc.`webpage`, oc.`locale_id`, oc.`country_id`, oc.`published`, oc.`approved`, oc.`date_added`, oc.`comments`, oc.`options` 
FROM 		`object_comment` AS oc 
INNER JOIN 	`object` AS o ON o.`id` = oc.`object_id` 
WHERE 		o.`category_id` = '",@pCategory_id,"'
ORDER BY 	oc.",pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByContentOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByContentOrderById`( 
IN pContent TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pContent = pContent;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`content` = '",@pContent,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByContentOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByContentOrderByIdWithLimit`( 
IN pContent TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pContent = pContent;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`content` = '",@pContent,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByCountry_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByCountry_idOrderById`( 
IN pCountry_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCountry_id = pCountry_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`country_id` = '",@pCountry_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByCountry_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByCountry_idOrderByIdWithLimit`( 
IN pCountry_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCountry_id = pCountry_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`country_id` = '",@pCountry_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByEmailOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByEmailOrderById`( 
IN pEmail VARCHAR (150), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pEmail = pEmail;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`email` = '",@pEmail,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByEmailOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByEmailOrderByIdWithLimit`( 
IN pEmail VARCHAR (150), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pEmail = pEmail;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`email` = '",@pEmail,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByContent`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByContent`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Content` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByContentWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByContentWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Content` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByCountry_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByCountry_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Country_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByCountry_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByCountry_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Country_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByEmail`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Email` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByEmailWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByEmailWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Email` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByLocale_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByLocale_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByUser_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByUser_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByWebpage`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByWebpage`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Webpage` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByIdOrderByWebpageWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByIdOrderByWebpageWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId
ORDER BY 	`Webpage` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByLocale_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByLocale_idOrderById`( 
IN pLocale_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByLocale_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByLocale_idOrderByIdWithLimit`( 
IN pLocale_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentBySearchOrderByColumnWithLimit`$$
CREATE DEFINER=`sarayanews`@`localhost` PROCEDURE `SP_GetAllObject_commentBySearchOrderByColumnWithLimit`( 
IN pSearchCondition TEXT, 
IN pColumn VARCHAR (255),
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSearchCondition = pSearchCondition;
SET @pColumn = pColumn;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT SQL_CALC_FOUND_ROWS oc.`id`, oc.`object_id`, oc.`user_id`, oc.`title`, oc.`content`, oc.`email`, oc.`webpage`, oc.`locale_id`, oc.`country_id`, oc.`published`, oc.`approved`, oc.`date_added`, oc.`comments`, oc.`options`, o.`title` AS `article_title`, o.`author_id` 
FROM `object_comment` AS oc 
INNER JOIN `object` AS o ON o.`id` = oc.`object_id` 
WHERE ",@pSearchCondition," 
ORDER BY ",@pColumn," ",@pOrder," 
LIMIT ",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByTitleOrderById`( 
IN pTitle VARCHAR (150), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (150), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByUser_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByUser_idOrderById`( 
IN pUser_id VARCHAR (100), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByUser_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByUser_idOrderByIdWithLimit`( 
IN pUser_id VARCHAR (100), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByWebpageOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByWebpageOrderById`( 
IN pWebpage MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWebpage = pWebpage;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`webpage` = '",@pWebpage,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentByWebpageOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentByWebpageOrderByIdWithLimit`( 
IN pWebpage MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWebpage = pWebpage;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`webpage` = '",@pWebpage,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByContent`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByContent`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Content` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByContentWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByContentWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Content` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByCountry_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByCountry_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Country_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByCountry_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByCountry_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Country_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByEmail`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Email` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByEmailWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByEmailWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Email` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByLocale_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByLocale_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByUser_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByUser_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByWebpage`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByWebpage`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Webpage` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_commentOrderByWebpageWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_commentOrderByWebpageWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
ORDER BY 	`Webpage` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByAuthor_idOrderById`( 
IN pAuthor_id VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByCategory_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByCategory_idOrderById`( 
IN pCategory_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByFiles_countOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByFiles_countOrderById`( 
IN pFiles_count INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFiles_count = pFiles_count;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`files_count` = '",@pFiles_count,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByFiles_countOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByFiles_countOrderByIdWithLimit`( 
IN pFiles_count INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFiles_count = pFiles_count;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`files_count` = '",@pFiles_count,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByFull_pathOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByFull_pathOrderById`( 
IN pFull_path MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_path = pFull_path;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`full_path` = '",@pFull_path,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByFull_pathOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByFull_pathOrderByIdWithLimit`( 
IN pFull_path MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_path = pFull_path;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`full_path` = '",@pFull_path,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByCategory_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByCategory_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByFiles_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByFiles_count`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Files_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByFiles_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByFiles_countWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Files_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByFull_path`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Full_path` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByFull_pathWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByFull_pathWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Full_path` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByName`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByNameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByNameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByParent_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Parent_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByParent_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByParent_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Parent_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByShow_in_object`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderByShow_in_objectWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderBySize`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByIdOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByIdOrderBySizeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByNameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByNameOrderById`( 
IN pName VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pName = pName;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`name` = '",@pName,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByNameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByNameOrderByIdWithLimit`( 
IN pName VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pName = pName;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`name` = '",@pName,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByParent_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByParent_idOrderById`( 
IN pParent_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pParent_id = pParent_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`parent_id` = '",@pParent_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByParent_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByParent_idOrderByIdWithLimit`( 
IN pParent_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pParent_id = pParent_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`parent_id` = '",@pParent_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByShow_in_objectOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByShow_in_objectOrderById`( 
IN pShow_in_object VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryByShow_in_objectOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryByShow_in_objectOrderByIdWithLimit`( 
IN pShow_in_object VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryBySizeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryBySizeOrderById`( 
IN pSize INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryBySizeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryBySizeOrderByIdWithLimit`( 
IN pSize INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByCategory_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByCategory_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByFiles_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByFiles_count`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Files_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByFiles_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByFiles_countWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Files_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByFull_path`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Full_path` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByFull_pathWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByFull_pathWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Full_path` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByName`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByNameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByNameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByParent_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Parent_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByParent_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByParent_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Parent_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByShow_in_object`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderByShow_in_objectWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderBySize`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_directoryOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_directoryOrderBySizeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByAuthor_idOrderById`( 
IN pAuthor_id VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByCategory_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByCategory_idOrderById`( 
IN pCategory_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByExtensionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByExtensionOrderById`( 
IN pExtension VARCHAR (10), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pExtension = pExtension;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`extension` = '",@pExtension,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByExtensionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByExtensionOrderByIdWithLimit`( 
IN pExtension VARCHAR (10), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pExtension = pExtension;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`extension` = '",@pExtension,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByFolder_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByFolder_idOrderById`( 
IN pFolder_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFolder_id = pFolder_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`folder_id` = '",@pFolder_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByFolder_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByFolder_idOrderByIdWithLimit`( 
IN pFolder_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFolder_id = pFolder_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`folder_id` = '",@pFolder_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByFull_pathOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByFull_pathOrderById`( 
IN pFull_path MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_path = pFull_path;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`full_path` = '",@pFull_path,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByFull_pathOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByFull_pathOrderByIdWithLimit`( 
IN pFull_path MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_path = pFull_path;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`full_path` = '",@pFull_path,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByCategory_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByCategory_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByExtension`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Extension` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByExtensionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByExtensionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Extension` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByFolder_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByFolder_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Folder_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByFolder_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByFolder_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Folder_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByFull_path`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Full_path` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByFull_pathWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByFull_pathWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Full_path` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByMime_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByMime_type`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Mime_type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByMime_typeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByMime_typeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Mime_type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByName`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByNameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByNameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByShow_in_object`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderByShow_in_objectWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderBySize`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByIdOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByIdOrderBySizeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByMime_typeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByMime_typeOrderById`( 
IN pMime_type VARCHAR (200), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMime_type = pMime_type;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`mime_type` = '",@pMime_type,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByMime_typeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByMime_typeOrderByIdWithLimit`( 
IN pMime_type VARCHAR (200), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMime_type = pMime_type;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`mime_type` = '",@pMime_type,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByNameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByNameOrderById`( 
IN pName VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pName = pName;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`name` = '",@pName,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByNameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByNameOrderByIdWithLimit`( 
IN pName VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pName = pName;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`name` = '",@pName,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByShow_in_objectOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByShow_in_objectOrderById`( 
IN pShow_in_object VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileByShow_in_objectOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileByShow_in_objectOrderByIdWithLimit`( 
IN pShow_in_object VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileBySizeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileBySizeOrderById`( 
IN pSize INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileBySizeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileBySizeOrderByIdWithLimit`( 
IN pSize INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByCategory_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByCategory_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByExtension`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Extension` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByExtensionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByExtensionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Extension` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByFolder_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByFolder_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Folder_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByFolder_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByFolder_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Folder_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByFull_path`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Full_path` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByFull_pathWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByFull_pathWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Full_path` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByMime_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByMime_type`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Mime_type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByMime_typeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByMime_typeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Mime_type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByName`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByNameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByNameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByShow_in_object`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderByShow_in_objectWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderBySize`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_fileOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_fileOrderBySizeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByLayout_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Layout_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByLayout_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByLayout_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Layout_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderBySkin_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Skin_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderBySkin_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderBySkin_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Skin_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTemplate_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Template_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTemplate_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTemplate_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Template_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTheme_publish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTheme_publish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Theme_publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTheme_publish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTheme_publish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Theme_publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTheme_publish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTheme_publish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Theme_publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTheme_publish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTheme_publish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Theme_publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTotal_comments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTotal_comments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Total_comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTotal_commentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTotal_commentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Total_comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTotal_rating`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTotal_rating`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Total_rating` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTotal_ratingWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTotal_ratingWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Total_rating` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTotal_views`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTotal_views`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Total_views` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByIdOrderByTotal_viewsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByIdOrderByTotal_viewsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId
ORDER BY 	`Total_views` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByLayout_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByLayout_idOrderById`( 
IN pLayout_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLayout_id = pLayout_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`layout_id` = '",@pLayout_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByLayout_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByLayout_idOrderByIdWithLimit`( 
IN pLayout_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLayout_id = pLayout_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`layout_id` = '",@pLayout_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoBySkin_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoBySkin_idOrderById`( 
IN pSkin_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSkin_id = pSkin_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`skin_id` = '",@pSkin_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoBySkin_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoBySkin_idOrderByIdWithLimit`( 
IN pSkin_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSkin_id = pSkin_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`skin_id` = '",@pSkin_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTemplate_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTemplate_idOrderById`( 
IN pTemplate_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTemplate_id = pTemplate_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`template_id` = '",@pTemplate_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTemplate_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTemplate_idOrderByIdWithLimit`( 
IN pTemplate_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTemplate_id = pTemplate_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`template_id` = '",@pTemplate_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTheme_publish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTheme_publish_fromOrderById`( 
IN pTheme_publish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTheme_publish_from = pTheme_publish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`theme_publish_from` = '",@pTheme_publish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTheme_publish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTheme_publish_fromOrderByIdWithLimit`( 
IN pTheme_publish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTheme_publish_from = pTheme_publish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`theme_publish_from` = '",@pTheme_publish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTheme_publish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTheme_publish_toOrderById`( 
IN pTheme_publish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTheme_publish_to = pTheme_publish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`theme_publish_to` = '",@pTheme_publish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTheme_publish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTheme_publish_toOrderByIdWithLimit`( 
IN pTheme_publish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTheme_publish_to = pTheme_publish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`theme_publish_to` = '",@pTheme_publish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTotal_commentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTotal_commentsOrderById`( 
IN pTotal_comments INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTotal_comments = pTotal_comments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`total_comments` = '",@pTotal_comments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTotal_commentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTotal_commentsOrderByIdWithLimit`( 
IN pTotal_comments INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTotal_comments = pTotal_comments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`total_comments` = '",@pTotal_comments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTotal_ratingOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTotal_ratingOrderById`( 
IN pTotal_rating INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTotal_rating = pTotal_rating;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`total_rating` = '",@pTotal_rating,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTotal_ratingOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTotal_ratingOrderByIdWithLimit`( 
IN pTotal_rating INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTotal_rating = pTotal_rating;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`total_rating` = '",@pTotal_rating,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTotal_viewsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTotal_viewsOrderById`( 
IN pTotal_views INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTotal_views = pTotal_views;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`total_views` = '",@pTotal_views,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoByTotal_viewsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoByTotal_viewsOrderByIdWithLimit`( 
IN pTotal_views INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTotal_views = pTotal_views;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`total_views` = '",@pTotal_views,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByLayout_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Layout_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByLayout_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByLayout_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Layout_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderBySkin_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Skin_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderBySkin_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderBySkin_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Skin_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTemplate_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Template_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTemplate_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTemplate_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Template_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTheme_publish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTheme_publish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Theme_publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTheme_publish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTheme_publish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Theme_publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTheme_publish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTheme_publish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Theme_publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTheme_publish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTheme_publish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Theme_publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTotal_comments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTotal_comments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Total_comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTotal_commentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTotal_commentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Total_comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTotal_rating`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTotal_rating`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Total_rating` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTotal_ratingWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTotal_ratingWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Total_rating` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTotal_views`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTotal_views`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Total_views` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_infoOrderByTotal_viewsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_infoOrderByTotal_viewsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
ORDER BY 	`Total_views` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByAliasOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByAliasOrderById`( 
IN pAlias VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByAliasOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByAliasOrderByIdWithLimit`( 
IN pAlias VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByCategory_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByCategory_idOrderById`( 
IN pCategory_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByExtensionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByExtensionOrderById`( 
IN pExtension VARCHAR (32), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pExtension = pExtension;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`extension` = '",@pExtension,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByExtensionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByExtensionOrderByIdWithLimit`( 
IN pExtension VARCHAR (32), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pExtension = pExtension;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`extension` = '",@pExtension,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByHeightOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByHeightOrderById`( 
IN pHeight INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pHeight = pHeight;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`height` = '",@pHeight,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByHeightOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByHeightOrderByIdWithLimit`( 
IN pHeight INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pHeight = pHeight;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`height` = '",@pHeight,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByAlias`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByAliasWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByCategory_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByCategory_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByExtension`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Extension` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByExtensionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByExtensionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Extension` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByHeight`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByHeight`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Height` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByHeightWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByHeightWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Height` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByIntro_text`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByIntro_textWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByMeta_data`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Meta_data` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByMeta_dataWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByMeta_dataWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Meta_data` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByShow_in_object`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByShow_in_objectWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderBySize`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderBySizeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderBySource_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderBySource_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByTaken_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByTaken_date`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Taken_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByTaken_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByTaken_dateWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Taken_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByTaken_location`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByTaken_location`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Taken_location` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByTaken_locationWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByTaken_locationWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Taken_location` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByWidth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByWidth`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Width` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIdOrderByWidthWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIdOrderByWidthWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId
ORDER BY 	`Width` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIntro_textOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIntro_textOrderById`( 
IN pIntro_text MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByIntro_textOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByIntro_textOrderByIdWithLimit`( 
IN pIntro_text MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByMeta_dataOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByMeta_dataOrderById`( 
IN pMeta_data TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_data = pMeta_data;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`meta_data` = '",@pMeta_data,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByMeta_dataOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByMeta_dataOrderByIdWithLimit`( 
IN pMeta_data TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_data = pMeta_data;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`meta_data` = '",@pMeta_data,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByShow_in_objectOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByShow_in_objectOrderById`( 
IN pShow_in_object VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByShow_in_objectOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByShow_in_objectOrderByIdWithLimit`( 
IN pShow_in_object VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoBySizeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoBySizeOrderById`( 
IN pSize INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoBySizeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoBySizeOrderByIdWithLimit`( 
IN pSize INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoBySource_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoBySource_idOrderById`( 
IN pSource_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoBySource_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoBySource_idOrderByIdWithLimit`( 
IN pSource_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByTaken_dateOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByTaken_dateOrderById`( 
IN pTaken_date DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTaken_date = pTaken_date;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`taken_date` = '",@pTaken_date,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByTaken_dateOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByTaken_dateOrderByIdWithLimit`( 
IN pTaken_date DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTaken_date = pTaken_date;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`taken_date` = '",@pTaken_date,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByTaken_locationOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByTaken_locationOrderById`( 
IN pTaken_location VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTaken_location = pTaken_location;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`taken_location` = '",@pTaken_location,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByTaken_locationOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByTaken_locationOrderByIdWithLimit`( 
IN pTaken_location VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTaken_location = pTaken_location;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`taken_location` = '",@pTaken_location,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByWidthOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByWidthOrderById`( 
IN pWidth INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWidth = pWidth;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`width` = '",@pWidth,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoByWidthOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoByWidthOrderByIdWithLimit`( 
IN pWidth INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWidth = pWidth;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`width` = '",@pWidth,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByAlias`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByAliasWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByCategory_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByCategory_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByExtension`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Extension` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByExtensionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByExtensionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Extension` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByHeight`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByHeight`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Height` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByHeightWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByHeightWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Height` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByIntro_text`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByIntro_textWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByMeta_data`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Meta_data` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByMeta_dataWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByMeta_dataWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Meta_data` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByShow_in_object`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByShow_in_objectWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderBySize`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderBySizeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderBySource_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderBySource_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByTaken_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByTaken_date`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Taken_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByTaken_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByTaken_dateWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Taken_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByTaken_location`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByTaken_location`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Taken_location` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByTaken_locationWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByTaken_locationWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Taken_location` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByWidth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByWidth`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Width` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_photoOrderByWidthWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_photoOrderByWidthWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
ORDER BY 	`Width` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByLast_ip`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByLast_ip`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Last_ip` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByLast_ipWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByLast_ipWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Last_ip` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByRating_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByRating_count`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Rating_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByRating_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByRating_countWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Rating_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByRating_total`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByRating_total`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Rating_total` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByRating_totalWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByRating_totalWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`Rating_total` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByUser_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByIdOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByIdOrderByUser_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByLast_ipOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByLast_ipOrderById`( 
IN pLast_ip VARCHAR (50), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLast_ip = pLast_ip;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`last_ip` = '",@pLast_ip,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByLast_ipOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByLast_ipOrderByIdWithLimit`( 
IN pLast_ip VARCHAR (50), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLast_ip = pLast_ip;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`last_ip` = '",@pLast_ip,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByRating_countOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByRating_countOrderById`( 
IN pRating_count INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pRating_count = pRating_count;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`rating_count` = '",@pRating_count,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByRating_countOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByRating_countOrderByIdWithLimit`( 
IN pRating_count INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pRating_count = pRating_count;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`rating_count` = '",@pRating_count,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByRating_totalOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByRating_totalOrderById`( 
IN pRating_total INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pRating_total = pRating_total;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`rating_total` = '",@pRating_total,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByRating_totalOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByRating_totalOrderByIdWithLimit`( 
IN pRating_total INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pRating_total = pRating_total;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`rating_total` = '",@pRating_total,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByUser_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByUser_idOrderById`( 
IN pUser_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingByUser_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingByUser_idOrderByIdWithLimit`( 
IN pUser_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByLast_ip`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByLast_ip`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Last_ip` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByLast_ipWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByLast_ipWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Last_ip` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByRating_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByRating_count`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Rating_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByRating_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByRating_countWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Rating_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByRating_total`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByRating_total`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Rating_total` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByRating_totalWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByRating_totalWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`Rating_total` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByUser_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_ratingOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_ratingOrderByUser_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByCountry_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByCountry_idOrderById`( 
IN pCountry_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCountry_id = pCountry_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`country_id` = '",@pCountry_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByCountry_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByCountry_idOrderByIdWithLimit`( 
IN pCountry_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCountry_id = pCountry_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`country_id` = '",@pCountry_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByCountry_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByCountry_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Country_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByCountry_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByCountry_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Country_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByLocale_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByLocale_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByName`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByNameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByNameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderBySource_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderBySource_type`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Source_type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderBySource_typeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderBySource_typeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Source_type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByTime_delay`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByTime_delay`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Time_delay` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByTime_delayWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByTime_delayWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Time_delay` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByUrl`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Url` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByIdOrderByUrlWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByIdOrderByUrlWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId
ORDER BY 	`Url` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByLocale_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByLocale_idOrderById`( 
IN pLocale_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByLocale_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByLocale_idOrderByIdWithLimit`( 
IN pLocale_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByNameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByNameOrderById`( 
IN pName VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pName = pName;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`name` = '",@pName,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByNameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByNameOrderByIdWithLimit`( 
IN pName VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pName = pName;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`name` = '",@pName,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceBySource_typeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceBySource_typeOrderById`( 
IN pSource_type VARCHAR (32), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_type = pSource_type;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`source_type` = '",@pSource_type,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceBySource_typeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceBySource_typeOrderByIdWithLimit`( 
IN pSource_type VARCHAR (32), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_type = pSource_type;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`source_type` = '",@pSource_type,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByTime_delayOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByTime_delayOrderById`( 
IN pTime_delay INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTime_delay = pTime_delay;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`time_delay` = '",@pTime_delay,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByTime_delayOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByTime_delayOrderByIdWithLimit`( 
IN pTime_delay INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTime_delay = pTime_delay;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`time_delay` = '",@pTime_delay,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByUrlOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByUrlOrderById`( 
IN pUrl MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUrl = pUrl;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`url` = '",@pUrl,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceByUrlOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceByUrlOrderByIdWithLimit`( 
IN pUrl MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUrl = pUrl;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`url` = '",@pUrl,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByCountry_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByCountry_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Country_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByCountry_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByCountry_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Country_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByLocale_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByLocale_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByName`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByNameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByNameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderBySource_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderBySource_type`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Source_type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderBySource_typeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderBySource_typeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Source_type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByTime_delay`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByTime_delay`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Time_delay` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByTime_delayWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByTime_delayWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Time_delay` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByUrl`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Url` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_sourceOrderByUrlWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_sourceOrderByUrlWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
ORDER BY 	`Url` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderBySource_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByIdOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByIdOrderBySource_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoBySource_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoBySource_idOrderById`( 
IN pSource_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoBySource_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoBySource_idOrderByIdWithLimit`( 
IN pSource_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderBySource_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_source_infoOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_source_infoOrderBySource_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByAliasOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByAliasOrderById`( 
IN pAlias VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByAliasOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByAliasOrderByIdWithLimit`( 
IN pAlias VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByCategory_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByCategory_idOrderById`( 
IN pCategory_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByCreated_dateOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByCreated_dateOrderById`( 
IN pCreated_date DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCreated_date = pCreated_date;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`created_date` = '",@pCreated_date,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByCreated_dateOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByCreated_dateOrderByIdWithLimit`( 
IN pCreated_date DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCreated_date = pCreated_date;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`created_date` = '",@pCreated_date,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByFull_textOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByFull_textOrderById`( 
IN pFull_text TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_text = pFull_text;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`full_text` = '",@pFull_text,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByFull_textOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByFull_textOrderByIdWithLimit`( 
IN pFull_text TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFull_text = pFull_text;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`full_text` = '",@pFull_text,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByAlias`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByAliasWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByCategory_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByCategory_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByCreated_date`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Created_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByCreated_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByCreated_dateWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Created_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByFull_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByFull_text`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Full_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByFull_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByFull_textWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Full_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByIntro_text`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByIntro_textWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByUrl`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Url` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIdOrderByUrlWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIdOrderByUrlWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId
ORDER BY 	`Url` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIntro_textOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIntro_textOrderById`( 
IN pIntro_text TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByIntro_textOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByIntro_textOrderByIdWithLimit`( 
IN pIntro_text TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByUrlOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByUrlOrderById`( 
IN pUrl MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUrl = pUrl;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`url` = '",@pUrl,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticByUrlOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticByUrlOrderByIdWithLimit`( 
IN pUrl MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUrl = pUrl;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`url` = '",@pUrl,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByAlias`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByAliasWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByCategory_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByCategory_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByCreated_date`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Created_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByCreated_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByCreated_dateWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Created_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByFull_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByFull_text`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Full_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByFull_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByFull_textWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Full_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByIntro_text`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByIntro_textWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByUrl`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Url` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_staticOrderByUrlWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_staticOrderByUrlWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
ORDER BY 	`Url` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_tagOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_tagOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_typeOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_typeOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByType_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByIdOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByIdOrderByType_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByType_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByType_idOrderById`( 
IN pType_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoByType_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoByType_idOrderByIdWithLimit`( 
IN pType_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType_id = pType_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`type_id` = '",@pType_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByType_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Type_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_type_infoOrderByType_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_type_infoOrderByType_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
ORDER BY 	`Type_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByAliasOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByAliasOrderById`( 
IN pAlias VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByAliasOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByAliasOrderByIdWithLimit`( 
IN pAlias VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByCategory_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByCategory_idOrderById`( 
IN pCategory_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByAlias`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByAliasWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByCategory_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByCategory_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByIntro_text`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByIntro_textWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByShow_in_object`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByShow_in_objectWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderBySource_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderBySource_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByStyle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByStyle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Style` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByStyleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByStyleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Style` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByUrl`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Url` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByUrlWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByUrlWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Url` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByUrl_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByUrl_type`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Url_type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIdOrderByUrl_typeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIdOrderByUrl_typeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId
ORDER BY 	`Url_type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIntro_textOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIntro_textOrderById`( 
IN pIntro_text MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByIntro_textOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByIntro_textOrderByIdWithLimit`( 
IN pIntro_text MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByShow_in_objectOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByShow_in_objectOrderById`( 
IN pShow_in_object VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByShow_in_objectOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByShow_in_objectOrderByIdWithLimit`( 
IN pShow_in_object VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlBySource_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlBySource_idOrderById`( 
IN pSource_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlBySource_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlBySource_idOrderByIdWithLimit`( 
IN pSource_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByStyleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByStyleOrderById`( 
IN pStyle MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pStyle = pStyle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`style` = '",@pStyle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByStyleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByStyleOrderByIdWithLimit`( 
IN pStyle MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pStyle = pStyle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`style` = '",@pStyle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByUrlOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByUrlOrderById`( 
IN pUrl MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUrl = pUrl;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`url` = '",@pUrl,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByUrlOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByUrlOrderByIdWithLimit`( 
IN pUrl MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUrl = pUrl;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`url` = '",@pUrl,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByUrl_typeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByUrl_typeOrderById`( 
IN pUrl_type VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUrl_type = pUrl_type;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`url_type` = '",@pUrl_type,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlByUrl_typeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlByUrl_typeOrderByIdWithLimit`( 
IN pUrl_type VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUrl_type = pUrl_type;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`url_type` = '",@pUrl_type,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByAlias`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByAliasWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByCategory_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByCategory_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByIntro_text`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByIntro_textWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByShow_in_object`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByShow_in_objectWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderBySource_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderBySource_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByStyle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByStyle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Style` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByStyleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByStyleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Style` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByUrl`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Url` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByUrlWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByUrlWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Url` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByUrl_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByUrl_type`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Url_type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_urlOrderByUrl_typeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_urlOrderByUrl_typeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
ORDER BY 	`Url_type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByUser_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByIdOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByIdOrderByUser_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByUser_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByUser_idOrderById`( 
IN pUser_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteByUser_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteByUser_idOrderByIdWithLimit`( 
IN pUser_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByUser_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_user_favouriteOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_user_favouriteOrderByUser_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByAliasOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByAliasOrderById`( 
IN pAlias VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByAliasOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByAliasOrderByIdWithLimit`( 
IN pAlias VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAlias = pAlias;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`alias` = '",@pAlias,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByCategory_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByCategory_idOrderById`( 
IN pCategory_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`category_id` = '",@pCategory_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByEncodedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByEncodedOrderById`( 
IN pEncoded VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pEncoded = pEncoded;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`encoded` = '",@pEncoded,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByEncodedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByEncodedOrderByIdWithLimit`( 
IN pEncoded VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pEncoded = pEncoded;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`encoded` = '",@pEncoded,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByExtensionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByExtensionOrderById`( 
IN pExtension VARCHAR (5), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pExtension = pExtension;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`extension` = '",@pExtension,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByExtensionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByExtensionOrderByIdWithLimit`( 
IN pExtension VARCHAR (5), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pExtension = pExtension;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`extension` = '",@pExtension,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByHeightOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByHeightOrderById`( 
IN pHeight INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pHeight = pHeight;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`height` = '",@pHeight,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByHeightOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByHeightOrderByIdWithLimit`( 
IN pHeight INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pHeight = pHeight;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`height` = '",@pHeight,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByAlias`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByAliasWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByCategory_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByCategory_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByEncoded`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByEncoded`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Encoded` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByEncodedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByEncodedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Encoded` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByExtension`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Extension` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByExtensionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByExtensionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Extension` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByHeight`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByHeight`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Height` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByHeightWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByHeightWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Height` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByIntro_text`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByIntro_textWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByMeta_data`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Meta_data` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByMeta_dataWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByMeta_dataWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Meta_data` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByObject_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByObject_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByShow_in_object`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByShow_in_objectWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderBySize`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderBySizeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderBySource_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderBySource_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByTaken_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByTaken_date`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Taken_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByTaken_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByTaken_dateWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Taken_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByTaken_location`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByTaken_location`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Taken_location` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByTaken_locationWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByTaken_locationWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Taken_location` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByWidth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByWidth`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Width` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIdOrderByWidthWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIdOrderByWidthWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId
ORDER BY 	`Width` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIntro_textOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIntro_textOrderById`( 
IN pIntro_text MEDIUMTEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByIntro_textOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByIntro_textOrderByIdWithLimit`( 
IN pIntro_text MEDIUMTEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIntro_text = pIntro_text;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`intro_text` = '",@pIntro_text,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByMeta_dataOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByMeta_dataOrderById`( 
IN pMeta_data TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_data = pMeta_data;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`meta_data` = '",@pMeta_data,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByMeta_dataOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByMeta_dataOrderByIdWithLimit`( 
IN pMeta_data TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMeta_data = pMeta_data;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`meta_data` = '",@pMeta_data,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByObject_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByObject_idOrderById`( 
IN pObject_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByObject_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByObject_idOrderByIdWithLimit`( 
IN pObject_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pObject_id = pObject_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`object_id` = '",@pObject_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByShow_in_objectOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByShow_in_objectOrderById`( 
IN pShow_in_object VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByShow_in_objectOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByShow_in_objectOrderByIdWithLimit`( 
IN pShow_in_object VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_object = pShow_in_object;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`show_in_object` = '",@pShow_in_object,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoBySizeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoBySizeOrderById`( 
IN pSize INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoBySizeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoBySizeOrderByIdWithLimit`( 
IN pSize INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSize = pSize;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`size` = '",@pSize,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoBySource_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoBySource_idOrderById`( 
IN pSource_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoBySource_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoBySource_idOrderByIdWithLimit`( 
IN pSource_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSource_id = pSource_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`source_id` = '",@pSource_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByTaken_dateOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByTaken_dateOrderById`( 
IN pTaken_date DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTaken_date = pTaken_date;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`taken_date` = '",@pTaken_date,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByTaken_dateOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByTaken_dateOrderByIdWithLimit`( 
IN pTaken_date DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTaken_date = pTaken_date;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`taken_date` = '",@pTaken_date,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByTaken_locationOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByTaken_locationOrderById`( 
IN pTaken_location VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTaken_location = pTaken_location;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`taken_location` = '",@pTaken_location,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByTaken_locationOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByTaken_locationOrderByIdWithLimit`( 
IN pTaken_location VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTaken_location = pTaken_location;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`taken_location` = '",@pTaken_location,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByWidthOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByWidthOrderById`( 
IN pWidth INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWidth = pWidth;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`width` = '",@pWidth,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoByWidthOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoByWidthOrderByIdWithLimit`( 
IN pWidth INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWidth = pWidth;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`width` = '",@pWidth,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByAlias`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Alias` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByAliasWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByAliasWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Alias` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByCategory_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Category_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByCategory_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByCategory_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Category_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByEncoded`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByEncoded`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Encoded` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByEncodedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByEncodedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Encoded` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByExtension`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Extension` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByExtensionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByExtensionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Extension` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByHeight`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByHeight`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Height` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByHeightWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByHeightWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Height` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByIntro_text`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Intro_text` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByIntro_textWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByIntro_textWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Intro_text` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByMeta_data`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Meta_data` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByMeta_dataWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByMeta_dataWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Meta_data` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByObject_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Object_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByObject_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByObject_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Object_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByShow_in_object`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Show_in_object` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByShow_in_objectWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByShow_in_objectWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Show_in_object` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderBySize`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Size` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderBySizeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderBySizeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Size` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderBySource_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Source_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderBySource_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderBySource_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Source_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByTaken_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByTaken_date`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Taken_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByTaken_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByTaken_dateWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Taken_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByTaken_location`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByTaken_location`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Taken_location` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByTaken_locationWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByTaken_locationWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Taken_location` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByWidth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByWidth`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Width` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllObject_videoOrderByWidthWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllObject_videoOrderByWidthWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
ORDER BY 	`Width` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByPrerequisite_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByPrerequisite_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Prerequisite_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByPrerequisite_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByPrerequisite_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Prerequisite_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByShow_in_menu`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_menu` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByShow_in_menuWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByShow_in_menuWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Show_in_menu` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByType`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByType`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByIdOrderByTypeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByIdOrderByTypeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId
ORDER BY 	`Type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByPrerequisite_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByPrerequisite_idOrderById`( 
IN pPrerequisite_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPrerequisite_id = pPrerequisite_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`prerequisite_id` = '",@pPrerequisite_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByPrerequisite_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByPrerequisite_idOrderByIdWithLimit`( 
IN pPrerequisite_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPrerequisite_id = pPrerequisite_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`prerequisite_id` = '",@pPrerequisite_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByShow_in_menuOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByShow_in_menuOrderById`( 
IN pShow_in_menu VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_menu = pShow_in_menu;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`show_in_menu` = '",@pShow_in_menu,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByShow_in_menuOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByShow_in_menuOrderByIdWithLimit`( 
IN pShow_in_menu VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pShow_in_menu = pShow_in_menu;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`show_in_menu` = '",@pShow_in_menu,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByTypeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByTypeOrderById`( 
IN pType VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType = pType;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`type` = '",@pType,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageByTypeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageByTypeOrderByIdWithLimit`( 
IN pType VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pType = pType;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`type` = '",@pType,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByPrerequisite_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByPrerequisite_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Prerequisite_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByPrerequisite_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByPrerequisite_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Prerequisite_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByShow_in_menu`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Show_in_menu` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByShow_in_menuWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByShow_in_menuWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Show_in_menu` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByType`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByType`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Type` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackageOrderByTypeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackageOrderByTypeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
ORDER BY 	`Type` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByAction_descriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByAction_descriptionOrderById`( 
IN pAction_description TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_description = pAction_description;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`action_description` = '",@pAction_description,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByAction_descriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByAction_descriptionOrderByIdWithLimit`( 
IN pAction_description TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_description = pAction_description;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`action_description` = '",@pAction_description,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByAction_nameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByAction_nameOrderById`( 
IN pAction_name VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_name = pAction_name;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`action_name` = '",@pAction_name,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByAction_nameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByAction_nameOrderByIdWithLimit`( 
IN pAction_name VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_name = pAction_name;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`action_name` = '",@pAction_name,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByAction_titleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByAction_titleOrderById`( 
IN pAction_title VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_title = pAction_title;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`action_title` = '",@pAction_title,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByAction_titleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByAction_titleOrderByIdWithLimit`( 
IN pAction_title VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_title = pAction_title;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`action_title` = '",@pAction_title,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByClass_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByClass_idOrderById`( 
IN pClass_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pClass_id = pClass_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`class_id` = '",@pClass_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByClass_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByClass_idOrderByIdWithLimit`( 
IN pClass_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pClass_id = pClass_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`class_id` = '",@pClass_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByFile_nameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByFile_nameOrderById`( 
IN pFile_name VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFile_name = pFile_name;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`file_name` = '",@pFile_name,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByFile_nameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByFile_nameOrderByIdWithLimit`( 
IN pFile_name VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFile_name = pFile_name;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`file_name` = '",@pFile_name,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByAction_description`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByAction_description`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Action_description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByAction_descriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByAction_descriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Action_description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByAction_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByAction_name`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Action_name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByAction_nameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByAction_nameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Action_name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByAction_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByAction_title`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Action_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByAction_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByAction_titleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Action_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByClass_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Class_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByClass_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByClass_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Class_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByFile_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByFile_name`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`File_name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByFile_nameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByFile_nameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`File_name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByAction_description`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByAction_description`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Action_description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByAction_descriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByAction_descriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Action_description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByAction_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByAction_name`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Action_name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByAction_nameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByAction_nameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Action_name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByAction_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByAction_title`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Action_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByAction_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByAction_titleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Action_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByClass_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Class_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByClass_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByClass_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Class_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByFile_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByFile_name`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`File_name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByFile_nameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByFile_nameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`File_name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_actionOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_actionOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByFile_nameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByFile_nameOrderById`( 
IN pFile_name VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFile_name = pFile_name;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`file_name` = '",@pFile_name,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByFile_nameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByFile_nameOrderByIdWithLimit`( 
IN pFile_name VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFile_name = pFile_name;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`file_name` = '",@pFile_name,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByFile_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByFile_name`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`File_name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByFile_nameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByFile_nameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`File_name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByName`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByNameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByNameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByNameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByNameOrderById`( 
IN pName VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pName = pName;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`name` = '",@pName,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByNameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByNameOrderByIdWithLimit`( 
IN pName VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pName = pName;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`name` = '",@pName,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByFile_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByFile_name`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`File_name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByFile_nameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByFile_nameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`File_name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByName`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByNameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByNameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_classOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_classOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByDefault_action_nameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByDefault_action_nameOrderById`( 
IN pDefault_action_name VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault_action_name = pDefault_action_name;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`default_action_name` = '",@pDefault_action_name,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByDefault_action_nameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByDefault_action_nameOrderByIdWithLimit`( 
IN pDefault_action_name VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault_action_name = pDefault_action_name;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`default_action_name` = '",@pDefault_action_name,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByDefault_action_titleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByDefault_action_titleOrderById`( 
IN pDefault_action_title VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault_action_title = pDefault_action_title;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`default_action_title` = '",@pDefault_action_title,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByDefault_action_titleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByDefault_action_titleOrderByIdWithLimit`( 
IN pDefault_action_title VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault_action_title = pDefault_action_title;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`default_action_title` = '",@pDefault_action_title,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByDefault_action_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByDefault_action_name`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Default_action_name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByDefault_action_nameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByDefault_action_nameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Default_action_name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByDefault_action_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByDefault_action_title`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Default_action_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByDefault_action_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByDefault_action_titleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Default_action_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByVersion`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByVersion`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Version` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByIdOrderByVersionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByIdOrderByVersionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId
ORDER BY 	`Version` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByVersionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByVersionOrderById`( 
IN pVersion VARCHAR (15), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pVersion = pVersion;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`version` = '",@pVersion,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoByVersionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoByVersionOrderByIdWithLimit`( 
IN pVersion VARCHAR (15), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pVersion = pVersion;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`version` = '",@pVersion,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByDefault_action_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByDefault_action_name`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Default_action_name` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByDefault_action_nameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByDefault_action_nameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Default_action_name` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByDefault_action_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByDefault_action_title`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Default_action_title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByDefault_action_titleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByDefault_action_titleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Default_action_title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByVersion`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByVersion`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Version` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPackage_infoOrderByVersionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPackage_infoOrderByVersionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
ORDER BY 	`Version` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPhotoAndCatAndUserByAuthorAndSubCatOrderByColWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPhotoAndCatAndUserByAuthorAndSubCatOrderByColWithLimit`( 
IN pColumn VARCHAR (255), 
IN pSubCat_id INT , 
IN pAuthor_id INT ,
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSubCat_id = pSubCat_id;
SET @pAuthor_id = pAuthor_id;
SET @pColumn = pColumn;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS  u.*, ui.*, op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`, o.`category_id` AS `sub_category` 
FROM 		`object_photo` AS op  
INNER JOIN 	`object` AS o ON op.`object_id` = o.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE 		op.`author_id` = '",@pAuthor_id,"' 
AND 		o.`category_id` IN (",@pSubCat_id,")  
AND 		op.`published` = 'Yes' 
AND 		op.`approved`='Yes' 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPhotoAndCatAndUserByCatAndTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPhotoAndCatAndUserByCatAndTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pCat_id VARCHAR (255), 
IN pColumn VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pCat_id = pCat_id;
SET @pColumn = pColumn;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS c.*, u.*, ui.*, op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`
FROM 		`object_photo` AS op  
INNER JOIN 	`category` AS c ON op.`category_id` = c.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE 		(op.`intro_text` LIKE '%",@pTitle,"%' 
OR 		op.`alias` LIKE '%",@pTitle,"%') 
AND 		op.`category_id` IN (",@pCat_id,") 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPhotoAndCatAndUserByCatIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPhotoAndCatAndUserByCatIdOrderByIdWithLimit`( 
IN pCat_id INT , 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCat_id = pCat_id;
SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`, c.*, u.*, ui.* 
FROM 		`object_photo` AS op  
INNER JOIN 	`category` AS c ON op.`category_id` = c.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE 		op.`author_id` = '",@pAuthor_id,"' 
AND 		op.`category_id` = '",@pCat_id,"' 
ORDER BY 	op.`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPhotoAndCatAndUserBySubCatIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPhotoAndCatAndUserBySubCatIdOrderByIdWithLimit`( 
IN pSubCat_id INT , 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSubCat_id = pSubCat_id;
SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`, o.`category_id` AS `sub_category`, u.*, ui.* 
FROM 		`object_photo` AS op  
INNER JOIN 	`object` AS o ON o.`object_id` = op.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE 		op.`author_id` = '",@pAuthor_id,"' 
AND 		o.`category_id` = '",@pSubCat_id,"' 
ORDER BY 	op.`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPhotoAndCatAndUserSubCatOrderByColWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPhotoAndCatAndUserSubCatOrderByColWithLimit`( 
IN pColumn VARCHAR (255), 
IN pSubCat_id VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pColumn = pColumn;
SET @pSubCat_id = pSubCat_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS  u.*, ui.*, op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`, o.`category_id` AS `sub_category` 
FROM 		`object_photo` AS op  
INNER JOIN 	`object` AS o ON op.`object_id` = o.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE 		o.`category_id` IN (",@pSubCat_id,") 
AND 		op.`published` = 'Yes' 
AND 		op.`approved`='Yes' 
ORDER BY 	",@pColumn," ",@pOrder,"  
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;

EXECUTE stmt ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPhotoAndCatByCatIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPhotoAndCatByCatIdOrderByIdWithLimit`( 
IN pCat_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCat_id = pCat_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS c.*, u.*, ui.*, op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`
FROM 		`object_photo` AS op  
INNER JOIN 	`category` AS c ON op.`category_id` = c.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE 		op.`category_id` = '",@pCat_id,"' 
ORDER BY 	op.`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPhotoAndCategoryAndUserBySubCatIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPhotoAndCategoryAndUserBySubCatIdOrderByIdWithLimit`( 
IN pSubCat_id INT , 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSubCat_id = pSubCat_id;
SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`, o.`category_id` AS `sub_category`, u.*, ui.* 
FROM 		`object_photo` AS op  
INNER JOIN 	`object` AS o ON o.`object_id` = op.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE 		op.`author_id` = '",@pAuthor_id,"' 
AND 		o.`category_id` = '",@pSubCat_id,"' 
ORDER BY 	op.`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPhotoAndCategoryAndUserOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPhotoAndCategoryAndUserOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255) , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pColumn = pColumn;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS  u.*, ui.*, op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`, o.`category_id` AS `sub_category`
FROM 		`object_photo` AS op  
INNER JOIN 	`object` AS o ON o.`id` = op.`object_id` 
INNER JOIN 	`object_info` AS oi ON oi.`object_id` = op.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE op.`published` = 'Yes' AND op.`approved`='Yes' 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPhotoCleanByUserOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPhotoCleanByUserOrderByColumnWithLimit`( 
IN pAuthor INT, 
IN pColumn VARCHAR (255) , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor = pAuthor;
SET @pColumn = pColumn;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS  u.*, ui.*, op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`, o.`category_id` AS `sub_category`
FROM 		`object_photo` AS op  
INNER JOIN 	`object` AS o ON o.`id` = op.`object_id` 
INNER JOIN 	`object_info` AS oi ON oi.`object_id` = op.`id` 
INNER JOIN 	`user` AS u ON op.`author_id` = u.`id` 
INNER JOIN 	`user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE op.`published` = 'Yes' AND op.`approved`='Yes' AND u.`id`=",pAuthor," 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByVotes_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByVotes_count`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Votes_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByIdOrderByVotes_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByIdOrderByVotes_countWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId
ORDER BY 	`Votes_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByVotes_countOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByVotes_countOrderById`( 
IN pVotes_count INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pVotes_count = pVotes_count;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`votes_count` = '",@pVotes_count,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollByVotes_countOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollByVotes_countOrderByIdWithLimit`( 
IN pVotes_count INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pVotes_count = pVotes_count;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`votes_count` = '",@pVotes_count,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByVotes_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByVotes_count`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Votes_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPollOrderByVotes_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPollOrderByVotes_countWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
ORDER BY 	`Votes_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByPoll_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByPoll_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Poll_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByPoll_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByPoll_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Poll_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByVotes_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByVotes_count`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Votes_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByIdOrderByVotes_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByIdOrderByVotes_countWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId
ORDER BY 	`Votes_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByPoll_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByPoll_idOrderById`( 
IN pPoll_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPoll_id = pPoll_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`poll_id` = '",@pPoll_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByPoll_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByPoll_idOrderByIdWithLimit`( 
IN pPoll_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPoll_id = pPoll_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`poll_id` = '",@pPoll_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByVotes_countOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByVotes_countOrderById`( 
IN pVotes_count INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pVotes_count = pVotes_count;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`votes_count` = '",@pVotes_count,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerByVotes_countOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerByVotes_countOrderByIdWithLimit`( 
IN pVotes_count INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pVotes_count = pVotes_count;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`votes_count` = '",@pVotes_count,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByPoll_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByPoll_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Poll_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByPoll_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByPoll_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Poll_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByVotes_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByVotes_count`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Votes_count` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_answerOrderByVotes_countWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_answerOrderByVotes_countWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
ORDER BY 	`Votes_count` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByAnswer_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByAnswer_idOrderById`( 
IN pAnswer_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAnswer_id = pAnswer_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`answer_id` = '",@pAnswer_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByAnswer_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByAnswer_idOrderByIdWithLimit`( 
IN pAnswer_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAnswer_id = pAnswer_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`answer_id` = '",@pAnswer_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByAnswer_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByAnswer_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Answer_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByAnswer_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByAnswer_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Answer_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByIp_address`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByIp_address`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Ip_address` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByIp_addressWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByIp_addressWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Ip_address` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByPoll_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByPoll_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Poll_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByPoll_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByPoll_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`Poll_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByUser_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIdOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIdOrderByUser_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIp_addressOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIp_addressOrderById`( 
IN pIp_address BIGINT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIp_address = pIp_address;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`ip_address` = '",@pIp_address,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByIp_addressOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByIp_addressOrderByIdWithLimit`( 
IN pIp_address BIGINT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pIp_address = pIp_address;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`ip_address` = '",@pIp_address,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByPoll_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByPoll_idOrderById`( 
IN pPoll_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPoll_id = pPoll_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`poll_id` = '",@pPoll_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByPoll_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByPoll_idOrderByIdWithLimit`( 
IN pPoll_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPoll_id = pPoll_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`poll_id` = '",@pPoll_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByUser_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByUser_idOrderById`( 
IN pUser_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteByUser_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteByUser_idOrderByIdWithLimit`( 
IN pUser_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByAnswer_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByAnswer_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Answer_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByAnswer_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByAnswer_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Answer_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByIp_address`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByIp_address`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Ip_address` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByIp_addressWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByIp_addressWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Ip_address` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByPoll_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByPoll_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Poll_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByPoll_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByPoll_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`Poll_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByUser_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllPoll_voteOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllPoll_voteOrderByUser_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logByHitsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logByHitsOrderById`( 
IN pHits INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pHits = pHits;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
WHERE 		`hits` = '",@pHits,"'
ORDER BY 	`` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logByHitsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logByHitsOrderByIdWithLimit`( 
IN pHits INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pHits = pHits;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
WHERE 		`hits` = '",@pHits,"'
ORDER BY 	`` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logBySearch_termOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logBySearch_termOrderById`( 
IN pSearch_term VARCHAR (128), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSearch_term = pSearch_term;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
WHERE 		`search_term` = '",@pSearch_term,"'
ORDER BY 	`` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logBySearch_termOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logBySearch_termOrderByIdWithLimit`( 
IN pSearch_term VARCHAR (128), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSearch_term = pSearch_term;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
WHERE 		`search_term` = '",@pSearch_term,"'
ORDER BY 	`` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logOrderByHits`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logOrderByHits`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
ORDER BY 	`Hits` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logOrderByHitsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logOrderByHitsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
ORDER BY 	`Hits` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
ORDER BY 	 ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
ORDER BY 	 ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logOrderBySearch_term`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logOrderBySearch_term`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
ORDER BY 	`Search_term` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllSearch_logOrderBySearch_termWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllSearch_logOrderBySearch_termWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `search_term`, `hits` 
FROM 		`search_log` 
ORDER BY 	`Search_term` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByLocale_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByLocale_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByLocale_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByLocale_idOrderById`( 
IN pLocale_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByLocale_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByLocale_idOrderByIdWithLimit`( 
IN pLocale_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByLocale_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByLocale_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTagOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTagOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByAction_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByAction_idOrderById`( 
IN pAction_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_id = pAction_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`action_id` = '",@pAction_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByAction_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByAction_idOrderByIdWithLimit`( 
IN pAction_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_id = pAction_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`action_id` = '",@pAction_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByClass_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByClass_idOrderById`( 
IN pClass_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pClass_id = pClass_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`class_id` = '",@pClass_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByClass_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByClass_idOrderByIdWithLimit`( 
IN pClass_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pClass_id = pClass_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`class_id` = '",@pClass_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByAction_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByAction_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Action_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByAction_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByAction_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Action_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByClass_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Class_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByClass_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByClass_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Class_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByLayout_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Layout_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByLayout_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByLayout_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Layout_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByPackage_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByPackage_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderBySkin_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Skin_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderBySkin_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderBySkin_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Skin_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByTemplate_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Template_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByIdOrderByTemplate_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByIdOrderByTemplate_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId
ORDER BY 	`Template_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByLayout_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByLayout_idOrderById`( 
IN pLayout_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLayout_id = pLayout_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`layout_id` = '",@pLayout_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByLayout_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByLayout_idOrderByIdWithLimit`( 
IN pLayout_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLayout_id = pLayout_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`layout_id` = '",@pLayout_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByPackage_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByPackage_idOrderById`( 
IN pPackage_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByPackage_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByPackage_idOrderByIdWithLimit`( 
IN pPackage_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPackage_id = pPackage_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`package_id` = '",@pPackage_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeBySkin_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeBySkin_idOrderById`( 
IN pSkin_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSkin_id = pSkin_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`skin_id` = '",@pSkin_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeBySkin_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeBySkin_idOrderByIdWithLimit`( 
IN pSkin_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSkin_id = pSkin_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`skin_id` = '",@pSkin_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByTemplate_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByTemplate_idOrderById`( 
IN pTemplate_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTemplate_id = pTemplate_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`template_id` = '",@pTemplate_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeByTemplate_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeByTemplate_idOrderByIdWithLimit`( 
IN pTemplate_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTemplate_id = pTemplate_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`template_id` = '",@pTemplate_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByAction_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByAction_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Action_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByAction_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByAction_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Action_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByClass_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Class_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByClass_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByClass_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Class_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByLayout_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Layout_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByLayout_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByLayout_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Layout_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByPackage_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Package_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByPackage_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByPackage_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Package_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderBySkin_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Skin_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderBySkin_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderBySkin_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Skin_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByTemplate_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Template_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllThemeOrderByTemplate_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllThemeOrderByTemplate_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
ORDER BY 	`Template_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByDefaultOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByDefaultOrderById`( 
IN pDefault VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault = pDefault;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`default` = '",@pDefault,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByDefaultOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByDefaultOrderByIdWithLimit`( 
IN pDefault VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault = pDefault;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`default` = '",@pDefault,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByDirectionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByDirectionOrderById`( 
IN pDirection VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDirection = pDirection;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`direction` = '",@pDirection,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByDirectionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByDirectionOrderByIdWithLimit`( 
IN pDirection VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDirection = pDirection;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`direction` = '",@pDirection,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByDefault`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Default` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByDefaultWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByDefaultWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Default` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByDirection`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByDirection`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Direction` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByDirectionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByDirectionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Direction` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByDefault`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Default` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByDefaultWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByDefaultWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Default` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByDirection`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByDirection`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Direction` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByDirectionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByDirectionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Direction` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layoutOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layoutOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByLayout_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Layout_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByLayout_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByLayout_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Layout_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByLayout_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByLayout_idOrderById`( 
IN pLayout_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLayout_id = pLayout_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`layout_id` = '",@pLayout_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByLayout_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByLayout_idOrderByIdWithLimit`( 
IN pLayout_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLayout_id = pLayout_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`layout_id` = '",@pLayout_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByLayout_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Layout_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByLayout_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByLayout_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Layout_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_layout_infoOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_layout_infoOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByDefaultOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByDefaultOrderById`( 
IN pDefault VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault = pDefault;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`default` = '",@pDefault,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByDefaultOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByDefaultOrderByIdWithLimit`( 
IN pDefault VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault = pDefault;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`default` = '",@pDefault,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByDefault`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Default` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByDefaultWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByDefaultWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Default` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByLayout_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Layout_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByLayout_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByLayout_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Layout_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByTemplate_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Template_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByTemplate_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByTemplate_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Template_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByLayout_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByLayout_idOrderById`( 
IN pLayout_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLayout_id = pLayout_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`layout_id` = '",@pLayout_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByLayout_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByLayout_idOrderByIdWithLimit`( 
IN pLayout_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLayout_id = pLayout_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`layout_id` = '",@pLayout_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByTemplate_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByTemplate_idOrderById`( 
IN pTemplate_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTemplate_id = pTemplate_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`template_id` = '",@pTemplate_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByTemplate_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByTemplate_idOrderByIdWithLimit`( 
IN pTemplate_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTemplate_id = pTemplate_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`template_id` = '",@pTemplate_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByDefault`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Default` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByDefaultWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByDefaultWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Default` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByLayout_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Layout_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByLayout_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByLayout_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Layout_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByTemplate_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Template_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByTemplate_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByTemplate_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Template_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skinOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skinOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderBySkin_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Skin_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByIdOrderBySkin_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByIdOrderBySkin_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId
ORDER BY 	`Skin_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoBySkin_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoBySkin_idOrderById`( 
IN pSkin_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSkin_id = pSkin_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`skin_id` = '",@pSkin_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoBySkin_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoBySkin_idOrderByIdWithLimit`( 
IN pSkin_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pSkin_id = pSkin_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`skin_id` = '",@pSkin_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderBySkin_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Skin_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_skin_infoOrderBySkin_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_skin_infoOrderBySkin_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
ORDER BY 	`Skin_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByAuthor_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByAuthor_idOrderById`( 
IN pAuthor_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByAuthor_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByAuthor_idOrderByIdWithLimit`( 
IN pAuthor_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAuthor_id = pAuthor_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`author_id` = '",@pAuthor_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByDefaultOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByDefaultOrderById`( 
IN pDefault VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault = pDefault;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`default` = '",@pDefault,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByDefaultOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByDefaultOrderByIdWithLimit`( 
IN pDefault VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDefault = pDefault;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`default` = '",@pDefault,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByAuthor_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByAuthor_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByDefault`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Default` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByDefaultWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByDefaultWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Default` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByOrder`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByOrderWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByPublished`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByPublishedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByPublishedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByPublishedOrderById`( 
IN pPublished VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByPublishedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByPublishedOrderByIdWithLimit`( 
IN pPublished VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublished = pPublished;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`published` = '",@pPublished,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByAuthor_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Author_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByAuthor_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByAuthor_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Author_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByDefault`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Default` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByDefaultWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByDefaultWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Default` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByOrder`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Order` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByOrderWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByOrderWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Order` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByPublished`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Published` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByPublishedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByPublishedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Published` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_templateOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_templateOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByPublish_from`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByPublish_fromWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByPublish_to`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByPublish_toWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByTemplate_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Template_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByIdOrderByTemplate_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByIdOrderByTemplate_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId
ORDER BY 	`Template_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByPublish_fromOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByPublish_fromOrderById`( 
IN pPublish_from DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByPublish_fromOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByPublish_fromOrderByIdWithLimit`( 
IN pPublish_from DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_from = pPublish_from;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`publish_from` = '",@pPublish_from,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByPublish_toOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByPublish_toOrderById`( 
IN pPublish_to DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByPublish_toOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByPublish_toOrderByIdWithLimit`( 
IN pPublish_to DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPublish_to = pPublish_to;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`publish_to` = '",@pPublish_to,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByTemplate_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByTemplate_idOrderById`( 
IN pTemplate_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTemplate_id = pTemplate_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`template_id` = '",@pTemplate_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoByTemplate_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoByTemplate_idOrderByIdWithLimit`( 
IN pTemplate_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTemplate_id = pTemplate_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`template_id` = '",@pTemplate_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByPublish_from`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Publish_from` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByPublish_fromWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByPublish_fromWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Publish_from` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByPublish_to`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Publish_to` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByPublish_toWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByPublish_toWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Publish_to` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByTemplate_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Template_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTheme_template_infoOrderByTemplate_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTheme_template_infoOrderByTemplate_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
ORDER BY 	`Template_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByLocale_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByLocale_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByTranslation`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByTranslation`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Translation` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByIdOrderByTranslationWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByIdOrderByTranslationWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId
ORDER BY 	`Translation` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByLocale_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByLocale_idOrderById`( 
IN pLocale_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByLocale_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByLocale_idOrderByIdWithLimit`( 
IN pLocale_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocale_id = pLocale_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`locale_id` = '",@pLocale_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByTranslationOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByTranslationOrderById`( 
IN pTranslation TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTranslation = pTranslation;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`translation` = '",@pTranslation,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationByTranslationOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationByTranslationOrderByIdWithLimit`( 
IN pTranslation TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTranslation = pTranslation;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`translation` = '",@pTranslation,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByLocale_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Locale_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByLocale_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByLocale_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Locale_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByTranslation`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByTranslation`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Translation` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllTranslationOrderByTranslationWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllTranslationOrderByTranslationWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
ORDER BY 	`Translation` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserAndUserInfoOrderByColumnWithLimit`$$
CREATE DEFINER=`sarayanews`@`localhost` PROCEDURE `SP_GetAllUserAndUserInfoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT SQL_CALC_FOUND_ROWS u.`id`, u.`username`, u.`password`, u.`fullname`, u.`email`, u.`user_level_id`, u.`date_added`, ui.`user_id`, ui.`date_of_birth`, ui.`registration_date`, ui.`last_login_date`, ui.`company`, ui.`department`, ui.`position`, ui.`home_phone`, ui.`work_phone`, ui.`work_fax`, ui.`mobile`, ui.`blocked`, ui.`approved`, ui.`confirmed`, ui.`locked_by`, ui.`locked_time`, ui.`modified_by`, ui.`modified_time`, ui.`date_added` AS date_added_info, ui.`comments`, ui.`options` 
FROM `user` AS u 
INNER JOIN `user_info` AS ui ON ui.`user_id` = u.`id` 
ORDER BY ",@pColumn," ",@pOrder," 
LIMIT ",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByEmailOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByEmailOrderById`( 
IN pEmail VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pEmail = pEmail;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`email` = '",@pEmail,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByEmailOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByEmailOrderByIdWithLimit`( 
IN pEmail VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pEmail = pEmail;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`email` = '",@pEmail,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByFullnameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByFullnameOrderById`( 
IN pFullname VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFullname = pFullname;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`fullname` = '",@pFullname,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByFullnameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByFullnameOrderByIdWithLimit`( 
IN pFullname VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pFullname = pFullname;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`fullname` = '",@pFullname,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByEmail`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Email` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByEmailWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByEmailWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Email` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByFullname`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByFullname`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Fullname` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByFullnameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByFullnameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Fullname` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByPassword`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByPassword`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Password` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByPasswordWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByPasswordWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Password` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByUsername`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByUsername`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Username` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByUsernameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByUsernameWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`Username` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByUser_level_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByUser_level_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`User_level_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByIdOrderByUser_level_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByIdOrderByUser_level_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId
ORDER BY 	`User_level_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByPasswordOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByPasswordOrderById`( 
IN pPassword VARCHAR (32), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPassword = pPassword;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`password` = '",@pPassword,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByPasswordOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByPasswordOrderByIdWithLimit`( 
IN pPassword VARCHAR (32), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPassword = pPassword;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`password` = '",@pPassword,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByUsernameOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByUsernameOrderById`( 
IN pUsername VARCHAR (32), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUsername = pUsername;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`username` = '",@pUsername,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByUsernameOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByUsernameOrderByIdWithLimit`( 
IN pUsername VARCHAR (32), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUsername = pUsername;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`username` = '",@pUsername,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByUser_level_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserByUser_level_idOrderById`( 
IN pUser_level_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_level_id = pUser_level_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`user_level_id` = '",@pUser_level_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserByUser_level_idOrderByIdWithLimit`$$
CREATE DEFINER=`sarayanews`@`localhost` PROCEDURE `SP_GetAllUserByUser_level_idOrderByIdWithLimit`( 
IN pUser_level_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_level_id = pUser_level_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT SQL_CALC_FOUND_ROWS u.`id`, u.`username`, u.`password`, u.`fullname`, u.`email`, u.`user_level_id`, u.`date_added`, ui.`user_id`, ui.`date_of_birth`, ui.`registration_date`, ui.`last_login_date`, ui.`company`, ui.`department`, ui.`position`, ui.`home_phone`, ui.`work_phone`, ui.`work_fax`, ui.`mobile`, ui.`blocked`, ui.`approved`, ui.`confirmed`, ui.`locked_by`, ui.`locked_time`, ui.`modified_by`, ui.`modified_time`, ui.`date_added` AS date_added_info, ui.`comments`, ui.`options` 
FROM `user` AS u 
INNER JOIN `user_info` AS ui ON ui.`user_id` = u.`id` 
WHERE u.`user_level_id` = '",@pUser_level_id,"'
ORDER BY u.`id` ",@pOrder," 
LIMIT ",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByEmail`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Email` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByEmailWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByEmailWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Email` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByFullname`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByFullname`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Fullname` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByFullnameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByFullnameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Fullname` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByPassword`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByPassword`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Password` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByPasswordWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByPasswordWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Password` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByUsername`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByUsername`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Username` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByUsernameWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByUsernameWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`Username` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByUser_level_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByUser_level_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`User_level_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUserOrderByUser_level_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUserOrderByUser_level_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
ORDER BY 	`User_level_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByApprovedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByApprovedOrderById`( 
IN pApproved VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByApprovedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByApprovedOrderByIdWithLimit`( 
IN pApproved VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pApproved = pApproved;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`approved` = '",@pApproved,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByBlockedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByBlockedOrderById`( 
IN pBlocked VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pBlocked = pBlocked;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`blocked` = '",@pBlocked,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByBlockedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByBlockedOrderByIdWithLimit`( 
IN pBlocked VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pBlocked = pBlocked;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`blocked` = '",@pBlocked,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByCompanyOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByCompanyOrderById`( 
IN pCompany VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCompany = pCompany;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`company` = '",@pCompany,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByCompanyOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByCompanyOrderByIdWithLimit`( 
IN pCompany VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCompany = pCompany;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`company` = '",@pCompany,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByConfirmedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByConfirmedOrderById`( 
IN pConfirmed VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pConfirmed = pConfirmed;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`confirmed` = '",@pConfirmed,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByConfirmedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByConfirmedOrderByIdWithLimit`( 
IN pConfirmed VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pConfirmed = pConfirmed;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`confirmed` = '",@pConfirmed,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByDate_of_birthOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByDate_of_birthOrderById`( 
IN pDate_of_birth DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_of_birth = pDate_of_birth;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`date_of_birth` = '",@pDate_of_birth,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByDate_of_birthOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByDate_of_birthOrderByIdWithLimit`( 
IN pDate_of_birth DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_of_birth = pDate_of_birth;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`date_of_birth` = '",@pDate_of_birth,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByDepartmentOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByDepartmentOrderById`( 
IN pDepartment VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDepartment = pDepartment;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`department` = '",@pDepartment,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByDepartmentOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByDepartmentOrderByIdWithLimit`( 
IN pDepartment VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDepartment = pDepartment;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`department` = '",@pDepartment,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByHome_phoneOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByHome_phoneOrderById`( 
IN pHome_phone VARCHAR (17), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pHome_phone = pHome_phone;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`home_phone` = '",@pHome_phone,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByHome_phoneOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByHome_phoneOrderByIdWithLimit`( 
IN pHome_phone VARCHAR (17), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pHome_phone = pHome_phone;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`home_phone` = '",@pHome_phone,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByApproved`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByApprovedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByBlocked`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByBlocked`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Blocked` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByBlockedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByBlockedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Blocked` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByCompany`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByCompany`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Company` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByCompanyWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByCompanyWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Company` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByConfirmed`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByConfirmed`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Confirmed` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByConfirmedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByConfirmedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Confirmed` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByDate_of_birth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByDate_of_birth`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_of_birth` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByDate_of_birthWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByDate_of_birthWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Date_of_birth` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByDepartment`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByDepartment`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Department` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByDepartmentWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByDepartmentWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Department` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByHome_phone`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByHome_phone`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Home_phone` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByHome_phoneWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByHome_phoneWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Home_phone` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByLast_login_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByLast_login_date`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Last_login_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByLast_login_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByLast_login_dateWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Last_login_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByMobile`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByMobile`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Mobile` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByMobileWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByMobileWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Mobile` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByPosition`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByPosition`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Position` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByPositionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByPositionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Position` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByRegistration_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByRegistration_date`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Registration_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByRegistration_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByRegistration_dateWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Registration_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByUser_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByUser_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByWork_fax`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByWork_fax`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Work_fax` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByWork_faxWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByWork_faxWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Work_fax` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByWork_phone`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByWork_phone`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Work_phone` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByIdOrderByWork_phoneWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByIdOrderByWork_phoneWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId
ORDER BY 	`Work_phone` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByLast_login_dateOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByLast_login_dateOrderById`( 
IN pLast_login_date DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLast_login_date = pLast_login_date;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`last_login_date` = '",@pLast_login_date,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByLast_login_dateOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByLast_login_dateOrderByIdWithLimit`( 
IN pLast_login_date DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLast_login_date = pLast_login_date;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`last_login_date` = '",@pLast_login_date,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByMobileOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByMobileOrderById`( 
IN pMobile VARCHAR (17), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMobile = pMobile;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`mobile` = '",@pMobile,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByMobileOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByMobileOrderByIdWithLimit`( 
IN pMobile VARCHAR (17), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pMobile = pMobile;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`mobile` = '",@pMobile,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByPositionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByPositionOrderById`( 
IN pPosition VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPosition = pPosition;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`position` = '",@pPosition,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByPositionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByPositionOrderByIdWithLimit`( 
IN pPosition VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPosition = pPosition;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`position` = '",@pPosition,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByRegistration_dateOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByRegistration_dateOrderById`( 
IN pRegistration_date DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pRegistration_date = pRegistration_date;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`registration_date` = '",@pRegistration_date,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByRegistration_dateOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByRegistration_dateOrderByIdWithLimit`( 
IN pRegistration_date DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pRegistration_date = pRegistration_date;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`registration_date` = '",@pRegistration_date,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByUser_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByUser_idOrderById`( 
IN pUser_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByUser_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByUser_idOrderByIdWithLimit`( 
IN pUser_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_id = pUser_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`user_id` = '",@pUser_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByWork_faxOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByWork_faxOrderById`( 
IN pWork_fax VARCHAR (17), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWork_fax = pWork_fax;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`work_fax` = '",@pWork_fax,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByWork_faxOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByWork_faxOrderByIdWithLimit`( 
IN pWork_fax VARCHAR (17), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWork_fax = pWork_fax;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`work_fax` = '",@pWork_fax,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByWork_phoneOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByWork_phoneOrderById`( 
IN pWork_phone VARCHAR (17), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWork_phone = pWork_phone;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`work_phone` = '",@pWork_phone,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoByWork_phoneOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoByWork_phoneOrderByIdWithLimit`( 
IN pWork_phone VARCHAR (17), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pWork_phone = pWork_phone;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`work_phone` = '",@pWork_phone,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByApproved`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Approved` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByApprovedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByApprovedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Approved` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByBlocked`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByBlocked`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Blocked` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByBlockedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByBlockedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Blocked` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByCompany`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByCompany`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Company` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByCompanyWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByCompanyWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Company` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByConfirmed`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByConfirmed`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Confirmed` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByConfirmedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByConfirmedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Confirmed` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByDate_of_birth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByDate_of_birth`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Date_of_birth` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByDate_of_birthWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByDate_of_birthWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Date_of_birth` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByDepartment`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByDepartment`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Department` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByDepartmentWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByDepartmentWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Department` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByHome_phone`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByHome_phone`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Home_phone` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByHome_phoneWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByHome_phoneWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Home_phone` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByLast_login_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByLast_login_date`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Last_login_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByLast_login_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByLast_login_dateWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Last_login_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByMobile`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByMobile`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Mobile` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByMobileWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByMobileWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Mobile` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByPosition`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByPosition`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Position` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByPositionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByPositionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Position` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByRegistration_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByRegistration_date`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Registration_date` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByRegistration_dateWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByRegistration_dateWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Registration_date` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByUser_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`User_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByUser_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByUser_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`User_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByWork_fax`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByWork_fax`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Work_fax` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByWork_faxWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByWork_faxWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Work_fax` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByWork_phone`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByWork_phone`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Work_phone` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_infoOrderByWork_phoneWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_infoOrderByWork_phoneWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
ORDER BY 	`Work_phone` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByDate_addedOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByDate_addedOrderById`( 
IN pDate_added TIMESTAMP , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByDate_addedOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByDate_addedOrderByIdWithLimit`( 
IN pDate_added TIMESTAMP , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDate_added = pDate_added;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`date_added` = '",@pDate_added,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByDescriptionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByDescriptionOrderById`( 
IN pDescription TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByDescriptionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByDescriptionOrderByIdWithLimit`( 
IN pDescription TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pDescription = pDescription;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`description` = '",@pDescription,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByDate_added`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByDate_addedWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByDescription`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByDescriptionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByLabel`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByLabelWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByLocked_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByLocked_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByLocked_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByLocked_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByModified_by`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByModified_byWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByModified_time`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByModified_timeWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByTitle`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByIdOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByIdOrderByTitleWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByLabelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByLabelOrderById`( 
IN pLabel VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByLabelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByLabelOrderByIdWithLimit`( 
IN pLabel VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLabel = pLabel;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`label` = '",@pLabel,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByLocked_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByLocked_byOrderById`( 
IN pLocked_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByLocked_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByLocked_byOrderByIdWithLimit`( 
IN pLocked_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_by = pLocked_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`locked_by` = '",@pLocked_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByLocked_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByLocked_timeOrderById`( 
IN pLocked_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByLocked_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByLocked_timeOrderByIdWithLimit`( 
IN pLocked_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pLocked_time = pLocked_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`locked_time` = '",@pLocked_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByModified_byOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByModified_byOrderById`( 
IN pModified_by INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByModified_byOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByModified_byOrderByIdWithLimit`( 
IN pModified_by INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_by = pModified_by;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`modified_by` = '",@pModified_by,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByModified_timeOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByModified_timeOrderById`( 
IN pModified_time DATETIME , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByModified_timeOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByModified_timeOrderByIdWithLimit`( 
IN pModified_time DATETIME , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pModified_time = pModified_time;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`modified_time` = '",@pModified_time,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByTitleOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByTitleOrderById`( 
IN pTitle VARCHAR (255), 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelByTitleOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelByTitleOrderByIdWithLimit`( 
IN pTitle VARCHAR (255), 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pTitle = pTitle;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`title` = '",@pTitle,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByDate_added`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Date_added` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByDescription`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Description` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByDescriptionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByDescriptionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Description` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByLabel`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Label` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByLabelWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByLabelWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Label` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByLocked_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Locked_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByLocked_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByLocked_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Locked_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByLocked_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Locked_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByLocked_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByLocked_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Locked_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByModified_by`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Modified_by` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByModified_byWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByModified_byWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Modified_by` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByModified_time`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Modified_time` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByModified_timeWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByModified_timeWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Modified_time` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByTitle`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Title` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_levelOrderByTitleWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_levelOrderByTitleWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
ORDER BY 	`Title` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByAction_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByAction_idOrderById`( 
IN pAction_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_id = pAction_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`action_id` = '",@pAction_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByAction_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByAction_idOrderByIdWithLimit`( 
IN pAction_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pAction_id = pAction_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`action_id` = '",@pAction_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByClass_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByClass_idOrderById`( 
IN pClass_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pClass_id = pClass_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`class_id` = '",@pClass_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByClass_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByClass_idOrderByIdWithLimit`( 
IN pClass_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pClass_id = pClass_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`class_id` = '",@pClass_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByCommentsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByCommentsOrderById`( 
IN pComments TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByCommentsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByCommentsOrderByIdWithLimit`( 
IN pComments TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pComments = pComments;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`comments` = '",@pComments,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByAction_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByAction_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Action_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByAction_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByAction_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Action_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByClass_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Class_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByClass_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByClass_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Class_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByComments`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByCommentsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderById`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByIdWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByOptions`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByOptionsWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByPermission`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByPermission`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Permission` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByPermissionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByPermissionWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`Permission` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByUser_level_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByUser_level_id`( 

IN pId INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`User_level_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByIdOrderByUser_level_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByIdOrderByUser_level_idWithLimit`(

IN pId INT , 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId
ORDER BY 	`User_level_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByOptionsOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByOptionsOrderById`( 
IN pOptions TEXT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByOptionsOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByOptionsOrderByIdWithLimit`( 
IN pOptions TEXT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOptions = pOptions;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`options` = '",@pOptions,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByPermissionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByPermissionOrderById`( 
IN pPermission INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPermission = pPermission;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`permission` = '",@pPermission,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByPermissionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByPermissionOrderByIdWithLimit`( 
IN pPermission INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pPermission = pPermission;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`permission` = '",@pPermission,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByUser_level_idOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByUser_level_idOrderById`( 
IN pUser_level_id INT , 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_level_id = pUser_level_id;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`user_level_id` = '",@pUser_level_id,"'
ORDER BY 	`id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionByUser_level_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionByUser_level_idOrderByIdWithLimit`( 
IN pUser_level_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pUser_level_id = pUser_level_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`user_level_id` = '",@pUser_level_id,"'
ORDER BY 	`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByAction_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByAction_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Action_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByAction_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByAction_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Action_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByClass_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Class_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByClass_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByClass_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Class_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByComments`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Comments` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByCommentsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByCommentsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Comments` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderById`(
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	id ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByIdWithLimit`(
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5) 
)
BEGIN

SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	id ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByOptions`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Options` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByOptionsWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByOptionsWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Options` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByPermission`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByPermission`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Permission` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByPermissionWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByPermissionWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`Permission` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByUser_level_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByUser_level_id`( 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`User_level_id` ",@pOrder); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetAllUser_level_permissionOrderByUser_level_idWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetAllUser_level_permissionOrderByUser_level_idWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
ORDER BY 	`User_level_id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetBannerDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetBannerDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetBannerDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetBannerDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetBanner_areaDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetBanner_areaDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetBanner_areaDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetBanner_areaDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`banner_area` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCategoryAndCategory_infoOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCategoryAndCategory_infoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS c.`id`, c.`title`, c.`label`, c.`description`, c.`type_id`, c.`author_id`, c.`parent_id`, c.`package_id`, c.`show_in_menu`, c.`published`, c.`approved`, c.`order`, c.`date_added`, 
ci.`id` AS `id_info`, ci.`category_id`, ci.`subcat_count`, ci.`direct_object_count`, ci.`indirect_object_count`, ci.`page_title`, ci.`meta_title`, ci.`meta_key`, ci.`meta_desc`, ci.`meta_data`, ci.`locked_by`, ci.`locked_time`, ci.`modified_by`, ci.`modified_time`, ci.`publish_from`, ci.`publish_to`, ci.`date_added` AS `date_added_info`, ci.`comments`, ci.`options` 
FROM 		`category` AS c 
INNER JOIN 	`category_info` AS ci ON ci.`category_id` = c.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCategoryDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCategoryDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCategoryDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCategoryDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCategory_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCategory_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCategory_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCategory_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`category_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCategory_typeDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCategory_typeDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCategory_typeDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCategory_typeDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`, `date_added` 
FROM 		`category_type` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCategory_type_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCategory_type_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCategory_type_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCategory_type_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `date_added`, `comments`, `options` 
FROM 		`category_type_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCleanCatAndCatInfoByParentIdOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCleanCatAndCatInfoByParentIdOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pParentId INT, 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pParentId = pParentId;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS c.`id`, c.`title`, c.`label`, c.`description`, c.`type_id`, c.`author_id`, c.`parent_id`, c.`package_id`, c.`show_in_menu`, c.`published`, c.`approved`, c.`order`, c.`date_added`, 
ci.`id` AS `id_info`, ci.`category_id`, ci.`subcat_count`, ci.`direct_object_count`, ci.`indirect_object_count`, ci.`page_title`, ci.`meta_title`, ci.`meta_key`, ci.`meta_desc`, ci.`meta_data`, ci.`locked_by`, ci.`locked_time`, ci.`modified_by`, ci.`modified_time`, ci.`publish_from`, ci.`publish_to`, ci.`date_added` AS `date_added_info`, ci.`comments`, ci.`options` 
FROM 		`category` AS c 
INNER JOIN 	`category_info` AS ci ON ci.`category_id` = c.`id` 
WHERE 		c.`published` = 'Yes' 
AND 		c.`approved` = 'Yes' 
AND 		c.`parent_id` = ", @pParentId ," 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCleanObject_photoByCategory_idOrderByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCleanObject_photoByCategory_idOrderByIdWithLimit`( 
IN pCategory_id INT , 
IN pStart INT, 
IN pLimit INT, 
IN pOrder VARCHAR (5)
)
BEGIN

SET @pCategory_id = pCategory_id;
SET @pStart = pStart;
SET @pLimit = pLimit;
SET @pOrder = pOrder;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS po.`id`, po.`alias`, po.`intro_text`, po.`author_id`, po.`source_id`, po.`object_id`, po.`category_id`, po.`size`, po.`height`, po.`width`, po.`extension`, po.`taken_date`, po.`taken_location`, po.`meta_data`, po.`show_in_object`, po.`published`, po.`approved`, po.`order`, po.`locked_by`, po.`locked_time`, po.`modified_by`, po.`modified_time`, po.`publish_from`, po.`publish_to`, po.`date_added`, po.`comments`, po.`options`, u.`fullname` AS `user_fullname`, cat.`label` AS `category_label`
FROM 		`object_photo` AS po 
INNER JOIN `user` AS u ON po.`author_id` = u.`id`
INNER JOIN `category` AS cat ON po.`category_id` = cat.`id`
WHERE 		po.`category_id` = '",@pCategory_id,"' AND po.`approved` = 'Yes' AND po.`published` = 'Yes' 
ORDER BY 	po.`id` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCleanObject_photoOrderByDate_addedWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCleanObject_photoOrderByDate_addedWithLimit`( 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;


set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`approved` = 'Yes' AND `published` = 'Yes' AND `show_in_object` = 'Yes'
ORDER BY 	`Date_added` ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit);  

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetCleanUserAndUserInfoOrderByColumn`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetCleanUserAndUserInfoOrderByColumn`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS u.`id`, u.`username`, u.`password`, u.`fullname`, u.`email`, u.`user_level_id`, u.`date_added`, ui.`id`, ui.`user_id`, ui.`date_of_birth`, ui.`registration_date`, ui.`last_login_date`, ui.`company`, ui.`department`, ui.`position`, ui.`home_phone`, ui.`work_phone`, ui.`work_fax`, ui.`mobile`, ui.`blocked`, ui.`approved`, ui.`confirmed`, ui.`locked_by`, ui.`locked_time`, ui.`modified_by`, ui.`modified_time`, ui.`date_added` AS date_added_info, ui.`comments`, ui.`options` 
FROM 		`user` AS u 
INNER JOIN 	`user_info` AS ui ON ui.`user_id` = u.`id` 
WHERE 		ui.`blocked` = 'No' AND ui.`approved` = 'Yes' AND ui.`confirmed` = 'Yes' 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetLayoutAndLayout_infoOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetLayoutAndLayout_infoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("

SELECT 	SQL_CALC_FOUND_ROWS tl.`title`, tl.`label`, tl.`description`, tl.`author_id`, tl.`direction`, tl.`published`, tl.`approved`, tl.`default`, tl.`order`, tl.`date_added`, tli.`id`, tli.`layout_id`, tli.`locked_by`, tli.`locked_time`, tli.`modified_by`, tli.`modified_time`, tli.`publish_from`, tli.`publish_to`, tli.`date_added`, tli.`comments`, tli.`options` 
FROM 		`theme_layout` AS tl 
INNER JOIN 	`theme_layout_info` AS tli ON tli.`layout_id` = tl.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetLocaleDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetLocaleDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetLocaleDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetLocaleDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`locale` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetMenuAndMenu_infoOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetMenuAndMenu_infoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS m.`id`, m.`label`, m.`link`, m.`type_id`, m.`parent_id`, m.`package_id`, m.`sublevel`, m.`published`, m.`approved`, m.`order`, m.`date_added`, mi.`id` AS `id_info`, mi.`menu_id`, mi.`locked_by`, mi.`locked_time`, mi.`modified_by`, mi.`modified_time`, mi.`publish_from`, mi.`publish_to`, mi.`date_added`, mi.`comments`, mi.`options` 
FROM 		`menu` AS m 
INNER JOIN 	`menu_info` AS mi ON mi.`menu_id` = m.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetMenuDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetMenuDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetMenuDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetMenuDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added` 
FROM 		`menu` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetMenu_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetMenu_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetMenu_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetMenu_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`menu_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetMenu_typeDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetMenu_typeDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetMenu_typeDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetMenu_typeDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`menu_type` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObjectAndObject_infoOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObjectAndObject_infoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS o.`id`, o.`title`, o.`created_date`, o.`author_id`, o.`source_id`, o.`tags`, o.`page_title`, o.`meta_title`, o.`meta_key`, o.`meta_desc`, o.`meta_data`, o.`type_id`, o.`category_id`, o.`locale_id`, o.`guid_url`, o.`original_author`, o.`parent_id`, o.`show_in_list`, o.`published`, o.`approved`, o.`date_added`, oi.`id` AS `id_info`, oi.`object_id`, oi.`total_views`, oi.`total_comments`, oi.`total_rating`, oi.`layout_id`, oi.`template_id`, oi.`skin_id`, oi.`theme_publish_from`, oi.`theme_publish_to`, oi.`date_added` AS `date_added_info`, oi.`comments`, oi.`options` 
FROM 		`object` AS o  
INNER JOIN 	`object_info` AS oi ON oi.`object_id` = o.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObjectDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObjectDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObjectDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObjectDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`, `date_added` 
FROM 		`object` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_abuseAndObject_abuse_typeOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_abuseAndObject_abuse_typeOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS oa.`id`, oa.`object_id`, oa.`user_id`, oa.`alias`, oa.`email`, oa.`description`, oa.`type_id`, oa.`locale_id`, oa.`is_abuse`, oa.`approved`, oa.`date_added`, oa.`comments`, oa.`options`, oat.`id` AS `id_info`, oat.`title`, oat.`label`, oat.`description`, oat.`author_id`, oat.`published`, oat.`approved`, oat.`order`, oat.`package_id`, oat.`locked_by`, oat.`locked_time`, oat.`modified_by`, oat.`modified_time`, oat.`date_added` AS `date_added_info` 
FROM 		`object_abuse` AS oa  
INNER JOIN 	`object_abuse_type` AS oat ON oat.`id` = oa.`type_id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_abuseDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_abuseDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_abuseDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_abuseDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_abuse` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_abuse_typeDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_abuse_typeDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_abuse_typeDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_abuse_typeDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added` 
FROM 		`object_abuse_type` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_articleDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_articleDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_articleDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_articleDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_article` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_commentDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_commentDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_commentDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_commentDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `date_added`, `comments`, `options` 
FROM 		`object_comment` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_directoryDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_directoryDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_directoryDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_directoryDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_directory` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_fileDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_fileDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_fileDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_fileDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`object_file` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_photoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_photoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_photoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_photoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_photo` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_ratingDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_ratingDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_ratingDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_ratingDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options` 
FROM 		`object_rating` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_sourceAndObject_source_infoOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_sourceAndObject_source_infoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS os.`id`, os.`name`, os.`description`, os.`source_type`, os.`url`, os.`author_id`, os.`locale_id`, os.`country_id`, os.`package_id`, os.`time_delay`, os.`published`, os.`approved`, os.`order`, os.`date_added`,  osi.`id` AS `id_info`, osi.`source_id`, osi.`locked_by`, osi.`locked_time`, osi.`modified_by`, osi.`modified_time`, osi.`publish_from`, osi.`publish_to`, osi.`date_added` AS `date_added_info`, osi.`comments`, osi.`options` 
FROM 		`object_source` AS os 
INNER JOIN 	`object_source_info` AS osi ON osi.`source_id` = os.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt  ;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_sourceDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_sourceDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_sourceDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_sourceDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`, `date_added` 
FROM 		`object_source` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_source_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_source_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_source_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_source_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_source_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_staticDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_staticDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_staticDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_staticDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_static` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_tagDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_tagDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_tagDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_tagDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `object_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`object_tag` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_typeAndObject_type_infoOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_typeAndObject_type_infoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS ot.`id`, ot.`title`, ot.`label`, ot.`description`, ot.`author_id`, ot.`package_id`, ot.`published`, ot.`approved`, ot.`date_added`, oti.`id` AS `id_info`, oti.`type_id`, oti.`locked_by`, oti.`locked_time`, oti.`modified_by`, oti.`modified_time`, oti.`publish_from`, oti.`publish_to`, oti.`date_added` AS `date_added_info`, oti.`comments`, oti.`options`
FROM 		`object_type` AS ot 
INNER JOIN 	`object_type_info` AS oti ON oti.`type_id` = ot.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_typeDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_typeDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_typeDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_typeDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`, `date_added` 
FROM 		`object_type` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_type_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_type_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_type_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_type_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_type_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_urlDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_urlDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_urlDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_urlDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_url` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_user_favouriteDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_user_favouriteDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_user_favouriteDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_user_favouriteDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `object_id`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`object_user_favourite` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_videoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_videoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetObject_videoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetObject_videoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`object_video` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPackageAndPackage_infoOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPackageAndPackage_infoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("
SELECT 		SQL_CALC_FOUND_ROWS p.`id`, p.`title`, p.`label`, p.`show_in_menu`, p.`published`, p.`approved`, p.`type`, p.`prerequisite_id`, p.`date_added`, pi.`id` AS `id_info`, pi.`package_id`, pi.`default_action_title`, pi.`default_action_name`, pi.`version`, pi.`locked_by`, pi.`locked_time`, pi.`date_added` AS `date_added_info`, pi.`comments`, pi.`options` 
FROM 		`package` AS p 
INNER JOIN 	`package_info` AS pi ON pi.`package_id` = p.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPackageDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPackageDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPackageDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPackageDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`, `date_added` 
FROM 		`package` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPackage_actionDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPackage_actionDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPackage_actionDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPackage_actionDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `date_added`, `comments`, `options` 
FROM 		`package_action` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPackage_classDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPackage_classDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPackage_classDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPackage_classDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `name`, `description`, `file_name`, `package_id`, `date_added`, `comments`, `options` 
FROM 		`package_class` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPackage_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPackage_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPackage_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPackage_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `date_added`, `comments`, `options` 
FROM 		`package_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPhotoDetailsCleanByPhotoId`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPhotoDetailsCleanByPhotoId`( 
IN pId INT)
BEGIN

SET @pId = pId;

set @sql = CONCAT("
SELECT SQL_CALC_FOUND_ROWS u.*, ui.*, o.*, op.`id`, op.`alias`, op.`intro_text`, op.`author_id`, op.`source_id`, op.`object_id`, op.`category_id`, op.`size`, op.`height`, op.`width`, op.`extension`, op.`taken_date`, op.`taken_location`, op.`meta_data`, op.`show_in_object`, op.`published`, op.`approved`, op.`order`, op.`locked_by`, op.`locked_time`, op.`modified_by`, op.`modified_time`, op.`publish_from`, op.`publish_to`, op.`date_added`, op.`comments`, op.`options`, o.`category_id` AS `sub_category`
FROM `object_photo` AS op 
INNER JOIN `object` AS o ON o.`id` = op.`object_id` 
INNER JOIN `object_info` AS oi ON oi.`object_id` = op.`id` 
INNER JOIN `user` AS u ON op.`author_id` = u.`id` 
INNER JOIN `user_info` AS ui ON u.`id` = ui.`user_id` 
WHERE op.`published` = 'Yes' 
AND op.`approved`='Yes' 
AND op.`id`=",@pId); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPollDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPollDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPollDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPollDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `publish_from`, `publish_to`, `comments`, `options` 
FROM 		`poll` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPoll_answerDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPoll_answerDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPoll_answerDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPoll_answerDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`poll_answer` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPoll_voteDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPoll_voteDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetPoll_voteDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetPoll_voteDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `date_added`, `comments`, `options` 
FROM 		`poll_vote` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetSkinAndSkin_infoOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetSkinAndSkin_infoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("

SELECT 	SQL_CALC_FOUND_ROWS ts.`id`, ts.`layout_id`, ts.`template_id`, ts.`title`, ts.`label`, ts.`description`, ts.`author_id`, ts.`published`, ts.`approved`, ts.`default`, ts.`order`, ts.`date_added`, tsi.`id`, tsi.`skin_id`, tsi.`locked_by`, tsi.`locked_time`, tsi.`modified_by`, tsi.`modified_time`, tsi.`publish_from`, tsi.`publish_to`, tsi.`date_added`, tsi.`comments`, tsi.`options` 
FROM 		`theme_skin` AS ts 
INNER JOIN 	`theme_skin_info` AS tsi ON tsi.`skin_id` = ts.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTagDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTagDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTagDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTagDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `locale_id`, `published`, `approved`, `order`, `date_added`, `comments` 
FROM 		`tag` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTemplateAndTemplate_infoOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTemplateAndTemplate_infoOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("

SELECT 	SQL_CALC_FOUND_ROWS tt.`id`, tt.`title`, tt.`label`, tt.`description`, tt.`author_id`, tt.`published`, tt.`approved`, tt.`default`, tt.`order`, tt.`date_added`, tti.`id`, tti.`template_id`, tti.`locked_by`, tti.`locked_time`, tti.`modified_by`, tti.`modified_time`, tti.`publish_from`, tti.`publish_to`, tti.`date_added`, tti.`comments`, tti.`options`
FROM 		`theme_template` AS tt  
INNER JOIN 	`theme_template_info` AS tti ON tti.`template_id` = tt.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetThemeAndTemplateAndLayoutAndSkinOrderByColumnWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetThemeAndTemplateAndLayoutAndSkinOrderByColumnWithLimit`( 
IN pColumn VARCHAR (255), 
IN pOrder VARCHAR (5),
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pColumn = pColumn;
SET @pOrder = pOrder;
SET @pStart = pStart;
SET @pLimit = pLimit;

set @sql = CONCAT("

SELECT 	SQL_CALC_FOUND_ROWS t.`id`, t.`layout_id`, t.`template_id`, t.`skin_id`, t.`package_id`, t.`class_id`, t.`action_id`, t.`publish_from`, t.`publish_to`, t.`date_added`, t.`comments`, t.`options`, 
tl.`title`, tl.`label`, tl.`description`, tl.`author_id`, tl.`direction`, tl.`published`, tl.`approved`, tl.`default`, tl.`order`, tl.`date_added`, 
tt.`id`, tt.`title`, tt.`label`, tt.`description`, tt.`author_id`, tt.`published`, tt.`approved`, tt.`default`, tt.`order`, tt.`date_added`, 
ts.`id`, ts.`layout_id`, ts.`template_id`, ts.`title`, ts.`label`, ts.`description`, ts.`author_id`, ts.`published`, ts.`approved`, ts.`default`, ts.`order`, ts.`date_added`, 
tti.`id`, tti.`template_id`, tti.`locked_by`, tti.`locked_time`, tti.`modified_by`, tti.`modified_time`, tti.`publish_from`, tti.`publish_to`, tti.`date_added`, tti.`comments`, tti.`options`, 
tli.`id`, tli.`layout_id`, tli.`locked_by`, tli.`locked_time`, tli.`modified_by`, tli.`modified_time`, tli.`publish_from`, tli.`publish_to`, tli.`date_added`, tli.`comments`, tli.`options`, 
tsi.`id`, tsi.`skin_id`, tsi.`locked_by`, tsi.`locked_time`, tsi.`modified_by`, tsi.`modified_time`, tsi.`publish_from`, tsi.`publish_to`, tsi.`date_added`, tsi.`comments`, tsi.`options` 
FROM 		`theme` AS t 
INNER JOIN 	`theme_layout` AS tl ON t.`id` = t.`layout_id` 
INNER JOIN 	`theme_template` AS tt ON t.`id` = t.`template_id` 
INNER JOIN 	`theme_skin` AS ts ON ts.`id` = t.`skin_id` 
INNER JOIN 	`theme_layout_info` AS tli ON tli.`layout_id` = tl.`id` 
INNER JOIN 	`theme_template_info` AS tti ON tti.`template_id` = tt.`id` 
INNER JOIN 	`theme_skin_info` AS tsi ON tsi.`skin_id` = ts.`id` 
ORDER BY 	",@pColumn," ",@pOrder," 
LIMIT 		",@pStart,",",@pLimit); 

PREPARE stmt FROM @sql ;
EXECUTE stmt;

END$$

DROP PROCEDURE IF EXISTS `SP_GetThemeDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetThemeDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetThemeDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetThemeDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_layoutDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_layoutDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_layoutDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_layoutDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_layout` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_layout_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_layout_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_layout_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_layout_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_layout_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_skinDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_skinDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_skinDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_skinDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_skin` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_skin_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_skin_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_skin_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_skin_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_skin_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_templateDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_templateDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_templateDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_templateDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`, `date_added` 
FROM 		`theme_template` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_template_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_template_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTheme_template_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTheme_template_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options` 
FROM 		`theme_template_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTranslationDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTranslationDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetTranslationDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetTranslationDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments` 
FROM 		`translation` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetUserDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetUserDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetUserDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetUserDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_getUserDetailsByUsernameAndPassword`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_getUserDetailsByUsernameAndPassword`(
IN pUsername varchar(32) ,
IN pPassword varchar(32)
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added` 
FROM 		`user` 
WHERE 		`username` = pUsername 
AND  		`password` = pPassword;

END$$

DROP PROCEDURE IF EXISTS `SP_GetUser_infoDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetUser_infoDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetUser_infoDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetUser_infoDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_info` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetUser_levelDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetUser_levelDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetUser_levelDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetUser_levelDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options` 
FROM 		`user_level` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_GetUser_level_permissionDetailsById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetUser_level_permissionDetailsById`(
IN pId INT 
)
BEGIN

SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_GetUser_level_permissionDetailsByIdWithLimit`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GetUser_level_permissionDetailsByIdWithLimit`(
IN pId INT , 
IN pStart INT, 
IN pLimit INT
)
BEGIN

SET @pId = pId;
SET @pStart = pStart;
SET @pLimit = pLimit;

PREPARE 	STMT FROM "
SELECT 		SQL_CALC_FOUND_ROWS `id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options` 
FROM 		`user_level_permission` 
WHERE 		id = ? 
LIMIT 		?, ?";

EXECUTE STMT USING @pId, @pStart, @pLimit;

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoBanner`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoBanner`(
IN pId INT , 
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `banner` (`id`, `area_id`, `title`, `label`, `type`, `mime_type`, `size`, `extension`, `full_path`, `link`, `object`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pArea_id, pTitle, pLabel, pType, pMime_type, pSize, pExtension, pFull_path, pLink, pObject, pPublished, pApproved, pAuthor_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoBanner_area`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoBanner_area`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `banner_area` (`id`, `title`, `label`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pTitle, pLabel, pPublished, pApproved, pAuthor_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoCategory`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoCategory`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN 

INSERT INTO `category` (`id`, `title`, `label`, `description`, `type_id`, `author_id`, `parent_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`)
VALUES (pId, pTitle, pLabel, pDescription, pType_id, pAuthor_id, pParent_id, pPackage_id, pShow_in_menu, pPublished, pApproved, pOrder);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoCategory_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoCategory_info`(
IN pId INT , 
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `category_info` (`id`, `category_id`, `subcat_count`, `direct_object_count`, `indirect_object_count`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pCategory_id, pSubcat_count, pDirect_object_count, pIndirect_object_count, pPage_title, pMeta_title, pMeta_key, pMeta_desc, pMeta_data, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoCategory_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoCategory_type`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN 

INSERT INTO `category_type` (`id`, `title`, `label`, `description`, `author_id`, `package_id`, `show_in_menu`, `published`, `approved`, `order`)
VALUES (pId, pTitle, pLabel, pDescription, pAuthor_id, pPackage_id, pShow_in_menu, pPublished, pApproved, pOrder);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoCategory_type_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoCategory_type_info`(
IN pId INT , 
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `category_type_info` (`id`, `category_type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `direct_cat_count`, `indirect_cat_count`, `comments`, `options`)
VALUES (pId, pCategory_type_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pDirect_cat_count, pIndirect_cat_count, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoLocale`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoLocale`(
IN pId INT , 
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN 

INSERT INTO `locale` (`id`, `locale`, `title`, `locale_title`, `published`, `approved`, `order`, `comments`)
VALUES (pId, pLocale, pTitle, pLocale_title, pPublished, pApproved, pOrder, pComments);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoMenu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoMenu`(
IN pId INT , 
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN 

INSERT INTO `menu` (`id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`)
VALUES (pId, pLabel, pLink, pType_id, pParent_id, pPackage_id, pSublevel, pPublished, pApproved, pOrder);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoMenu_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoMenu_info`(
IN pId INT , 
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `menu_info` (`id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pMenu_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoMenu_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoMenu_type`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `menu_type` (`id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `comments`, `options`)
VALUES (pId, pTitle, pLabel, pDescription, pAuthor_id, pPublished, pApproved, pOrder, pPackage_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN 

INSERT INTO `object` (`id`, `title`, `created_date`, `author_id`, `source_id`, `tags`, `page_title`, `meta_title`, `meta_key`, `meta_desc`, `meta_data`, `type_id`, `category_id`, `locale_id`, `guid_url`, `original_author`, `parent_id`, `show_in_list`, `published`, `approved`)
VALUES (pId, pTitle, pCreated_date, pAuthor_id, pSource_id, pTags, pPage_title, pMeta_title, pMeta_key, pMeta_desc, pMeta_data, pType_id, pCategory_id, pLocale_id, pGuid_url, pOriginal_author, pParent_id, pShow_in_list, pPublished, pApproved);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_abuse`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_abuse`(
IN pId INT , 
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_abuse` (`id`, `object_id`, `user_id`, `alias`, `email`, `description`, `type_id`, `locale_id`, `is_abuse`, `approved`, `comments`, `options`)
VALUES (pId, pObject_id, pUser_id, pAlias, pEmail, pDescription, pType_id, pLocale_id, pIs_abuse, pApproved, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_abuse_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_abuse_type`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN 

INSERT INTO `object_abuse_type` (`id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`)
VALUES (pId, pTitle, pLabel, pDescription, pAuthor_id, pPublished, pApproved, pOrder, pPackage_id, pLocked_by, pLocked_time, pModified_by, pModified_time);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_article`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_article`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_article` (`id`, `alias`, `intro_text`, `full_text`, `created_date`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pAlias, pIntro_text, pFull_text, pCreated_date, pAuthor_id, pSource_id, pObject_id, pCategory_id, pShow_in_object, pPublished, pApproved, pOrder, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_comment`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_comment`(
IN pId INT , 
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_comment` (`id`, `object_id`, `user_id`, `title`, `content`, `email`, `webpage`, `locale_id`, `country_id`, `published`, `approved`, `comments`, `options`)
VALUES (pId, pObject_id, pUser_id, pTitle, pContent, pEmail, pWebpage, pLocale_id, pCountry_id, pPublished, pApproved, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_directory`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_directory`(
IN pId INT , 
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_directory` (`id`, `name`, `label`, `description`, `parent_id`, `author_id`, `size`, `files_count`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `comments`, `options`)
VALUES (pId, pName, pLabel, pDescription, pParent_id, pAuthor_id, pSize, pFiles_count, pFull_path, pObject_id, pCategory_id, pShow_in_object, pPublished, pApproved, pLocked_by, pLocked_time, pModified_by, pModified_time, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_file`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_file`(
IN pId INT , 
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_file` (`id`, `name`, `label`, `description`, `folder_id`, `author_id`, `mime_type`, `size`, `extension`, `full_path`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `comments`, `options`)
VALUES (pId, pName, pLabel, pDescription, pFolder_id, pAuthor_id, pMime_type, pSize, pExtension, pFull_path, pObject_id, pCategory_id, pShow_in_object, pPublished, pApproved, pLocked_by, pLocked_time, pModified_by, pModified_time, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_info`(
IN pId INT , 
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_info` (`id`, `object_id`, `total_views`, `total_comments`, `total_rating`, `layout_id`, `template_id`, `skin_id`, `theme_publish_from`, `theme_publish_to`, `comments`, `options`)
VALUES (pId, pObject_id, pTotal_views, pTotal_comments, pTotal_rating, pLayout_id, pTemplate_id, pSkin_id, pTheme_publish_from, pTheme_publish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_photo`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_photo`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_photo` (`id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pAlias, pIntro_text, pAuthor_id, pSource_id, pObject_id, pCategory_id, pSize, pHeight, pWidth, pExtension, pTaken_date, pTaken_location, pMeta_data, pShow_in_object, pPublished, pApproved, pOrder, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_rating`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_rating`(
IN pId INT , 
IN pLast_ip VARCHAR (50), 
IN pObject_id INT , 
IN pRating_total INT , 
IN pRating_count INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_rating` (`id`, `last_ip`, `object_id`, `rating_total`, `rating_count`, `user_id`, `comments`, `options`)
VALUES (pId, pLast_ip, pObject_id, pRating_total, pRating_count, pUser_id, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_source`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_source`(
IN pId INT , 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN 

INSERT INTO `object_source` (`id`, `name`, `description`, `source_type`, `url`, `author_id`, `locale_id`, `country_id`, `package_id`, `time_delay`, `published`, `approved`, `order`)
VALUES (pId, pName, pDescription, pSource_type, pUrl, pAuthor_id, pLocale_id, pCountry_id, pPackage_id, pTime_delay, pPublished, pApproved, pOrder);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_source_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_source_info`(
IN pId INT , 
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_source_info` (`id`, `source_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pSource_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_static`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_static`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_static` (`id`, `alias`, `url`, `intro_text`, `full_text`, `created_date`, `author_id`, `object_id`, `category_id`, `published`, `approved`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pAlias, pUrl, pIntro_text, pFull_text, pCreated_date, pAuthor_id, pObject_id, pCategory_id, pPublished, pApproved, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_tag`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_tag`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pObject_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN 

INSERT INTO `object_tag` (`id`, `title`, `object_id`, `published`, `approved`, `order`, `comments`)
VALUES (pId, pTitle, pObject_id, pPublished, pApproved, pOrder, pComments);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_type`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN 

INSERT INTO `object_type` (`id`, `title`, `label`, `description`, `author_id`, `package_id`, `published`, `approved`)
VALUES (pId, pTitle, pLabel, pDescription, pAuthor_id, pPackage_id, pPublished, pApproved);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_type_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_type_info`(
IN pId INT , 
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_type_info` (`id`, `type_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pType_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_url`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_url`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_url` (`id`, `alias`, `intro_text`, `url`, `style`, `author_id`, `source_id`, `object_id`, `category_id`, `show_in_object`, `published`, `approved`, `url_type`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pAlias, pIntro_text, pUrl, pStyle, pAuthor_id, pSource_id, pObject_id, pCategory_id, pShow_in_object, pPublished, pApproved, pUrl_type, pOrder, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_user_favourite`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_user_favourite`(
IN pId INT , 
IN pObject_id INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_user_favourite` (`id`, `object_id`, `user_id`, `comments`, `options`)
VALUES (pId, pObject_id, pUser_id, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoObject_video`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoObject_video`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `object_video` (`id`, `alias`, `intro_text`, `author_id`, `source_id`, `object_id`, `category_id`, `size`, `height`, `width`, `extension`, `taken_date`, `taken_location`, `meta_data`, `show_in_object`, `published`, `approved`, `encoded`, `order`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pAlias, pIntro_text, pAuthor_id, pSource_id, pObject_id, pCategory_id, pSize, pHeight, pWidth, pExtension, pTaken_date, pTaken_location, pMeta_data, pShow_in_object, pPublished, pApproved, pEncoded, pOrder, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoPackage`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoPackage`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN 

INSERT INTO `package` (`id`, `title`, `label`, `show_in_menu`, `published`, `approved`, `type`, `prerequisite_id`)
VALUES (pId, pTitle, pLabel, pShow_in_menu, pPublished, pApproved, pType, pPrerequisite_id);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoPackage_action`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoPackage_action`(
IN pId INT , 
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `package_action` (`id`, `action_title`, `action_name`, `action_description`, `file_name`, `package_id`, `class_id`, `comments`, `options`)
VALUES (pId, pAction_title, pAction_name, pAction_description, pFile_name, pPackage_id, pClass_id, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoPackage_class`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoPackage_class`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `package_class` (`id`, `title`, `name`, `description`, `file_name`, `package_id`, `comments`, `options`)
VALUES (pId, pTitle, pName, pDescription, pFile_name, pPackage_id, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoPackage_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoPackage_info`(
IN pId INT , 
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `package_info` (`id`, `package_id`, `default_action_title`, `default_action_name`, `version`, `locked_by`, `locked_time`, `comments`, `options`)
VALUES (pId, pPackage_id, pDefault_action_title, pDefault_action_name, pVersion, pLocked_by, pLocked_time, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoPoll`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoPoll`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `poll` (`id`, `title`, `label`, `votes_count`, `published`, `approved`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pTitle, pLabel, pVotes_count, pPublished, pApproved, pAuthor_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoPoll_answer`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoPoll_answer`(
IN pId INT , 
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `poll_answer` (`id`, `poll_id`, `title`, `label`, `votes_count`, `published`, `approved`, `order`, `author_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `comments`, `options`)
VALUES (pId, pPoll_id, pTitle, pLabel, pVotes_count, pPublished, pApproved, pOrder, pAuthor_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoPoll_vote`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoPoll_vote`(
IN pId INT , 
IN pPoll_id INT , 
IN pAnswer_id INT , 
IN pIp_address BIGINT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `poll_vote` (`id`, `poll_id`, `answer_id`, `ip_address`, `user_id`, `comments`, `options`)
VALUES (pId, pPoll_id, pAnswer_id, pIp_address, pUser_id, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoSearch_log`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoSearch_log`(
IN pSearch_term VARCHAR (128), 
IN pHits INT 
)
BEGIN 

INSERT INTO `search_log` (`search_term`, `hits`)
VALUES (pSearch_term, pHits);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoTag`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoTag`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLocale_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN 

INSERT INTO `tag` (`id`, `title`, `locale_id`, `published`, `approved`, `order`, `comments`)
VALUES (pId, pTitle, pLocale_id, pPublished, pApproved, pOrder, pComments);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoTheme`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoTheme`(
IN pId INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `theme` (`id`, `layout_id`, `template_id`, `skin_id`, `package_id`, `class_id`, `action_id`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pLayout_id, pTemplate_id, pSkin_id, pPackage_id, pClass_id, pAction_id, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoTheme_layout`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoTheme_layout`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN 

INSERT INTO `theme_layout` (`id`, `title`, `label`, `description`, `author_id`, `direction`, `published`, `approved`, `default`, `order`)
VALUES (pId, pTitle, pLabel, pDescription, pAuthor_id, pDirection, pPublished, pApproved, pDefault, pOrder);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoTheme_layout_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoTheme_layout_info`(
IN pId INT , 
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `theme_layout_info` (`id`, `layout_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pLayout_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoTheme_skin`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoTheme_skin`(
IN pId INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN 

INSERT INTO `theme_skin` (`id`, `layout_id`, `template_id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`)
VALUES (pId, pLayout_id, pTemplate_id, pTitle, pLabel, pDescription, pAuthor_id, pPublished, pApproved, pDefault, pOrder);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoTheme_skin_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoTheme_skin_info`(
IN pId INT , 
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `theme_skin_info` (`id`, `skin_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pSkin_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoTheme_template`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoTheme_template`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN 

INSERT INTO `theme_template` (`id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `default`, `order`)
VALUES (pId, pTitle, pLabel, pDescription, pAuthor_id, pPublished, pApproved, pDefault, pOrder);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoTheme_template_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoTheme_template_info`(
IN pId INT , 
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `theme_template_info` (`id`, `template_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `comments`, `options`)
VALUES (pId, pTemplate_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pPublish_from, pPublish_to, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoTranslation`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoTranslation`(
IN pId INT , 
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN 

INSERT INTO `translation` (`id`, `label`, `translation`, `locale_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `comments`)
VALUES (pId, pLabel, pTranslation, pLocale_id, pLocked_by, pLocked_time, pModified_by, pModified_time, pComments);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoUser`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoUser`(
IN pId INT , 
IN pUsername VARCHAR (32), 
IN pPassword VARCHAR (32), 
IN pFullname VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pUser_level_id INT 
)
BEGIN 

INSERT INTO `user` (`id`, `username`, `password`, `fullname`, `email`, `user_level_id`)
VALUES (pId, pUsername, pPassword, pFullname, pEmail, pUser_level_id);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoUser_info`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoUser_info`(
IN pId INT , 
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `user_info` (`id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `comments`, `options`)
VALUES (pId, pUser_id, pDate_of_birth, pRegistration_date, pLast_login_date, pCompany, pDepartment, pPosition, pHome_phone, pWork_phone, pWork_fax, pMobile, pBlocked, pApproved, pConfirmed, pLocked_by, pLocked_time, pModified_by, pModified_time, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoUser_level`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoUser_level`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `user_level` (`id`, `title`, `label`, `description`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `comments`, `options`)
VALUES (pId, pTitle, pLabel, pDescription, pLocked_by, pLocked_time, pModified_by, pModified_time, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_InsertIntoUser_level_permission`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_InsertIntoUser_level_permission`(
IN pId INT , 
IN pUser_level_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPermission INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN 

INSERT INTO `user_level_permission` (`id`, `user_level_id`, `class_id`, `action_id`, `permission`, `comments`, `options`)
VALUES (pId, pUser_level_id, pClass_id, pAction_id, pPermission, pComments, pOptions);

SELECT last_insert_id();

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`banner`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerArea_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerArea_idColumnById`(
IN pId INT , 
IN pArea_id INT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`banner`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByApproved`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByArea_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByArea_id`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`area_id` = pArea_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByAuthor_id`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByComments`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByDate_added`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByExtension`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`extension` = pExtension;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByFull_path`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`full_path` = pFull_path;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerById`(
IN pId INT , 
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner` 
SET 		`id` = pId, `area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByLabel`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByLink`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByLink`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`link` = pLink;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByLocked_by`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByLocked_time`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByMime_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByMime_type`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`mime_type` = pMime_type;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByModified_by`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByModified_time`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByObject`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByObject`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`object` = pObject;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByOptions`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByPublished`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByPublish_from`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByPublish_to`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerBySize`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByTitle`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerByType`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerByType`(
IN pArea_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pType VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pLink VARCHAR (255), 
IN pObject TEXT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`area_id` = pArea_id, `title` = pTitle, `label` = pLabel, `type` = pType, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `link` = pLink, `object` = pObject, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`type` = pType;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`banner`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerExtensionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerExtensionColumnById`(
IN pId INT , 
IN pExtension VARCHAR (10)
)
BEGIN

UPDATE 		`banner`
SET 		`extension` = pExtension
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerFull_pathColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerFull_pathColumnById`(
IN pId INT , 
IN pFull_path MEDIUMTEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`full_path` = pFull_path
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`banner`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerLinkColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerLinkColumnById`(
IN pId INT , 
IN pLink VARCHAR (255)
)
BEGIN

UPDATE 		`banner`
SET 		`link` = pLink
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`banner`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`banner`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerMime_typeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerMime_typeColumnById`(
IN pId INT , 
IN pMime_type VARCHAR (200)
)
BEGIN

UPDATE 		`banner`
SET 		`mime_type` = pMime_type
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`banner`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`banner`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerObjectColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerObjectColumnById`(
IN pId INT , 
IN pObject TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`object` = pObject
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`banner`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`banner`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`banner`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerSizeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerSizeColumnById`(
IN pId INT , 
IN pSize INT 
)
BEGIN

UPDATE 		`banner`
SET 		`size` = pSize
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`banner`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBannerTypeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBannerTypeColumnById`(
IN pId INT , 
IN pType VARCHAR (255)
)
BEGIN

UPDATE 		`banner`
SET 		`type` = pType
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`banner_area`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByComments`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByLocked_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByLocked_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByModified_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByModified_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByOptions`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByPublish_from`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByPublish_to`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle, `label` = pLabel, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`banner_area`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`banner_area`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`banner_area`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`banner_area`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`banner_area`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`banner_area`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`banner_area`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`banner_area`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateBanner_areaTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateBanner_areaTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`banner_area`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`category`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`category`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByDescription`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByOrder`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByPackage_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByParent_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`parent_id` = pParent_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByShow_in_menu`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`show_in_menu` = pShow_in_menu;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryByType_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pAuthor_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `type_id` = pType_id, `author_id` = pAuthor_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`category`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`category`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`category`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`category`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryPackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryPackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`category`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryParent_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryParent_idColumnById`(
IN pId INT , 
IN pParent_id INT 
)
BEGIN

UPDATE 		`category`
SET 		`parent_id` = pParent_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`category`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryShow_in_menuColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryShow_in_menuColumnById`(
IN pId INT , 
IN pShow_in_menu VARCHAR (255)
)
BEGIN

UPDATE 		`category`
SET 		`show_in_menu` = pShow_in_menu
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`category`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategoryType_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategoryType_idColumnById`(
IN pId INT , 
IN pType_id INT 
)
BEGIN

UPDATE 		`category`
SET 		`type_id` = pType_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByCategory_id`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByComments`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByDate_added`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByDirect_object_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByDirect_object_count`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`direct_object_count` = pDirect_object_count;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoById`(
IN pId INT , 
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info` 
SET 		`id` = pId, `category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByIndirect_object_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByIndirect_object_count`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`indirect_object_count` = pIndirect_object_count;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByLocked_by`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByLocked_time`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByMeta_data`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`meta_data` = pMeta_data;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByMeta_desc`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByMeta_desc`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`meta_desc` = pMeta_desc;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByMeta_key`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByMeta_key`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`meta_key` = pMeta_key;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByMeta_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByMeta_title`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`meta_title` = pMeta_title;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByModified_by`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByModified_time`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByOptions`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByPage_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByPage_title`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`page_title` = pPage_title;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByPublish_from`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoByPublish_to`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoBySubcat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoBySubcat_count`(
IN pCategory_id INT , 
IN pSubcat_count TINYINT , 
IN pDirect_object_count TINYINT , 
IN pIndirect_object_count TINYINT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id, `subcat_count` = pSubcat_count, `direct_object_count` = pDirect_object_count, `indirect_object_count` = pIndirect_object_count, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`subcat_count` = pSubcat_count;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoCategory_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoCategory_idColumnById`(
IN pId INT , 
IN pCategory_id INT 
)
BEGIN

UPDATE 		`category_info`
SET 		`category_id` = pCategory_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`category_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoDirect_object_countColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoDirect_object_countColumnById`(
IN pId INT , 
IN pDirect_object_count TINYINT 
)
BEGIN

UPDATE 		`category_info`
SET 		`direct_object_count` = pDirect_object_count
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoIndirect_object_countColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoIndirect_object_countColumnById`(
IN pId INT , 
IN pIndirect_object_count TINYINT 
)
BEGIN

UPDATE 		`category_info`
SET 		`indirect_object_count` = pIndirect_object_count
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`category_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`category_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoMeta_dataColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoMeta_dataColumnById`(
IN pId INT , 
IN pMeta_data TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`meta_data` = pMeta_data
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoMeta_descColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoMeta_descColumnById`(
IN pId INT , 
IN pMeta_desc TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`meta_desc` = pMeta_desc
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoMeta_keyColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoMeta_keyColumnById`(
IN pId INT , 
IN pMeta_key TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`meta_key` = pMeta_key
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoMeta_titleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoMeta_titleColumnById`(
IN pId INT , 
IN pMeta_title TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`meta_title` = pMeta_title
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`category_info`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`category_info`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoPage_titleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoPage_titleColumnById`(
IN pId INT , 
IN pPage_title TEXT 
)
BEGIN

UPDATE 		`category_info`
SET 		`page_title` = pPage_title
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`category_info`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`category_info`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_infoSubcat_countColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_infoSubcat_countColumnById`(
IN pId INT , 
IN pSubcat_count TINYINT 
)
BEGIN

UPDATE 		`category_info`
SET 		`subcat_count` = pSubcat_count
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`category_type`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByDescription`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByOrder`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByPackage_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByShow_in_menu`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`show_in_menu` = pShow_in_menu;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`category_type`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`category_type`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`category_type`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typePackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typePackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`category_type`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`category_type`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeShow_in_menuColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeShow_in_menuColumnById`(
IN pId INT , 
IN pShow_in_menu VARCHAR (255)
)
BEGIN

UPDATE 		`category_type`
SET 		`show_in_menu` = pShow_in_menu
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_typeTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_typeTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`category_type`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByCategory_type_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByCategory_type_id`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`category_type_id` = pCategory_type_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByComments`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByDate_added`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByDirect_cat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByDirect_cat_count`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`direct_cat_count` = pDirect_cat_count;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoById`(
IN pId INT , 
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info` 
SET 		`id` = pId, `category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByIndirect_cat_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByIndirect_cat_count`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`indirect_cat_count` = pIndirect_cat_count;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByLocked_by`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByLocked_time`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByModified_by`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByModified_time`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoByOptions`(
IN pCategory_type_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pDirect_cat_count TINYINT , 
IN pIndirect_cat_count TINYINT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `direct_cat_count` = pDirect_cat_count, `indirect_cat_count` = pIndirect_cat_count, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoCategory_type_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoCategory_type_idColumnById`(
IN pId INT , 
IN pCategory_type_id INT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`category_type_id` = pCategory_type_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoDirect_cat_countColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoDirect_cat_countColumnById`(
IN pId INT , 
IN pDirect_cat_count TINYINT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`direct_cat_count` = pDirect_cat_count
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoIndirect_cat_countColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoIndirect_cat_countColumnById`(
IN pId INT , 
IN pIndirect_cat_count TINYINT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`indirect_cat_count` = pIndirect_cat_count
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateCategory_type_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateCategory_type_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`category_type_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`locale`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleByApproved`(
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale`
SET 		`locale` = pLocale, `title` = pTitle, `locale_title` = pLocale_title, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleByComments`(
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale`
SET 		`locale` = pLocale, `title` = pTitle, `locale_title` = pLocale_title, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleByDate_added`(
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale`
SET 		`locale` = pLocale, `title` = pTitle, `locale_title` = pLocale_title, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleById`(
IN pId INT , 
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale` 
SET 		`id` = pId, `locale` = pLocale, `title` = pTitle, `locale_title` = pLocale_title, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleByLocale`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleByLocale`(
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale`
SET 		`locale` = pLocale, `title` = pTitle, `locale_title` = pLocale_title, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`locale` = pLocale;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleByLocale_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleByLocale_title`(
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale`
SET 		`locale` = pLocale, `title` = pTitle, `locale_title` = pLocale_title, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`locale_title` = pLocale_title;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleByOrder`(
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale`
SET 		`locale` = pLocale, `title` = pTitle, `locale_title` = pLocale_title, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleByPublished`(
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale`
SET 		`locale` = pLocale, `title` = pTitle, `locale_title` = pLocale_title, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleByTitle`(
IN pLocale VARCHAR (6), 
IN pTitle VARCHAR (255), 
IN pLocale_title VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale`
SET 		`locale` = pLocale, `title` = pTitle, `locale_title` = pLocale_title, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`locale`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`locale`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleLocaleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleLocaleColumnById`(
IN pId INT , 
IN pLocale VARCHAR (6)
)
BEGIN

UPDATE 		`locale`
SET 		`locale` = pLocale
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleLocale_titleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleLocale_titleColumnById`(
IN pId INT , 
IN pLocale_title VARCHAR (255)
)
BEGIN

UPDATE 		`locale`
SET 		`locale_title` = pLocale_title
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`locale`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocalePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocalePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`locale`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateLocaleTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateLocaleTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`locale`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`menu`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuByApproved`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuByDate_added`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuById`(
IN pId INT , 
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu` 
SET 		`id` = pId, `label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuByLabel`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuByLink`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuByLink`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`link` = pLink;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuByOrder`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuByPackage_id`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuByParent_id`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`parent_id` = pParent_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuByPublished`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuBySublevel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuBySublevel`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`sublevel` = pSublevel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuByType_id`(
IN pLabel VARCHAR (255), 
IN pLink MEDIUMTEXT , 
IN pType_id INT , 
IN pParent_id INT , 
IN pPackage_id INT , 
IN pSublevel INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel, `link` = pLink, `type_id` = pType_id, `parent_id` = pParent_id, `package_id` = pPackage_id, `sublevel` = pSublevel, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`menu`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`menu`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuLinkColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuLinkColumnById`(
IN pId INT , 
IN pLink MEDIUMTEXT 
)
BEGIN

UPDATE 		`menu`
SET 		`link` = pLink
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuPackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuPackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`menu`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuParent_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuParent_idColumnById`(
IN pId INT , 
IN pParent_id INT 
)
BEGIN

UPDATE 		`menu`
SET 		`parent_id` = pParent_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`menu`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuSublevelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuSublevelColumnById`(
IN pId INT , 
IN pSublevel INT 
)
BEGIN

UPDATE 		`menu`
SET 		`sublevel` = pSublevel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenuType_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenuType_idColumnById`(
IN pId INT , 
IN pType_id INT 
)
BEGIN

UPDATE 		`menu`
SET 		`type_id` = pType_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByComments`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByDate_added`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoById`(
IN pId INT , 
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info` 
SET 		`id` = pId, `menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByLocked_by`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByLocked_time`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByMenu_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByMenu_id`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`menu_id` = pMenu_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByModified_by`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByModified_time`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByOptions`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByPublish_from`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoByPublish_to`(
IN pMenu_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`menu_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`menu_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoMenu_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoMenu_idColumnById`(
IN pId INT , 
IN pMenu_id INT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`menu_id` = pMenu_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`menu_info`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`menu_info`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_infoPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_infoPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`menu_info`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`menu_type`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByComments`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByDescription`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByLocked_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByLocked_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByModified_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByModified_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByOptions`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByOrder`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByPackage_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`menu_type`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`menu_type`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`menu_type`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`menu_type`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typePackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typePackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`menu_type`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`menu_type`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateMenu_typeTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateMenu_typeTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`menu_type`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`object`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByApproved`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByCategory_id`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByCreated_date`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`created_date` = pCreated_date;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByDate_added`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByGuid_url`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByGuid_url`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`guid_url` = pGuid_url;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object` 
SET 		`id` = pId, `title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByLocale_id`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByMeta_data`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`meta_data` = pMeta_data;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByMeta_desc`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByMeta_desc`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`meta_desc` = pMeta_desc;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByMeta_key`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByMeta_key`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`meta_key` = pMeta_key;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByMeta_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByMeta_title`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`meta_title` = pMeta_title;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByOriginal_author`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByOriginal_author`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`original_author` = pOriginal_author;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByPage_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByPage_title`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`page_title` = pPage_title;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByParent_id`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`parent_id` = pParent_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByPublished`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByShow_in_list`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByShow_in_list`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`show_in_list` = pShow_in_list;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectBySource_id`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByTags`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByTags`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`tags` = pTags;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByTitle`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectByType_id`(
IN pTitle VARCHAR (255), 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pTags TEXT , 
IN pPage_title TEXT , 
IN pMeta_title TEXT , 
IN pMeta_key TEXT , 
IN pMeta_desc TEXT , 
IN pMeta_data TEXT , 
IN pType_id INT , 
IN pCategory_id INT , 
IN pLocale_id INT , 
IN pGuid_url MEDIUMTEXT , 
IN pOriginal_author VARCHAR (255), 
IN pParent_id INT , 
IN pShow_in_list VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `tags` = pTags, `page_title` = pPage_title, `meta_title` = pMeta_title, `meta_key` = pMeta_key, `meta_desc` = pMeta_desc, `meta_data` = pMeta_data, `type_id` = pType_id, `category_id` = pCategory_id, `locale_id` = pLocale_id, `guid_url` = pGuid_url, `original_author` = pOriginal_author, `parent_id` = pParent_id, `show_in_list` = pShow_in_list, `published` = pPublished, `approved` = pApproved
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectCategory_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectCategory_idColumnById`(
IN pId INT , 
IN pCategory_id INT 
)
BEGIN

UPDATE 		`object`
SET 		`category_id` = pCategory_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectCreated_dateColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectCreated_dateColumnById`(
IN pId INT , 
IN pCreated_date DATETIME 
)
BEGIN

UPDATE 		`object`
SET 		`created_date` = pCreated_date
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectGuid_urlColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectGuid_urlColumnById`(
IN pId INT , 
IN pGuid_url MEDIUMTEXT 
)
BEGIN

UPDATE 		`object`
SET 		`guid_url` = pGuid_url
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectLocale_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectLocale_idColumnById`(
IN pId INT , 
IN pLocale_id INT 
)
BEGIN

UPDATE 		`object`
SET 		`locale_id` = pLocale_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectMeta_dataColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectMeta_dataColumnById`(
IN pId INT , 
IN pMeta_data TEXT 
)
BEGIN

UPDATE 		`object`
SET 		`meta_data` = pMeta_data
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectMeta_descColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectMeta_descColumnById`(
IN pId INT , 
IN pMeta_desc TEXT 
)
BEGIN

UPDATE 		`object`
SET 		`meta_desc` = pMeta_desc
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectMeta_keyColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectMeta_keyColumnById`(
IN pId INT , 
IN pMeta_key TEXT 
)
BEGIN

UPDATE 		`object`
SET 		`meta_key` = pMeta_key
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectMeta_titleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectMeta_titleColumnById`(
IN pId INT , 
IN pMeta_title TEXT 
)
BEGIN

UPDATE 		`object`
SET 		`meta_title` = pMeta_title
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectOriginal_authorColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectOriginal_authorColumnById`(
IN pId INT , 
IN pOriginal_author VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`original_author` = pOriginal_author
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectPage_titleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectPage_titleColumnById`(
IN pId INT , 
IN pPage_title TEXT 
)
BEGIN

UPDATE 		`object`
SET 		`page_title` = pPage_title
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectParent_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectParent_idColumnById`(
IN pId INT , 
IN pParent_id INT 
)
BEGIN

UPDATE 		`object`
SET 		`parent_id` = pParent_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectShow_in_listColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectShow_in_listColumnById`(
IN pId INT , 
IN pShow_in_list VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`show_in_list` = pShow_in_list
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectSource_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectSource_idColumnById`(
IN pId INT , 
IN pSource_id INT 
)
BEGIN

UPDATE 		`object`
SET 		`source_id` = pSource_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectTagsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectTagsColumnById`(
IN pId INT , 
IN pTags TEXT 
)
BEGIN

UPDATE 		`object`
SET 		`tags` = pTags
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`object`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObjectType_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObjectType_idColumnById`(
IN pId INT , 
IN pType_id INT 
)
BEGIN

UPDATE 		`object`
SET 		`type_id` = pType_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseAliasColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseAliasColumnById`(
IN pId INT , 
IN pAlias VARCHAR (255)
)
BEGIN

UPDATE 		`object_abuse`
SET 		`alias` = pAlias
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_abuse`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByAlias`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByApproved`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByComments`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByDate_added`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByDescription`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByEmail`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`email` = pEmail;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseById`(
IN pId INT , 
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse` 
SET 		`id` = pId, `object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByIs_abuse`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByIs_abuse`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`is_abuse` = pIs_abuse;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByLocale_id`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByObject_id`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByOptions`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByType_id`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseByUser_id`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pAlias VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pDescription TEXT , 
IN pType_id INT , 
IN pLocale_id INT , 
IN pIs_abuse VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `alias` = pAlias, `email` = pEmail, `description` = pDescription, `type_id` = pType_id, `locale_id` = pLocale_id, `is_abuse` = pIs_abuse, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseEmailColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseEmailColumnById`(
IN pId INT , 
IN pEmail VARCHAR (255)
)
BEGIN

UPDATE 		`object_abuse`
SET 		`email` = pEmail
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseIs_abuseColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseIs_abuseColumnById`(
IN pId INT , 
IN pIs_abuse VARCHAR (255)
)
BEGIN

UPDATE 		`object_abuse`
SET 		`is_abuse` = pIs_abuse
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseLocale_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseLocale_idColumnById`(
IN pId INT , 
IN pLocale_id INT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`locale_id` = pLocale_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseType_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseType_idColumnById`(
IN pId INT , 
IN pType_id INT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`type_id` = pType_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuseUser_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuseUser_idColumnById`(
IN pId INT , 
IN pUser_id INT 
)
BEGIN

UPDATE 		`object_abuse`
SET 		`user_id` = pUser_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByDescription`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByLocked_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByLocked_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByModified_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByModified_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByOrder`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByPackage_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pPackage_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `package_id` = pPackage_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typePackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typePackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_abuse_typeTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_abuse_typeTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`object_abuse_type`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleAliasColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleAliasColumnById`(
IN pId INT , 
IN pAlias VARCHAR (255)
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_article`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`object_article`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByAlias`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByApproved`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByAuthor_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByCategory_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByComments`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByCreated_date`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`created_date` = pCreated_date;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByDate_added`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByFull_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByFull_text`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`full_text` = pFull_text;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleById`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article` 
SET 		`id` = pId, `alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByIntro_text`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByLocked_by`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByLocked_time`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByModified_by`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByModified_time`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByObject_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByOptions`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByOrder`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByPublished`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByPublish_from`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByPublish_to`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleByShow_in_object`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleBySource_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleCategory_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleCategory_idColumnById`(
IN pId INT , 
IN pCategory_id INT 
)
BEGIN

UPDATE 		`object_article`
SET 		`category_id` = pCategory_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleCreated_dateColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleCreated_dateColumnById`(
IN pId INT , 
IN pCreated_date DATETIME 
)
BEGIN

UPDATE 		`object_article`
SET 		`created_date` = pCreated_date
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_article`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleFull_textColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleFull_textColumnById`(
IN pId INT , 
IN pFull_text TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`full_text` = pFull_text
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleIntro_textColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleIntro_textColumnById`(
IN pId INT , 
IN pIntro_text MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`intro_text` = pIntro_text
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_article`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_article`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_article`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_article`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_article`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_article`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_article`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articlePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articlePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_article`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articlePublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articlePublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`object_article`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articlePublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articlePublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`object_article`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleShow_in_objectColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleShow_in_objectColumnById`(
IN pId INT , 
IN pShow_in_object VARCHAR (255)
)
BEGIN

UPDATE 		`object_article`
SET 		`show_in_object` = pShow_in_object
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_articleSource_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_articleSource_idColumnById`(
IN pId INT , 
IN pSource_id INT 
)
BEGIN

UPDATE 		`object_article`
SET 		`source_id` = pSource_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_comment`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByApproved`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByComments`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByContent`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByContent`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`content` = pContent;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByCountry_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByCountry_id`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`country_id` = pCountry_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByDate_added`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByEmail`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`email` = pEmail;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentById`(
IN pId INT , 
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment` 
SET 		`id` = pId, `object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByLocale_id`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByObject_id`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByOptions`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByPublished`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByTitle`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByUser_id`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentByWebpage`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentByWebpage`(
IN pObject_id INT , 
IN pUser_id VARCHAR (100), 
IN pTitle VARCHAR (150), 
IN pContent TEXT , 
IN pEmail VARCHAR (150), 
IN pWebpage MEDIUMTEXT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `title` = pTitle, `content` = pContent, `email` = pEmail, `webpage` = pWebpage, `locale_id` = pLocale_id, `country_id` = pCountry_id, `published` = pPublished, `approved` = pApproved, `comments` = pComments, `options` = pOptions
WHERE 		`webpage` = pWebpage;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentContentColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentContentColumnById`(
IN pId INT , 
IN pContent TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`content` = pContent
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentCountry_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentCountry_idColumnById`(
IN pId INT , 
IN pCountry_id INT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`country_id` = pCountry_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_comment`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentEmailColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentEmailColumnById`(
IN pId INT , 
IN pEmail VARCHAR (150)
)
BEGIN

UPDATE 		`object_comment`
SET 		`email` = pEmail
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentLocale_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentLocale_idColumnById`(
IN pId INT , 
IN pLocale_id INT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`locale_id` = pLocale_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_comment`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (150)
)
BEGIN

UPDATE 		`object_comment`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentUser_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentUser_idColumnById`(
IN pId INT , 
IN pUser_id VARCHAR (100)
)
BEGIN

UPDATE 		`object_comment`
SET 		`user_id` = pUser_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_commentWebpageColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_commentWebpageColumnById`(
IN pId INT , 
IN pWebpage MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_comment`
SET 		`webpage` = pWebpage
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_directory`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id VARCHAR (255)
)
BEGIN

UPDATE 		`object_directory`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByApproved`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByAuthor_id`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByCategory_id`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByComments`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByDate_added`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByDescription`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByFiles_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByFiles_count`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`files_count` = pFiles_count;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByFull_path`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`full_path` = pFull_path;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryById`(
IN pId INT , 
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory` 
SET 		`id` = pId, `name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByLabel`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByLocked_by`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByLocked_time`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByModified_by`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByModified_time`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByName`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`name` = pName;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByObject_id`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByOptions`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByParent_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByParent_id`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`parent_id` = pParent_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByPublished`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryByShow_in_object`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryBySize`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pParent_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pSize INT , 
IN pFiles_count INT , 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `parent_id` = pParent_id, `author_id` = pAuthor_id, `size` = pSize, `files_count` = pFiles_count, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryCategory_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryCategory_idColumnById`(
IN pId INT , 
IN pCategory_id INT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`category_id` = pCategory_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_directory`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryFiles_countColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryFiles_countColumnById`(
IN pId INT , 
IN pFiles_count INT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`files_count` = pFiles_count
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryFull_pathColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryFull_pathColumnById`(
IN pId INT , 
IN pFull_path MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`full_path` = pFull_path
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`object_directory`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_directory`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_directory`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryNameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryNameColumnById`(
IN pId INT , 
IN pName VARCHAR (255)
)
BEGIN

UPDATE 		`object_directory`
SET 		`name` = pName
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryParent_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryParent_idColumnById`(
IN pId INT , 
IN pParent_id INT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`parent_id` = pParent_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_directory`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directoryShow_in_objectColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directoryShow_in_objectColumnById`(
IN pId INT , 
IN pShow_in_object VARCHAR (255)
)
BEGIN

UPDATE 		`object_directory`
SET 		`show_in_object` = pShow_in_object
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_directorySizeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_directorySizeColumnById`(
IN pId INT , 
IN pSize INT 
)
BEGIN

UPDATE 		`object_directory`
SET 		`size` = pSize
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_file`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id VARCHAR (255)
)
BEGIN

UPDATE 		`object_file`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByApproved`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByAuthor_id`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByCategory_id`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByComments`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByDate_added`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByDescription`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByExtension`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`extension` = pExtension;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByFolder_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByFolder_id`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`folder_id` = pFolder_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByFull_path`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByFull_path`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`full_path` = pFull_path;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileById`(
IN pId INT , 
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file` 
SET 		`id` = pId, `name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByLabel`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByLocked_by`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByLocked_time`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByMime_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByMime_type`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`mime_type` = pMime_type;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByModified_by`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByModified_time`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByName`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`name` = pName;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByObject_id`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByOptions`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByPublished`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileByShow_in_object`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileBySize`(
IN pName VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pFolder_id INT , 
IN pAuthor_id VARCHAR (255), 
IN pMime_type VARCHAR (200), 
IN pSize INT , 
IN pExtension VARCHAR (10), 
IN pFull_path MEDIUMTEXT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName, `label` = pLabel, `description` = pDescription, `folder_id` = pFolder_id, `author_id` = pAuthor_id, `mime_type` = pMime_type, `size` = pSize, `extension` = pExtension, `full_path` = pFull_path, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileCategory_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileCategory_idColumnById`(
IN pId INT , 
IN pCategory_id INT 
)
BEGIN

UPDATE 		`object_file`
SET 		`category_id` = pCategory_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_file`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileExtensionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileExtensionColumnById`(
IN pId INT , 
IN pExtension VARCHAR (10)
)
BEGIN

UPDATE 		`object_file`
SET 		`extension` = pExtension
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileFolder_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileFolder_idColumnById`(
IN pId INT , 
IN pFolder_id INT 
)
BEGIN

UPDATE 		`object_file`
SET 		`folder_id` = pFolder_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileFull_pathColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileFull_pathColumnById`(
IN pId INT , 
IN pFull_path MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`full_path` = pFull_path
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`object_file`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_file`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_file`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileMime_typeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileMime_typeColumnById`(
IN pId INT , 
IN pMime_type VARCHAR (200)
)
BEGIN

UPDATE 		`object_file`
SET 		`mime_type` = pMime_type
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_file`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_file`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileNameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileNameColumnById`(
IN pId INT , 
IN pName VARCHAR (255)
)
BEGIN

UPDATE 		`object_file`
SET 		`name` = pName
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_file`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_file`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_filePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_filePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_file`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileShow_in_objectColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileShow_in_objectColumnById`(
IN pId INT , 
IN pShow_in_object VARCHAR (255)
)
BEGIN

UPDATE 		`object_file`
SET 		`show_in_object` = pShow_in_object
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_fileSizeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_fileSizeColumnById`(
IN pId INT , 
IN pSize INT 
)
BEGIN

UPDATE 		`object_file`
SET 		`size` = pSize
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByComments`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByDate_added`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoById`(
IN pId INT , 
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info` 
SET 		`id` = pId, `object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByLayout_id`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`layout_id` = pLayout_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByObject_id`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByOptions`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoBySkin_id`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`skin_id` = pSkin_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByTemplate_id`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`template_id` = pTemplate_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByTheme_publish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByTheme_publish_from`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`theme_publish_from` = pTheme_publish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByTheme_publish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByTheme_publish_to`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`theme_publish_to` = pTheme_publish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByTotal_comments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByTotal_comments`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`total_comments` = pTotal_comments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByTotal_rating`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByTotal_rating`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`total_rating` = pTotal_rating;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoByTotal_views`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoByTotal_views`(
IN pObject_id INT , 
IN pTotal_views INT , 
IN pTotal_comments INT , 
IN pTotal_rating INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pTheme_publish_from DATETIME , 
IN pTheme_publish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id, `total_views` = pTotal_views, `total_comments` = pTotal_comments, `total_rating` = pTotal_rating, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `theme_publish_from` = pTheme_publish_from, `theme_publish_to` = pTheme_publish_to, `comments` = pComments, `options` = pOptions
WHERE 		`total_views` = pTotal_views;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoLayout_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoLayout_idColumnById`(
IN pId INT , 
IN pLayout_id INT 
)
BEGIN

UPDATE 		`object_info`
SET 		`layout_id` = pLayout_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_info`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoSkin_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoSkin_idColumnById`(
IN pId INT , 
IN pSkin_id INT 
)
BEGIN

UPDATE 		`object_info`
SET 		`skin_id` = pSkin_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoTemplate_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoTemplate_idColumnById`(
IN pId INT , 
IN pTemplate_id INT 
)
BEGIN

UPDATE 		`object_info`
SET 		`template_id` = pTemplate_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoTheme_publish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoTheme_publish_fromColumnById`(
IN pId INT , 
IN pTheme_publish_from DATETIME 
)
BEGIN

UPDATE 		`object_info`
SET 		`theme_publish_from` = pTheme_publish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoTheme_publish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoTheme_publish_toColumnById`(
IN pId INT , 
IN pTheme_publish_to DATETIME 
)
BEGIN

UPDATE 		`object_info`
SET 		`theme_publish_to` = pTheme_publish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoTotal_commentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoTotal_commentsColumnById`(
IN pId INT , 
IN pTotal_comments INT 
)
BEGIN

UPDATE 		`object_info`
SET 		`total_comments` = pTotal_comments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoTotal_ratingColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoTotal_ratingColumnById`(
IN pId INT , 
IN pTotal_rating INT 
)
BEGIN

UPDATE 		`object_info`
SET 		`total_rating` = pTotal_rating
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_infoTotal_viewsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_infoTotal_viewsColumnById`(
IN pId INT , 
IN pTotal_views INT 
)
BEGIN

UPDATE 		`object_info`
SET 		`total_views` = pTotal_views
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoAliasColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoAliasColumnById`(
IN pId INT , 
IN pAlias VARCHAR (255)
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_photo`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByAlias`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByApproved`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByAuthor_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByCategory_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByComments`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByDate_added`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByExtension`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`extension` = pExtension;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByHeight`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByHeight`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`height` = pHeight;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoById`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo` 
SET 		`id` = pId, `alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByIntro_text`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByLocked_by`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByLocked_time`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByMeta_data`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`meta_data` = pMeta_data;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByModified_by`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByModified_time`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByObject_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByOptions`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByOrder`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByPublished`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByPublish_from`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByPublish_to`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByShow_in_object`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoBySize`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoBySource_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByTaken_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByTaken_date`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`taken_date` = pTaken_date;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByTaken_location`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByTaken_location`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`taken_location` = pTaken_location;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoByWidth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoByWidth`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (32), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`width` = pWidth;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoCategory_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoCategory_idColumnById`(
IN pId INT , 
IN pCategory_id INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`category_id` = pCategory_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_photo`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoExtensionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoExtensionColumnById`(
IN pId INT , 
IN pExtension VARCHAR (32)
)
BEGIN

UPDATE 		`object_photo`
SET 		`extension` = pExtension
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoHeightColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoHeightColumnById`(
IN pId INT , 
IN pHeight INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`height` = pHeight
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoIntro_textColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoIntro_textColumnById`(
IN pId INT , 
IN pIntro_text MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`intro_text` = pIntro_text
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_photo`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoMeta_dataColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoMeta_dataColumnById`(
IN pId INT , 
IN pMeta_data TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`meta_data` = pMeta_data
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_photo`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_photo`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`object_photo`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`object_photo`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoShow_in_objectColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoShow_in_objectColumnById`(
IN pId INT , 
IN pShow_in_object VARCHAR (255)
)
BEGIN

UPDATE 		`object_photo`
SET 		`show_in_object` = pShow_in_object
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoSizeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoSizeColumnById`(
IN pId INT , 
IN pSize INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`size` = pSize
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoSource_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoSource_idColumnById`(
IN pId INT , 
IN pSource_id INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`source_id` = pSource_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoTaken_dateColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoTaken_dateColumnById`(
IN pId INT , 
IN pTaken_date DATETIME 
)
BEGIN

UPDATE 		`object_photo`
SET 		`taken_date` = pTaken_date
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoTaken_locationColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoTaken_locationColumnById`(
IN pId INT , 
IN pTaken_location VARCHAR (255)
)
BEGIN

UPDATE 		`object_photo`
SET 		`taken_location` = pTaken_location
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_photoWidthColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_photoWidthColumnById`(
IN pId INT , 
IN pWidth INT 
)
BEGIN

UPDATE 		`object_photo`
SET 		`width` = pWidth
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingByComments`(
IN pLast_ip VARCHAR (50), 
IN pObject_id INT , 
IN pRating_total INT , 
IN pRating_count INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`last_ip` = pLast_ip, `object_id` = pObject_id, `rating_total` = pRating_total, `rating_count` = pRating_count, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingById`(
IN pId INT , 
IN pLast_ip VARCHAR (50), 
IN pObject_id INT , 
IN pRating_total INT , 
IN pRating_count INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_rating` 
SET 		`id` = pId, `last_ip` = pLast_ip, `object_id` = pObject_id, `rating_total` = pRating_total, `rating_count` = pRating_count, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingByLast_ip`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingByLast_ip`(
IN pLast_ip VARCHAR (50), 
IN pObject_id INT , 
IN pRating_total INT , 
IN pRating_count INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`last_ip` = pLast_ip, `object_id` = pObject_id, `rating_total` = pRating_total, `rating_count` = pRating_count, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`last_ip` = pLast_ip;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingByObject_id`(
IN pLast_ip VARCHAR (50), 
IN pObject_id INT , 
IN pRating_total INT , 
IN pRating_count INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`last_ip` = pLast_ip, `object_id` = pObject_id, `rating_total` = pRating_total, `rating_count` = pRating_count, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingByOptions`(
IN pLast_ip VARCHAR (50), 
IN pObject_id INT , 
IN pRating_total INT , 
IN pRating_count INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`last_ip` = pLast_ip, `object_id` = pObject_id, `rating_total` = pRating_total, `rating_count` = pRating_count, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingByRating_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingByRating_count`(
IN pLast_ip VARCHAR (50), 
IN pObject_id INT , 
IN pRating_total INT , 
IN pRating_count INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`last_ip` = pLast_ip, `object_id` = pObject_id, `rating_total` = pRating_total, `rating_count` = pRating_count, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`rating_count` = pRating_count;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingByRating_total`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingByRating_total`(
IN pLast_ip VARCHAR (50), 
IN pObject_id INT , 
IN pRating_total INT , 
IN pRating_count INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`last_ip` = pLast_ip, `object_id` = pObject_id, `rating_total` = pRating_total, `rating_count` = pRating_count, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`rating_total` = pRating_total;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingByUser_id`(
IN pLast_ip VARCHAR (50), 
IN pObject_id INT , 
IN pRating_total INT , 
IN pRating_count INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`last_ip` = pLast_ip, `object_id` = pObject_id, `rating_total` = pRating_total, `rating_count` = pRating_count, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingLast_ipColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingLast_ipColumnById`(
IN pId INT , 
IN pLast_ip VARCHAR (50)
)
BEGIN

UPDATE 		`object_rating`
SET 		`last_ip` = pLast_ip
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingRating_countColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingRating_countColumnById`(
IN pId INT , 
IN pRating_count INT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`rating_count` = pRating_count
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingRating_totalColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingRating_totalColumnById`(
IN pId INT , 
IN pRating_total INT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`rating_total` = pRating_total
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_ratingUser_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_ratingUser_idColumnById`(
IN pId INT , 
IN pUser_id INT 
)
BEGIN

UPDATE 		`object_rating`
SET 		`user_id` = pUser_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_source`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByApproved`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByAuthor_id`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByCountry_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByCountry_id`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`country_id` = pCountry_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByDate_added`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByDescription`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceById`(
IN pId INT , 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source` 
SET 		`id` = pId, `name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByLocale_id`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByName`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`name` = pName;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByOrder`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByPackage_id`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByPublished`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceBySource_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceBySource_type`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`source_type` = pSource_type;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByTime_delay`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByTime_delay`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`time_delay` = pTime_delay;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceByUrl`(
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pSource_type VARCHAR (32), 
IN pUrl MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pLocale_id INT , 
IN pCountry_id INT , 
IN pPackage_id INT , 
IN pTime_delay INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName, `description` = pDescription, `source_type` = pSource_type, `url` = pUrl, `author_id` = pAuthor_id, `locale_id` = pLocale_id, `country_id` = pCountry_id, `package_id` = pPackage_id, `time_delay` = pTime_delay, `published` = pPublished, `approved` = pApproved, `order` = pOrder
WHERE 		`url` = pUrl;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceCountry_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceCountry_idColumnById`(
IN pId INT , 
IN pCountry_id INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`country_id` = pCountry_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_source`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`object_source`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceLocale_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceLocale_idColumnById`(
IN pId INT , 
IN pLocale_id INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`locale_id` = pLocale_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceNameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceNameColumnById`(
IN pId INT , 
IN pName VARCHAR (255)
)
BEGIN

UPDATE 		`object_source`
SET 		`name` = pName
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourcePackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourcePackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourcePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourcePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_source`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceSource_typeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceSource_typeColumnById`(
IN pId INT , 
IN pSource_type VARCHAR (32)
)
BEGIN

UPDATE 		`object_source`
SET 		`source_type` = pSource_type
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceTime_delayColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceTime_delayColumnById`(
IN pId INT , 
IN pTime_delay INT 
)
BEGIN

UPDATE 		`object_source`
SET 		`time_delay` = pTime_delay
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_sourceUrlColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_sourceUrlColumnById`(
IN pId INT , 
IN pUrl MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_source`
SET 		`url` = pUrl
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoByComments`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoByDate_added`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoById`(
IN pId INT , 
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info` 
SET 		`id` = pId, `source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoByLocked_by`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoByLocked_time`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoByModified_by`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoByModified_time`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoByOptions`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoByPublish_from`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoByPublish_to`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoBySource_id`(
IN pSource_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_source_infoSource_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_source_infoSource_idColumnById`(
IN pId INT , 
IN pSource_id INT 
)
BEGIN

UPDATE 		`object_source_info`
SET 		`source_id` = pSource_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticAliasColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticAliasColumnById`(
IN pId INT , 
IN pAlias VARCHAR (255)
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_static`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`object_static`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByAlias`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByApproved`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByAuthor_id`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByCategory_id`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByComments`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByCreated_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByCreated_date`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`created_date` = pCreated_date;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByDate_added`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByFull_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByFull_text`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`full_text` = pFull_text;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticById`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static` 
SET 		`id` = pId, `alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByIntro_text`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByLocked_by`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByLocked_time`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByModified_by`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByModified_time`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByObject_id`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByOptions`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByPublished`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByPublish_from`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByPublish_to`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticByUrl`(
IN pAlias VARCHAR (255), 
IN pUrl MEDIUMTEXT , 
IN pIntro_text TEXT , 
IN pFull_text TEXT , 
IN pCreated_date DATETIME , 
IN pAuthor_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`alias` = pAlias, `url` = pUrl, `intro_text` = pIntro_text, `full_text` = pFull_text, `created_date` = pCreated_date, `author_id` = pAuthor_id, `object_id` = pObject_id, `category_id` = pCategory_id, `published` = pPublished, `approved` = pApproved, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`url` = pUrl;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticCategory_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticCategory_idColumnById`(
IN pId INT , 
IN pCategory_id INT 
)
BEGIN

UPDATE 		`object_static`
SET 		`category_id` = pCategory_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticCreated_dateColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticCreated_dateColumnById`(
IN pId INT , 
IN pCreated_date DATETIME 
)
BEGIN

UPDATE 		`object_static`
SET 		`created_date` = pCreated_date
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_static`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticFull_textColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticFull_textColumnById`(
IN pId INT , 
IN pFull_text TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`full_text` = pFull_text
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticIntro_textColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticIntro_textColumnById`(
IN pId INT , 
IN pIntro_text TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`intro_text` = pIntro_text
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_static`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_static`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_static`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_static`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_static`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_static`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`object_static`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`object_static`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_staticUrlColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_staticUrlColumnById`(
IN pId INT , 
IN pUrl MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_static`
SET 		`url` = pUrl
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_tag`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagByApproved`(
IN pTitle VARCHAR (255), 
IN pObject_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`title` = pTitle, `object_id` = pObject_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagByComments`(
IN pTitle VARCHAR (255), 
IN pObject_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`title` = pTitle, `object_id` = pObject_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagByDate_added`(
IN pTitle VARCHAR (255), 
IN pObject_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`title` = pTitle, `object_id` = pObject_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pObject_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_tag` 
SET 		`id` = pId, `title` = pTitle, `object_id` = pObject_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagByObject_id`(
IN pTitle VARCHAR (255), 
IN pObject_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`title` = pTitle, `object_id` = pObject_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagByOrder`(
IN pTitle VARCHAR (255), 
IN pObject_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`title` = pTitle, `object_id` = pObject_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagByPublished`(
IN pTitle VARCHAR (255), 
IN pObject_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`title` = pTitle, `object_id` = pObject_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagByTitle`(
IN pTitle VARCHAR (255), 
IN pObject_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`title` = pTitle, `object_id` = pObject_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_tag`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_tag`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_tag`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_tagTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_tagTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`object_tag`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`object_type`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `published` = pPublished, `approved` = pApproved
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `published` = pPublished, `approved` = pApproved
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `published` = pPublished, `approved` = pApproved
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeByDescription`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `published` = pPublished, `approved` = pApproved
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `published` = pPublished, `approved` = pApproved 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `published` = pPublished, `approved` = pApproved
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeByPackage_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `published` = pPublished, `approved` = pApproved
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `published` = pPublished, `approved` = pApproved
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPackage_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `package_id` = pPackage_id, `published` = pPublished, `approved` = pApproved
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_type`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`object_type`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typePackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typePackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`object_type`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_typeTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_typeTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`object_type`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByComments`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByDate_added`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoById`(
IN pId INT , 
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info` 
SET 		`id` = pId, `type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByLocked_by`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByLocked_time`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByModified_by`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByModified_time`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByOptions`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByPublish_from`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByPublish_to`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoByType_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoByType_id`(
IN pType_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`type_id` = pType_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_type_infoType_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_type_infoType_idColumnById`(
IN pId INT , 
IN pType_id INT 
)
BEGIN

UPDATE 		`object_type_info`
SET 		`type_id` = pType_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlAliasColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlAliasColumnById`(
IN pId INT , 
IN pAlias VARCHAR (255)
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_url`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`object_url`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByAlias`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByApproved`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByAuthor_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByCategory_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByComments`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByDate_added`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlById`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url` 
SET 		`id` = pId, `alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByIntro_text`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByLocked_by`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByLocked_time`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByModified_by`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByModified_time`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByObject_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByOptions`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByOrder`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByPublished`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByPublish_from`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByPublish_to`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByShow_in_object`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlBySource_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByStyle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByStyle`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`style` = pStyle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByUrl`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByUrl`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`url` = pUrl;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlByUrl_type`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlByUrl_type`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pUrl MEDIUMTEXT , 
IN pStyle MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pUrl_type VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `url` = pUrl, `style` = pStyle, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `url_type` = pUrl_type, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`url_type` = pUrl_type;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlCategory_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlCategory_idColumnById`(
IN pId INT , 
IN pCategory_id INT 
)
BEGIN

UPDATE 		`object_url`
SET 		`category_id` = pCategory_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_url`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlIntro_textColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlIntro_textColumnById`(
IN pId INT , 
IN pIntro_text MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`intro_text` = pIntro_text
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_url`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_url`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_url`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_url`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_url`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_url`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_url`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`object_url`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`object_url`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlShow_in_objectColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlShow_in_objectColumnById`(
IN pId INT , 
IN pShow_in_object VARCHAR (255)
)
BEGIN

UPDATE 		`object_url`
SET 		`show_in_object` = pShow_in_object
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlSource_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlSource_idColumnById`(
IN pId INT , 
IN pSource_id INT 
)
BEGIN

UPDATE 		`object_url`
SET 		`source_id` = pSource_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlStyleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlStyleColumnById`(
IN pId INT , 
IN pStyle MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`style` = pStyle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlUrlColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlUrlColumnById`(
IN pId INT , 
IN pUrl MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_url`
SET 		`url` = pUrl
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_urlUrl_typeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_urlUrl_typeColumnById`(
IN pId INT , 
IN pUrl_type VARCHAR (255)
)
BEGIN

UPDATE 		`object_url`
SET 		`url_type` = pUrl_type
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteByComments`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteByDate_added`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteById`(
IN pId INT , 
IN pObject_id INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_user_favourite` 
SET 		`id` = pId, `object_id` = pObject_id, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteByObject_id`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteByOptions`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteByUser_id`(
IN pObject_id INT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`object_id` = pObject_id, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_user_favouriteUser_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_user_favouriteUser_idColumnById`(
IN pId INT , 
IN pUser_id INT 
)
BEGIN

UPDATE 		`object_user_favourite`
SET 		`user_id` = pUser_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoAliasColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoAliasColumnById`(
IN pId INT , 
IN pAlias VARCHAR (255)
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`object_video`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByAlias`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByAlias`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`alias` = pAlias;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByApproved`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByAuthor_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByCategory_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByCategory_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`category_id` = pCategory_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByComments`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByDate_added`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByEncoded`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByEncoded`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`encoded` = pEncoded;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByExtension`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByExtension`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`extension` = pExtension;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByHeight`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByHeight`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`height` = pHeight;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoById`(
IN pId INT , 
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video` 
SET 		`id` = pId, `alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByIntro_text`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByIntro_text`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`intro_text` = pIntro_text;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByLocked_by`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByLocked_time`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByMeta_data`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByMeta_data`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`meta_data` = pMeta_data;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByModified_by`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByModified_time`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByObject_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByObject_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`object_id` = pObject_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByOptions`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByOrder`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByPublished`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByPublish_from`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByPublish_to`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByShow_in_object`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByShow_in_object`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`show_in_object` = pShow_in_object;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoBySize`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoBySize`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`size` = pSize;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoBySource_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoBySource_id`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`source_id` = pSource_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByTaken_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByTaken_date`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`taken_date` = pTaken_date;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByTaken_location`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByTaken_location`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`taken_location` = pTaken_location;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoByWidth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoByWidth`(
IN pAlias VARCHAR (255), 
IN pIntro_text MEDIUMTEXT , 
IN pAuthor_id INT , 
IN pSource_id INT , 
IN pObject_id INT , 
IN pCategory_id INT , 
IN pSize INT , 
IN pHeight INT , 
IN pWidth INT , 
IN pExtension VARCHAR (5), 
IN pTaken_date DATETIME , 
IN pTaken_location VARCHAR (255), 
IN pMeta_data TEXT , 
IN pShow_in_object VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pEncoded VARCHAR (255), 
IN pOrder INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`alias` = pAlias, `intro_text` = pIntro_text, `author_id` = pAuthor_id, `source_id` = pSource_id, `object_id` = pObject_id, `category_id` = pCategory_id, `size` = pSize, `height` = pHeight, `width` = pWidth, `extension` = pExtension, `taken_date` = pTaken_date, `taken_location` = pTaken_location, `meta_data` = pMeta_data, `show_in_object` = pShow_in_object, `published` = pPublished, `approved` = pApproved, `encoded` = pEncoded, `order` = pOrder, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`width` = pWidth;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoCategory_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoCategory_idColumnById`(
IN pId INT , 
IN pCategory_id INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`category_id` = pCategory_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`object_video`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoEncodedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoEncodedColumnById`(
IN pId INT , 
IN pEncoded VARCHAR (255)
)
BEGIN

UPDATE 		`object_video`
SET 		`encoded` = pEncoded
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoExtensionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoExtensionColumnById`(
IN pId INT , 
IN pExtension VARCHAR (5)
)
BEGIN

UPDATE 		`object_video`
SET 		`extension` = pExtension
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoHeightColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoHeightColumnById`(
IN pId INT , 
IN pHeight INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`height` = pHeight
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoIntro_textColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoIntro_textColumnById`(
IN pId INT , 
IN pIntro_text MEDIUMTEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`intro_text` = pIntro_text
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`object_video`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoMeta_dataColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoMeta_dataColumnById`(
IN pId INT , 
IN pMeta_data TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`meta_data` = pMeta_data
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`object_video`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoObject_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoObject_idColumnById`(
IN pId INT , 
IN pObject_id INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`object_id` = pObject_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`object_video`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`object_video`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`object_video`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`object_video`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoShow_in_objectColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoShow_in_objectColumnById`(
IN pId INT , 
IN pShow_in_object VARCHAR (255)
)
BEGIN

UPDATE 		`object_video`
SET 		`show_in_object` = pShow_in_object
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoSizeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoSizeColumnById`(
IN pId INT , 
IN pSize INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`size` = pSize
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoSource_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoSource_idColumnById`(
IN pId INT , 
IN pSource_id INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`source_id` = pSource_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoTaken_dateColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoTaken_dateColumnById`(
IN pId INT , 
IN pTaken_date DATETIME 
)
BEGIN

UPDATE 		`object_video`
SET 		`taken_date` = pTaken_date
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoTaken_locationColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoTaken_locationColumnById`(
IN pId INT , 
IN pTaken_location VARCHAR (255)
)
BEGIN

UPDATE 		`object_video`
SET 		`taken_location` = pTaken_location
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateObject_videoWidthColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateObject_videoWidthColumnById`(
IN pId INT , 
IN pWidth INT 
)
BEGIN

UPDATE 		`object_video`
SET 		`width` = pWidth
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`package`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package`
SET 		`title` = pTitle, `label` = pLabel, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `type` = pType, `prerequisite_id` = pPrerequisite_id
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package`
SET 		`title` = pTitle, `label` = pLabel, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `type` = pType, `prerequisite_id` = pPrerequisite_id
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `type` = pType, `prerequisite_id` = pPrerequisite_id 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package`
SET 		`title` = pTitle, `label` = pLabel, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `type` = pType, `prerequisite_id` = pPrerequisite_id
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageByPrerequisite_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageByPrerequisite_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package`
SET 		`title` = pTitle, `label` = pLabel, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `type` = pType, `prerequisite_id` = pPrerequisite_id
WHERE 		`prerequisite_id` = pPrerequisite_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package`
SET 		`title` = pTitle, `label` = pLabel, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `type` = pType, `prerequisite_id` = pPrerequisite_id
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageByShow_in_menu`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageByShow_in_menu`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package`
SET 		`title` = pTitle, `label` = pLabel, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `type` = pType, `prerequisite_id` = pPrerequisite_id
WHERE 		`show_in_menu` = pShow_in_menu;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package`
SET 		`title` = pTitle, `label` = pLabel, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `type` = pType, `prerequisite_id` = pPrerequisite_id
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageByType`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageByType`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pShow_in_menu VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pType VARCHAR (255), 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package`
SET 		`title` = pTitle, `label` = pLabel, `show_in_menu` = pShow_in_menu, `published` = pPublished, `approved` = pApproved, `type` = pType, `prerequisite_id` = pPrerequisite_id
WHERE 		`type` = pType;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`package`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`package`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackagePrerequisite_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackagePrerequisite_idColumnById`(
IN pId INT , 
IN pPrerequisite_id INT 
)
BEGIN

UPDATE 		`package`
SET 		`prerequisite_id` = pPrerequisite_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackagePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackagePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`package`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageShow_in_menuColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageShow_in_menuColumnById`(
IN pId INT , 
IN pShow_in_menu VARCHAR (255)
)
BEGIN

UPDATE 		`package`
SET 		`show_in_menu` = pShow_in_menu
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`package`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackageTypeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackageTypeColumnById`(
IN pId INT , 
IN pType VARCHAR (255)
)
BEGIN

UPDATE 		`package`
SET 		`type` = pType
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionAction_descriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionAction_descriptionColumnById`(
IN pId INT , 
IN pAction_description TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_description` = pAction_description
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionAction_nameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionAction_nameColumnById`(
IN pId INT , 
IN pAction_name VARCHAR (255)
)
BEGIN

UPDATE 		`package_action`
SET 		`action_name` = pAction_name
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionAction_titleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionAction_titleColumnById`(
IN pId INT , 
IN pAction_title VARCHAR (255)
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionByAction_description`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionByAction_description`(
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions
WHERE 		`action_description` = pAction_description;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionByAction_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionByAction_name`(
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions
WHERE 		`action_name` = pAction_name;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionByAction_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionByAction_title`(
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions
WHERE 		`action_title` = pAction_title;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionByClass_id`(
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions
WHERE 		`class_id` = pClass_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionByComments`(
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionByDate_added`(
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionByFile_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionByFile_name`(
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions
WHERE 		`file_name` = pFile_name;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionById`(
IN pId INT , 
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action` 
SET 		`id` = pId, `action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionByOptions`(
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionByPackage_id`(
IN pAction_title VARCHAR (255), 
IN pAction_name VARCHAR (255), 
IN pAction_description TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`action_title` = pAction_title, `action_name` = pAction_name, `action_description` = pAction_description, `file_name` = pFile_name, `package_id` = pPackage_id, `class_id` = pClass_id, `comments` = pComments, `options` = pOptions
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionClass_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionClass_idColumnById`(
IN pId INT , 
IN pClass_id INT 
)
BEGIN

UPDATE 		`package_action`
SET 		`class_id` = pClass_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`package_action`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionFile_nameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionFile_nameColumnById`(
IN pId INT , 
IN pFile_name VARCHAR (255)
)
BEGIN

UPDATE 		`package_action`
SET 		`file_name` = pFile_name
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_action`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_actionPackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_actionPackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`package_action`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classByComments`(
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`title` = pTitle, `name` = pName, `description` = pDescription, `file_name` = pFile_name, `package_id` = pPackage_id, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classByDate_added`(
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`title` = pTitle, `name` = pName, `description` = pDescription, `file_name` = pFile_name, `package_id` = pPackage_id, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classByDescription`(
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`title` = pTitle, `name` = pName, `description` = pDescription, `file_name` = pFile_name, `package_id` = pPackage_id, `comments` = pComments, `options` = pOptions
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classByFile_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classByFile_name`(
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`title` = pTitle, `name` = pName, `description` = pDescription, `file_name` = pFile_name, `package_id` = pPackage_id, `comments` = pComments, `options` = pOptions
WHERE 		`file_name` = pFile_name;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class` 
SET 		`id` = pId, `title` = pTitle, `name` = pName, `description` = pDescription, `file_name` = pFile_name, `package_id` = pPackage_id, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classByName`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classByName`(
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`title` = pTitle, `name` = pName, `description` = pDescription, `file_name` = pFile_name, `package_id` = pPackage_id, `comments` = pComments, `options` = pOptions
WHERE 		`name` = pName;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classByOptions`(
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`title` = pTitle, `name` = pName, `description` = pDescription, `file_name` = pFile_name, `package_id` = pPackage_id, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classByPackage_id`(
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`title` = pTitle, `name` = pName, `description` = pDescription, `file_name` = pFile_name, `package_id` = pPackage_id, `comments` = pComments, `options` = pOptions
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classByTitle`(
IN pTitle VARCHAR (255), 
IN pName VARCHAR (255), 
IN pDescription TEXT , 
IN pFile_name VARCHAR (255), 
IN pPackage_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`title` = pTitle, `name` = pName, `description` = pDescription, `file_name` = pFile_name, `package_id` = pPackage_id, `comments` = pComments, `options` = pOptions
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`package_class`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classFile_nameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classFile_nameColumnById`(
IN pId INT , 
IN pFile_name VARCHAR (255)
)
BEGIN

UPDATE 		`package_class`
SET 		`file_name` = pFile_name
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classNameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classNameColumnById`(
IN pId INT , 
IN pName VARCHAR (255)
)
BEGIN

UPDATE 		`package_class`
SET 		`name` = pName
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_class`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classPackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classPackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`package_class`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_classTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_classTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`package_class`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoByComments`(
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoByDate_added`(
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoByDefault_action_name`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoByDefault_action_name`(
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions
WHERE 		`default_action_name` = pDefault_action_name;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoByDefault_action_title`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoByDefault_action_title`(
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions
WHERE 		`default_action_title` = pDefault_action_title;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoById`(
IN pId INT , 
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info` 
SET 		`id` = pId, `package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoByLocked_by`(
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoByLocked_time`(
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoByOptions`(
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoByPackage_id`(
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoByVersion`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoByVersion`(
IN pPackage_id INT , 
IN pDefault_action_title VARCHAR (255), 
IN pDefault_action_name VARCHAR (255), 
IN pVersion VARCHAR (15), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id, `default_action_title` = pDefault_action_title, `default_action_name` = pDefault_action_name, `version` = pVersion, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `comments` = pComments, `options` = pOptions
WHERE 		`version` = pVersion;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`package_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoDefault_action_nameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoDefault_action_nameColumnById`(
IN pId INT , 
IN pDefault_action_name VARCHAR (255)
)
BEGIN

UPDATE 		`package_info`
SET 		`default_action_name` = pDefault_action_name
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoDefault_action_titleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoDefault_action_titleColumnById`(
IN pId INT , 
IN pDefault_action_title VARCHAR (255)
)
BEGIN

UPDATE 		`package_info`
SET 		`default_action_title` = pDefault_action_title
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`package_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`package_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`package_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoPackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoPackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`package_info`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePackage_infoVersionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePackage_infoVersionColumnById`(
IN pId INT , 
IN pVersion VARCHAR (15)
)
BEGIN

UPDATE 		`package_info`
SET 		`version` = pVersion
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`poll`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`poll`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByComments`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByLocked_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByLocked_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByModified_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByModified_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByOptions`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByPublish_from`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByPublish_to`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollByVotes_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollByVotes_count`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`votes_count` = pVotes_count;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`poll`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`poll`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`poll`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`poll`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`poll`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`poll`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`poll`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`poll`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`poll`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`poll`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePollVotes_countColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePollVotes_countColumnById`(
IN pId INT , 
IN pVotes_count INT 
)
BEGIN

UPDATE 		`poll`
SET 		`votes_count` = pVotes_count
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`poll_answer`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByApproved`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByAuthor_id`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByComments`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByDate_added`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerById`(
IN pId INT , 
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer` 
SET 		`id` = pId, `poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByLabel`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByLocked_by`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByLocked_time`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByModified_by`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByModified_time`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByOptions`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByOrder`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByPoll_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByPoll_id`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`poll_id` = pPoll_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByPublished`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByTitle`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerByVotes_count`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerByVotes_count`(
IN pPoll_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pVotes_count INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pAuthor_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id, `title` = pTitle, `label` = pLabel, `votes_count` = pVotes_count, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `author_id` = pAuthor_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`votes_count` = pVotes_count;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`poll_answer`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerPoll_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerPoll_idColumnById`(
IN pId INT , 
IN pPoll_id INT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`poll_id` = pPoll_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`poll_answer`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`poll_answer`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_answerVotes_countColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_answerVotes_countColumnById`(
IN pId INT , 
IN pVotes_count INT 
)
BEGIN

UPDATE 		`poll_answer`
SET 		`votes_count` = pVotes_count
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteAnswer_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteAnswer_idColumnById`(
IN pId INT , 
IN pAnswer_id INT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`answer_id` = pAnswer_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteByAnswer_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteByAnswer_id`(
IN pPoll_id INT , 
IN pAnswer_id INT , 
IN pIp_address BIGINT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`poll_id` = pPoll_id, `answer_id` = pAnswer_id, `ip_address` = pIp_address, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`answer_id` = pAnswer_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteByComments`(
IN pPoll_id INT , 
IN pAnswer_id INT , 
IN pIp_address BIGINT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`poll_id` = pPoll_id, `answer_id` = pAnswer_id, `ip_address` = pIp_address, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteByDate_added`(
IN pPoll_id INT , 
IN pAnswer_id INT , 
IN pIp_address BIGINT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`poll_id` = pPoll_id, `answer_id` = pAnswer_id, `ip_address` = pIp_address, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteById`(
IN pId INT , 
IN pPoll_id INT , 
IN pAnswer_id INT , 
IN pIp_address BIGINT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_vote` 
SET 		`id` = pId, `poll_id` = pPoll_id, `answer_id` = pAnswer_id, `ip_address` = pIp_address, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteByIp_address`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteByIp_address`(
IN pPoll_id INT , 
IN pAnswer_id INT , 
IN pIp_address BIGINT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`poll_id` = pPoll_id, `answer_id` = pAnswer_id, `ip_address` = pIp_address, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`ip_address` = pIp_address;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteByOptions`(
IN pPoll_id INT , 
IN pAnswer_id INT , 
IN pIp_address BIGINT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`poll_id` = pPoll_id, `answer_id` = pAnswer_id, `ip_address` = pIp_address, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteByPoll_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteByPoll_id`(
IN pPoll_id INT , 
IN pAnswer_id INT , 
IN pIp_address BIGINT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`poll_id` = pPoll_id, `answer_id` = pAnswer_id, `ip_address` = pIp_address, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`poll_id` = pPoll_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteByUser_id`(
IN pPoll_id INT , 
IN pAnswer_id INT , 
IN pIp_address BIGINT , 
IN pUser_id INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`poll_id` = pPoll_id, `answer_id` = pAnswer_id, `ip_address` = pIp_address, `user_id` = pUser_id, `comments` = pComments, `options` = pOptions
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteIp_addressColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteIp_addressColumnById`(
IN pId INT , 
IN pIp_address BIGINT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`ip_address` = pIp_address
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_votePoll_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_votePoll_idColumnById`(
IN pId INT , 
IN pPoll_id INT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`poll_id` = pPoll_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdatePoll_voteUser_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePoll_voteUser_idColumnById`(
IN pId INT , 
IN pUser_id INT 
)
BEGIN

UPDATE 		`poll_vote`
SET 		`user_id` = pUser_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateSearch_logByHits`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateSearch_logByHits`(
IN pSearch_term VARCHAR (128), 
IN pHits INT 
)
BEGIN

UPDATE 		`search_log`
SET 		`search_term` = pSearch_term, `hits` = pHits
WHERE 		`hits` = pHits;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateSearch_logBySearch_term`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateSearch_logBySearch_term`(
IN pSearch_term VARCHAR (128), 
IN pHits INT 
)
BEGIN

UPDATE 		`search_log`
SET 		`search_term` = pSearch_term, `hits` = pHits
WHERE 		`search_term` = pSearch_term;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`tag`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagByApproved`(
IN pTitle VARCHAR (255), 
IN pLocale_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`tag`
SET 		`title` = pTitle, `locale_id` = pLocale_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagByComments`(
IN pTitle VARCHAR (255), 
IN pLocale_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`tag`
SET 		`title` = pTitle, `locale_id` = pLocale_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagByDate_added`(
IN pTitle VARCHAR (255), 
IN pLocale_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`tag`
SET 		`title` = pTitle, `locale_id` = pLocale_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLocale_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`tag` 
SET 		`id` = pId, `title` = pTitle, `locale_id` = pLocale_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagByLocale_id`(
IN pTitle VARCHAR (255), 
IN pLocale_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`tag`
SET 		`title` = pTitle, `locale_id` = pLocale_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagByOrder`(
IN pTitle VARCHAR (255), 
IN pLocale_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`tag`
SET 		`title` = pTitle, `locale_id` = pLocale_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagByPublished`(
IN pTitle VARCHAR (255), 
IN pLocale_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`tag`
SET 		`title` = pTitle, `locale_id` = pLocale_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagByTitle`(
IN pTitle VARCHAR (255), 
IN pLocale_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pOrder INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`tag`
SET 		`title` = pTitle, `locale_id` = pLocale_id, `published` = pPublished, `approved` = pApproved, `order` = pOrder, `comments` = pComments
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`tag`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`tag`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagLocale_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagLocale_idColumnById`(
IN pId INT , 
IN pLocale_id INT 
)
BEGIN

UPDATE 		`tag`
SET 		`locale_id` = pLocale_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`tag`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`tag`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTagTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTagTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`tag`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeAction_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeAction_idColumnById`(
IN pId INT , 
IN pAction_id INT 
)
BEGIN

UPDATE 		`theme`
SET 		`action_id` = pAction_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByAction_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByAction_id`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`action_id` = pAction_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByClass_id`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`class_id` = pClass_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByComments`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByDate_added`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeById`(
IN pId INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme` 
SET 		`id` = pId, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByLayout_id`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`layout_id` = pLayout_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByOptions`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByPackage_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByPackage_id`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`package_id` = pPackage_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByPublish_from`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByPublish_to`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeBySkin_id`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`skin_id` = pSkin_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeByTemplate_id`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pSkin_id INT , 
IN pPackage_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `skin_id` = pSkin_id, `package_id` = pPackage_id, `class_id` = pClass_id, `action_id` = pAction_id, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`template_id` = pTemplate_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeClass_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeClass_idColumnById`(
IN pId INT , 
IN pClass_id INT 
)
BEGIN

UPDATE 		`theme`
SET 		`class_id` = pClass_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`theme`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeLayout_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeLayout_idColumnById`(
IN pId INT , 
IN pLayout_id INT 
)
BEGIN

UPDATE 		`theme`
SET 		`layout_id` = pLayout_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemePackage_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemePackage_idColumnById`(
IN pId INT , 
IN pPackage_id INT 
)
BEGIN

UPDATE 		`theme`
SET 		`package_id` = pPackage_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemePublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemePublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`theme`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemePublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemePublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`theme`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeSkin_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeSkin_idColumnById`(
IN pId INT , 
IN pSkin_id INT 
)
BEGIN

UPDATE 		`theme`
SET 		`skin_id` = pSkin_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateThemeTemplate_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateThemeTemplate_idColumnById`(
IN pId INT , 
IN pTemplate_id INT 
)
BEGIN

UPDATE 		`theme`
SET 		`template_id` = pTemplate_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`theme_layout`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByDefault`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`default` = pDefault;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByDescription`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByDirection`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByDirection`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`direction` = pDirection;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByOrder`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pDirection VARCHAR (255), 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `direction` = pDirection, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutDefaultColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutDefaultColumnById`(
IN pId INT , 
IN pDefault VARCHAR (255)
)
BEGIN

UPDATE 		`theme_layout`
SET 		`default` = pDefault
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutDirectionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutDirectionColumnById`(
IN pId INT , 
IN pDirection VARCHAR (255)
)
BEGIN

UPDATE 		`theme_layout`
SET 		`direction` = pDirection
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`theme_layout`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_layout`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`theme_layout`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layoutTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layoutTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`theme_layout`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByComments`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByDate_added`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoById`(
IN pId INT , 
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info` 
SET 		`id` = pId, `layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByLayout_id`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`layout_id` = pLayout_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByLocked_by`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByLocked_time`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByModified_by`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByModified_time`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByOptions`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByPublish_from`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoByPublish_to`(
IN pLayout_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoLayout_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoLayout_idColumnById`(
IN pId INT , 
IN pLayout_id INT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`layout_id` = pLayout_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_layout_infoPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_layout_infoPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`theme_layout_info`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`theme_skin`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByApproved`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByAuthor_id`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByDate_added`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByDefault`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`default` = pDefault;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByDescription`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinById`(
IN pId INT , 
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin` 
SET 		`id` = pId, `layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByLabel`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByLayout_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByLayout_id`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`layout_id` = pLayout_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByOrder`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByPublished`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByTemplate_id`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`template_id` = pTemplate_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinByTitle`(
IN pLayout_id INT , 
IN pTemplate_id INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id, `template_id` = pTemplate_id, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinDefaultColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinDefaultColumnById`(
IN pId INT , 
IN pDefault VARCHAR (255)
)
BEGIN

UPDATE 		`theme_skin`
SET 		`default` = pDefault
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`theme_skin`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinLayout_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinLayout_idColumnById`(
IN pId INT , 
IN pLayout_id INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`layout_id` = pLayout_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinPublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinPublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`theme_skin`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinTemplate_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinTemplate_idColumnById`(
IN pId INT , 
IN pTemplate_id INT 
)
BEGIN

UPDATE 		`theme_skin`
SET 		`template_id` = pTemplate_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skinTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skinTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`theme_skin`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoByComments`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoByDate_added`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoById`(
IN pId INT , 
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info` 
SET 		`id` = pId, `skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoByLocked_by`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoByLocked_time`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoByModified_by`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoByModified_time`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoByOptions`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoByPublish_from`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoByPublish_to`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoBySkin_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoBySkin_id`(
IN pSkin_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`skin_id` = pSkin_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_skin_infoSkin_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_skin_infoSkin_idColumnById`(
IN pId INT , 
IN pSkin_id INT 
)
BEGIN

UPDATE 		`theme_skin_info`
SET 		`skin_id` = pSkin_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`theme_template`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateAuthor_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateAuthor_idColumnById`(
IN pId INT , 
IN pAuthor_id INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`author_id` = pAuthor_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateByApproved`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateByAuthor_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateByAuthor_id`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`author_id` = pAuthor_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateByDefault`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateByDefault`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`default` = pDefault;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateByDescription`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateByOrder`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateByOrder`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`order` = pOrder;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateByPublished`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateByPublished`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`published` = pPublished;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pAuthor_id INT , 
IN pPublished VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pDefault VARCHAR (255), 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `author_id` = pAuthor_id, `published` = pPublished, `approved` = pApproved, `default` = pDefault, `order` = pOrder
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`theme_template`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateDefaultColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateDefaultColumnById`(
IN pId INT , 
IN pDefault VARCHAR (255)
)
BEGIN

UPDATE 		`theme_template`
SET 		`default` = pDefault
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`theme_template`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateOrderColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateOrderColumnById`(
IN pId INT , 
IN pOrder INT 
)
BEGIN

UPDATE 		`theme_template`
SET 		`order` = pOrder
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templatePublishedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templatePublishedColumnById`(
IN pId INT , 
IN pPublished VARCHAR (255)
)
BEGIN

UPDATE 		`theme_template`
SET 		`published` = pPublished
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_templateTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_templateTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`theme_template`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByComments`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByDate_added`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoById`(
IN pId INT , 
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info` 
SET 		`id` = pId, `template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByLocked_by`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByLocked_time`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByModified_by`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByModified_time`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByOptions`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByPublish_from`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByPublish_from`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_from` = pPublish_from;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByPublish_to`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByPublish_to`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`publish_to` = pPublish_to;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoByTemplate_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoByTemplate_id`(
IN pTemplate_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pPublish_from DATETIME , 
IN pPublish_to DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `publish_from` = pPublish_from, `publish_to` = pPublish_to, `comments` = pComments, `options` = pOptions
WHERE 		`template_id` = pTemplate_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoPublish_fromColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoPublish_fromColumnById`(
IN pId INT , 
IN pPublish_from DATETIME 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`publish_from` = pPublish_from
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoPublish_toColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoPublish_toColumnById`(
IN pId INT , 
IN pPublish_to DATETIME 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`publish_to` = pPublish_to
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTheme_template_infoTemplate_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTheme_template_infoTemplate_idColumnById`(
IN pId INT , 
IN pTemplate_id INT 
)
BEGIN

UPDATE 		`theme_template_info`
SET 		`template_id` = pTemplate_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationByComments`(
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationByDate_added`(
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationById`(
IN pId INT , 
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation` 
SET 		`id` = pId, `label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationByLabel`(
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationByLocale_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationByLocale_id`(
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments
WHERE 		`locale_id` = pLocale_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationByLocked_by`(
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationByLocked_time`(
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationByModified_by`(
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationByModified_time`(
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationByTranslation`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationByTranslation`(
IN pLabel VARCHAR (255), 
IN pTranslation TEXT , 
IN pLocale_id INT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel, `translation` = pTranslation, `locale_id` = pLocale_id, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments
WHERE 		`translation` = pTranslation;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`translation`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`translation`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationLocale_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationLocale_idColumnById`(
IN pId INT , 
IN pLocale_id INT 
)
BEGIN

UPDATE 		`translation`
SET 		`locale_id` = pLocale_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`translation`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`translation`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`translation`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`translation`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateTranslationTranslationColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateTranslationTranslationColumnById`(
IN pId INT , 
IN pTranslation TEXT 
)
BEGIN

UPDATE 		`translation`
SET 		`translation` = pTranslation
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserByDate_added`(
IN pUsername VARCHAR (32), 
IN pPassword VARCHAR (32), 
IN pFullname VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pUser_level_id INT 
)
BEGIN

UPDATE 		`user`
SET 		`username` = pUsername, `password` = pPassword, `fullname` = pFullname, `email` = pEmail, `user_level_id` = pUser_level_id
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserByEmail`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserByEmail`(
IN pUsername VARCHAR (32), 
IN pPassword VARCHAR (32), 
IN pFullname VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pUser_level_id INT 
)
BEGIN

UPDATE 		`user`
SET 		`username` = pUsername, `password` = pPassword, `fullname` = pFullname, `email` = pEmail, `user_level_id` = pUser_level_id
WHERE 		`email` = pEmail;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserByFullname`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserByFullname`(
IN pUsername VARCHAR (32), 
IN pPassword VARCHAR (32), 
IN pFullname VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pUser_level_id INT 
)
BEGIN

UPDATE 		`user`
SET 		`username` = pUsername, `password` = pPassword, `fullname` = pFullname, `email` = pEmail, `user_level_id` = pUser_level_id
WHERE 		`fullname` = pFullname;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserById`(
IN pId INT , 
IN pUsername VARCHAR (32), 
IN pPassword VARCHAR (32), 
IN pFullname VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pUser_level_id INT 
)
BEGIN

UPDATE 		`user` 
SET 		`id` = pId, `username` = pUsername, `password` = pPassword, `fullname` = pFullname, `email` = pEmail, `user_level_id` = pUser_level_id 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserByPassword`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserByPassword`(
IN pUsername VARCHAR (32), 
IN pPassword VARCHAR (32), 
IN pFullname VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pUser_level_id INT 
)
BEGIN

UPDATE 		`user`
SET 		`username` = pUsername, `password` = pPassword, `fullname` = pFullname, `email` = pEmail, `user_level_id` = pUser_level_id
WHERE 		`password` = pPassword;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserByUsername`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserByUsername`(
IN pUsername VARCHAR (32), 
IN pPassword VARCHAR (32), 
IN pFullname VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pUser_level_id INT 
)
BEGIN

UPDATE 		`user`
SET 		`username` = pUsername, `password` = pPassword, `fullname` = pFullname, `email` = pEmail, `user_level_id` = pUser_level_id
WHERE 		`username` = pUsername;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserByUser_level_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserByUser_level_id`(
IN pUsername VARCHAR (32), 
IN pPassword VARCHAR (32), 
IN pFullname VARCHAR (255), 
IN pEmail VARCHAR (255), 
IN pUser_level_id INT 
)
BEGIN

UPDATE 		`user`
SET 		`username` = pUsername, `password` = pPassword, `fullname` = pFullname, `email` = pEmail, `user_level_id` = pUser_level_id
WHERE 		`user_level_id` = pUser_level_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`user`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserEmailColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserEmailColumnById`(
IN pId INT , 
IN pEmail VARCHAR (255)
)
BEGIN

UPDATE 		`user`
SET 		`email` = pEmail
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserFullnameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserFullnameColumnById`(
IN pId INT , 
IN pFullname VARCHAR (255)
)
BEGIN

UPDATE 		`user`
SET 		`fullname` = pFullname
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserPasswordColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserPasswordColumnById`(
IN pId INT , 
IN pPassword VARCHAR (32)
)
BEGIN

UPDATE 		`user`
SET 		`password` = pPassword
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserUsernameColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserUsernameColumnById`(
IN pId INT , 
IN pUsername VARCHAR (32)
)
BEGIN

UPDATE 		`user`
SET 		`username` = pUsername
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUserUser_level_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUserUser_level_idColumnById`(
IN pId INT , 
IN pUser_level_id INT 
)
BEGIN

UPDATE 		`user`
SET 		`user_level_id` = pUser_level_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoApprovedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoApprovedColumnById`(
IN pId INT , 
IN pApproved VARCHAR (255)
)
BEGIN

UPDATE 		`user_info`
SET 		`approved` = pApproved
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoBlockedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoBlockedColumnById`(
IN pId INT , 
IN pBlocked VARCHAR (255)
)
BEGIN

UPDATE 		`user_info`
SET 		`blocked` = pBlocked
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByApproved`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByApproved`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`approved` = pApproved;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByBlocked`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByBlocked`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`blocked` = pBlocked;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByComments`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByCompany`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByCompany`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`company` = pCompany;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByConfirmed`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByConfirmed`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`confirmed` = pConfirmed;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByDate_added`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByDate_of_birth`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByDate_of_birth`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`date_of_birth` = pDate_of_birth;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByDepartment`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByDepartment`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`department` = pDepartment;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByHome_phone`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByHome_phone`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`home_phone` = pHome_phone;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoById`(
IN pId INT , 
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info` 
SET 		`id` = pId, `user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByLast_login_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByLast_login_date`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`last_login_date` = pLast_login_date;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByLocked_by`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByLocked_time`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByMobile`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByMobile`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`mobile` = pMobile;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByModified_by`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByModified_time`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByOptions`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByPosition`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByPosition`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`position` = pPosition;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByRegistration_date`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByRegistration_date`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`registration_date` = pRegistration_date;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByUser_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByUser_id`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`user_id` = pUser_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByWork_fax`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByWork_fax`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`work_fax` = pWork_fax;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoByWork_phone`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoByWork_phone`(
IN pUser_id INT , 
IN pDate_of_birth DATETIME , 
IN pRegistration_date DATETIME , 
IN pLast_login_date DATETIME , 
IN pCompany VARCHAR (255), 
IN pDepartment VARCHAR (255), 
IN pPosition VARCHAR (255), 
IN pHome_phone VARCHAR (17), 
IN pWork_phone VARCHAR (17), 
IN pWork_fax VARCHAR (17), 
IN pMobile VARCHAR (17), 
IN pBlocked VARCHAR (255), 
IN pApproved VARCHAR (255), 
IN pConfirmed VARCHAR (255), 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id, `date_of_birth` = pDate_of_birth, `registration_date` = pRegistration_date, `last_login_date` = pLast_login_date, `company` = pCompany, `department` = pDepartment, `position` = pPosition, `home_phone` = pHome_phone, `work_phone` = pWork_phone, `work_fax` = pWork_fax, `mobile` = pMobile, `blocked` = pBlocked, `approved` = pApproved, `confirmed` = pConfirmed, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`work_phone` = pWork_phone;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoCompanyColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoCompanyColumnById`(
IN pId INT , 
IN pCompany VARCHAR (255)
)
BEGIN

UPDATE 		`user_info`
SET 		`company` = pCompany
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoConfirmedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoConfirmedColumnById`(
IN pId INT , 
IN pConfirmed VARCHAR (255)
)
BEGIN

UPDATE 		`user_info`
SET 		`confirmed` = pConfirmed
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`user_info`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoDate_of_birthColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoDate_of_birthColumnById`(
IN pId INT , 
IN pDate_of_birth DATETIME 
)
BEGIN

UPDATE 		`user_info`
SET 		`date_of_birth` = pDate_of_birth
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoDepartmentColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoDepartmentColumnById`(
IN pId INT , 
IN pDepartment VARCHAR (255)
)
BEGIN

UPDATE 		`user_info`
SET 		`department` = pDepartment
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoHome_phoneColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoHome_phoneColumnById`(
IN pId INT , 
IN pHome_phone VARCHAR (17)
)
BEGIN

UPDATE 		`user_info`
SET 		`home_phone` = pHome_phone
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoLast_login_dateColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoLast_login_dateColumnById`(
IN pId INT , 
IN pLast_login_date DATETIME 
)
BEGIN

UPDATE 		`user_info`
SET 		`last_login_date` = pLast_login_date
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`user_info`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`user_info`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoMobileColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoMobileColumnById`(
IN pId INT , 
IN pMobile VARCHAR (17)
)
BEGIN

UPDATE 		`user_info`
SET 		`mobile` = pMobile
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`user_info`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`user_info`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_info`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoPositionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoPositionColumnById`(
IN pId INT , 
IN pPosition VARCHAR (255)
)
BEGIN

UPDATE 		`user_info`
SET 		`position` = pPosition
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoRegistration_dateColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoRegistration_dateColumnById`(
IN pId INT , 
IN pRegistration_date DATETIME 
)
BEGIN

UPDATE 		`user_info`
SET 		`registration_date` = pRegistration_date
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoUser_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoUser_idColumnById`(
IN pId INT , 
IN pUser_id INT 
)
BEGIN

UPDATE 		`user_info`
SET 		`user_id` = pUser_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoWork_faxColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoWork_faxColumnById`(
IN pId INT , 
IN pWork_fax VARCHAR (17)
)
BEGIN

UPDATE 		`user_info`
SET 		`work_fax` = pWork_fax
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_infoWork_phoneColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_infoWork_phoneColumnById`(
IN pId INT , 
IN pWork_phone VARCHAR (17)
)
BEGIN

UPDATE 		`user_info`
SET 		`work_phone` = pWork_phone
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByComments`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByDate_added`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByDate_added`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`date_added` = pDate_added;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByDescription`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByDescription`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`description` = pDescription;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelById`(
IN pId INT , 
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level` 
SET 		`id` = pId, `title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByLabel`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByLabel`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`label` = pLabel;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByLocked_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByLocked_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_by` = pLocked_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByLocked_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByLocked_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`locked_time` = pLocked_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByModified_by`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByModified_by`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_by` = pModified_by;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByModified_time`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByModified_time`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`modified_time` = pModified_time;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByOptions`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelByTitle`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelByTitle`(
IN pTitle VARCHAR (255), 
IN pLabel VARCHAR (255), 
IN pDescription TEXT , 
IN pLocked_by INT , 
IN pLocked_time DATETIME , 
IN pModified_by INT , 
IN pModified_time DATETIME , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle, `label` = pLabel, `description` = pDescription, `locked_by` = pLocked_by, `locked_time` = pLocked_time, `modified_by` = pModified_by, `modified_time` = pModified_time, `comments` = pComments, `options` = pOptions
WHERE 		`title` = pTitle;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelDate_addedColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelDate_addedColumnById`(
IN pId INT , 
IN pDate_added TIMESTAMP 
)
BEGIN

UPDATE 		`user_level`
SET 		`date_added` = pDate_added
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelDescriptionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelDescriptionColumnById`(
IN pId INT , 
IN pDescription TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`description` = pDescription
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelLabelColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelLabelColumnById`(
IN pId INT , 
IN pLabel VARCHAR (255)
)
BEGIN

UPDATE 		`user_level`
SET 		`label` = pLabel
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelLocked_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelLocked_byColumnById`(
IN pId INT , 
IN pLocked_by INT 
)
BEGIN

UPDATE 		`user_level`
SET 		`locked_by` = pLocked_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelLocked_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelLocked_timeColumnById`(
IN pId INT , 
IN pLocked_time DATETIME 
)
BEGIN

UPDATE 		`user_level`
SET 		`locked_time` = pLocked_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelModified_byColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelModified_byColumnById`(
IN pId INT , 
IN pModified_by INT 
)
BEGIN

UPDATE 		`user_level`
SET 		`modified_by` = pModified_by
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelModified_timeColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelModified_timeColumnById`(
IN pId INT , 
IN pModified_time DATETIME 
)
BEGIN

UPDATE 		`user_level`
SET 		`modified_time` = pModified_time
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_levelTitleColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_levelTitleColumnById`(
IN pId INT , 
IN pTitle VARCHAR (255)
)
BEGIN

UPDATE 		`user_level`
SET 		`title` = pTitle
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionAction_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionAction_idColumnById`(
IN pId INT , 
IN pAction_id INT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`action_id` = pAction_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionByAction_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionByAction_id`(
IN pUser_level_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPermission INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`user_level_id` = pUser_level_id, `class_id` = pClass_id, `action_id` = pAction_id, `permission` = pPermission, `comments` = pComments, `options` = pOptions
WHERE 		`action_id` = pAction_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionByClass_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionByClass_id`(
IN pUser_level_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPermission INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`user_level_id` = pUser_level_id, `class_id` = pClass_id, `action_id` = pAction_id, `permission` = pPermission, `comments` = pComments, `options` = pOptions
WHERE 		`class_id` = pClass_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionByComments`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionByComments`(
IN pUser_level_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPermission INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`user_level_id` = pUser_level_id, `class_id` = pClass_id, `action_id` = pAction_id, `permission` = pPermission, `comments` = pComments, `options` = pOptions
WHERE 		`comments` = pComments;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionById`(
IN pId INT , 
IN pUser_level_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPermission INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level_permission` 
SET 		`id` = pId, `user_level_id` = pUser_level_id, `class_id` = pClass_id, `action_id` = pAction_id, `permission` = pPermission, `comments` = pComments, `options` = pOptions 
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionByOptions`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionByOptions`(
IN pUser_level_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPermission INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`user_level_id` = pUser_level_id, `class_id` = pClass_id, `action_id` = pAction_id, `permission` = pPermission, `comments` = pComments, `options` = pOptions
WHERE 		`options` = pOptions;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionByPermission`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionByPermission`(
IN pUser_level_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPermission INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`user_level_id` = pUser_level_id, `class_id` = pClass_id, `action_id` = pAction_id, `permission` = pPermission, `comments` = pComments, `options` = pOptions
WHERE 		`permission` = pPermission;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionByUser_level_id`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionByUser_level_id`(
IN pUser_level_id INT , 
IN pClass_id INT , 
IN pAction_id INT , 
IN pPermission INT , 
IN pComments TEXT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`user_level_id` = pUser_level_id, `class_id` = pClass_id, `action_id` = pAction_id, `permission` = pPermission, `comments` = pComments, `options` = pOptions
WHERE 		`user_level_id` = pUser_level_id;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionClass_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionClass_idColumnById`(
IN pId INT , 
IN pClass_id INT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`class_id` = pClass_id
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionCommentsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionCommentsColumnById`(
IN pId INT , 
IN pComments TEXT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`comments` = pComments
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionOptionsColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionOptionsColumnById`(
IN pId INT , 
IN pOptions TEXT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`options` = pOptions
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionPermissionColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionPermissionColumnById`(
IN pId INT , 
IN pPermission INT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`permission` = pPermission
WHERE 		`id` = pId;

END$$

DROP PROCEDURE IF EXISTS `SP_UpdateUser_level_permissionUser_level_idColumnById`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdateUser_level_permissionUser_level_idColumnById`(
IN pId INT , 
IN pUser_level_id INT 
)
BEGIN

UPDATE 		`user_level_permission`
SET 		`user_level_id` = pUser_level_id
WHERE 		`id` = pId;

END$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `banner`
--

DROP TABLE IF EXISTS `banner`;
CREATE TABLE IF NOT EXISTS `banner` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `area_id` int(11) unsigned NOT NULL,
  `title` varchar(255) CHARACTER SET utf8 NOT NULL,
  `label` varchar(255) CHARACTER SET utf8 NOT NULL,
  `type` enum('image url','image file','swf file','swf object','javascript code') CHARACTER SET utf8 NOT NULL DEFAULT 'image file',
  `mime_type` varchar(200) CHARACTER SET utf8 NOT NULL,
  `size` int(11) NOT NULL,
  `extension` varchar(10) CHARACTER SET utf8 NOT NULL,
  `source` mediumtext CHARACTER SET utf8 NOT NULL,
  `target` varchar(255) DEFAULT NULL,
  `context` text CHARACTER SET utf8 NOT NULL,
  `published` enum('Yes','No') CHARACTER SET utf8 NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') CHARACTER SET utf8 NOT NULL DEFAULT 'No',
  `author_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) NOT NULL,
  `locked_time` datetime NOT NULL,
  `modified_by` int(11) NOT NULL,
  `modified_time` datetime NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `publish_from` datetime NOT NULL,
  `publish_to` datetime DEFAULT NULL,
  `comments` text CHARACTER SET utf8 NOT NULL,
  `options` text CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`),
  KEY `area_id` (`area_id`),
  KEY `author_id` (`author_id`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=118 ;

-- --------------------------------------------------------

--
-- Table structure for table `banner_area`
--

DROP TABLE IF EXISTS `banner_area`;
CREATE TABLE IF NOT EXISTS `banner_area` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8 NOT NULL,
  `label` varchar(255) CHARACTER SET utf8 NOT NULL,
  `published` enum('Yes','No') CHARACTER SET utf8 NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') CHARACTER SET utf8 NOT NULL DEFAULT 'No',
  `author_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) NOT NULL,
  `locked_time` datetime NOT NULL,
  `modified_by` int(11) NOT NULL,
  `modified_time` datetime NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `publish_from` datetime NOT NULL,
  `publish_to` datetime DEFAULT NULL,
  `comments` text CHARACTER SET utf8 NOT NULL,
  `options` text CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=16 ;

-- --------------------------------------------------------

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
CREATE TABLE IF NOT EXISTS `category` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `type_id` int(11) unsigned NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `parent_id` int(11) unsigned NOT NULL DEFAULT '0',
  `package_id` int(11) unsigned NOT NULL DEFAULT '0',
  `show_in_menu` enum('Yes','No') NOT NULL DEFAULT 'No',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `parent_id` (`parent_id`),
  KEY `package_id` (`package_id`),
  KEY `published` (`published`,`approved`),
  KEY `show_in_menu` (`show_in_menu`,`published`,`approved`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=28 ;

-- --------------------------------------------------------

--
-- Table structure for table `category_info`
--

DROP TABLE IF EXISTS `category_info`;
CREATE TABLE IF NOT EXISTS `category_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `category_id` int(11) unsigned NOT NULL,
  `subcat_count` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `direct_object_count` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `indirect_object_count` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `page_title` text NOT NULL,
  `meta_title` text NOT NULL,
  `meta_key` text NOT NULL,
  `meta_desc` text NOT NULL,
  `meta_data` text NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `category_id` (`category_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=28 ;

-- --------------------------------------------------------

--
-- Table structure for table `category_type`
--

DROP TABLE IF EXISTS `category_type`;
CREATE TABLE IF NOT EXISTS `category_type` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `package_id` int(11) unsigned NOT NULL DEFAULT '0',
  `show_in_menu` enum('Yes','No') NOT NULL DEFAULT 'No',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `package_id` (`package_id`),
  KEY `published` (`published`,`approved`),
  KEY `show_in_menu` (`show_in_menu`,`published`,`approved`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

-- --------------------------------------------------------

--
-- Table structure for table `category_type_info`
--

DROP TABLE IF EXISTS `category_type_info`;
CREATE TABLE IF NOT EXISTS `category_type_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `category_type_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `direct_cat_count` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `indirect_cat_count` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `category_type_id` (`category_type_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

-- --------------------------------------------------------

--
-- Table structure for table `locale`
--

DROP TABLE IF EXISTS `locale`;
CREATE TABLE IF NOT EXISTS `locale` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `locale` varchar(6) NOT NULL,
  `title` varchar(255) NOT NULL,
  `locale_title` varchar(255) DEFAULT NULL,
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  PRIMARY KEY (`id`),
  KEY `published` (`published`,`approved`),
  KEY `published_2` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `menu`
--

DROP TABLE IF EXISTS `menu`;
CREATE TABLE IF NOT EXISTS `menu` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `label` varchar(255) NOT NULL,
  `link` mediumtext NOT NULL,
  `type_id` int(11) unsigned NOT NULL,
  `parent_id` int(11) unsigned NOT NULL DEFAULT '0',
  `package_id` int(11) unsigned NOT NULL DEFAULT '0',
  `sublevel` int(11) unsigned DEFAULT '0',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `type_id` (`type_id`),
  KEY `parent_id` (`parent_id`),
  KEY `package_id` (`package_id`),
  KEY `published` (`published`,`approved`),
  KEY `type_id_2` (`type_id`),
  KEY `parent_id_2` (`parent_id`),
  KEY `package_id_2` (`package_id`),
  KEY `published_2` (`published`,`approved`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=8 ;

--
-- Dumping data for table `menu`
--

INSERT INTO `menu` (`id`, `label`, `link`, `type_id`, `parent_id`, `package_id`, `sublevel`, `published`, `approved`, `order`, `date_added`) VALUES
(1, 'left-menu-item-1', '', 1, 0, 0, 0, 'Yes', 'Yes', 1, '2012-02-20 15:37:02'),
(2, 'left-menu-item-2', '', 1, 0, 0, 0, 'Yes', 'Yes', 1, '2012-02-20 15:37:15'),
(3, 'left-menu-item-3', '', 1, 0, 0, 0, 'Yes', 'Yes', 1, '2012-02-20 15:37:37'),
(4, 'top-menu-item-1', '', 2, 0, 0, 0, 'Yes', 'Yes', 1, '2012-02-20 15:37:57'),
(5, 'top-menu-item-2', '', 2, 0, 0, 0, 'Yes', 'Yes', 1, '2012-02-20 15:38:06'),
(6, 'top-menu-item-3', '', 2, 0, 0, 0, 'Yes', 'Yes', 1, '2012-02-20 15:38:18'),
(7, 'top-menu-item-4', '', 2, 0, 0, 0, 'Yes', 'Yes', 1, '2012-02-20 15:38:27');

-- --------------------------------------------------------

--
-- Table structure for table `menu_info`
--

DROP TABLE IF EXISTS `menu_info`;
CREATE TABLE IF NOT EXISTS `menu_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `menu_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `menu_id` (`menu_id`),
  KEY `menu_id_2` (`menu_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=8 ;

--
-- Dumping data for table `menu_info`
--

INSERT INTO `menu_info` (`id`, `menu_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `publish_from`, `publish_to`, `date_added`, `comments`, `options`) VALUES
(1, 1, 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '2012-02-20 15:37:02', '', ''),
(2, 2, 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '2012-02-20 15:37:15', '', ''),
(3, 3, 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '2012-02-20 15:37:37', '', ''),
(4, 4, 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '2012-02-20 15:37:57', '', ''),
(5, 5, 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '2012-02-20 15:38:06', '', ''),
(6, 6, 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '2012-02-20 15:38:18', '', ''),
(7, 7, 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '2012-02-20 15:38:27', '', '');

-- --------------------------------------------------------

--
-- Table structure for table `menu_type`
--

DROP TABLE IF EXISTS `menu_type`;
CREATE TABLE IF NOT EXISTS `menu_type` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `package_id` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `menu_type`
--

INSERT INTO `menu_type` (`id`, `title`, `label`, `description`, `author_id`, `published`, `approved`, `order`, `package_id`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options`) VALUES
(1, 'left-menu-title', 'left-menu-short', 'left-menu-dec', 3540, 'Yes', 'Yes', 1, 0, 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '2012-02-20 15:36:29', '', ''),
(2, 'top-menu-title', 'top-menu-short', 'top-menu-desc', 3540, 'Yes', 'Yes', 1, 0, 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '2012-02-20 15:36:50', '', '');

-- --------------------------------------------------------

--
-- Table structure for table `object`
--

DROP TABLE IF EXISTS `object`;
CREATE TABLE IF NOT EXISTS `object` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `created_date` datetime NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `source_id` int(11) unsigned NOT NULL,
  `tags` text NOT NULL,
  `page_title` text NOT NULL,
  `meta_title` text NOT NULL,
  `meta_key` text NOT NULL,
  `meta_desc` text NOT NULL,
  `meta_data` text NOT NULL,
  `type_id` int(11) unsigned NOT NULL,
  `category_id` int(11) unsigned NOT NULL,
  `locale_id` int(11) unsigned NOT NULL,
  `guid_url` mediumtext NOT NULL,
  `original_author` varchar(255) NOT NULL DEFAULT '',
  `parent_id` int(11) unsigned NOT NULL DEFAULT '0',
  `show_in_list` enum('Yes','No') NOT NULL DEFAULT 'Yes',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `parent_id` (`parent_id`),
  KEY `category_id` (`category_id`),
  KEY `original_author` (`original_author`),
  KEY `source_id` (`source_id`),
  KEY `type_id` (`type_id`),
  KEY `published` (`published`,`approved`),
  KEY `show_in_list` (`show_in_list`,`published`,`approved`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_abuse`
--

DROP TABLE IF EXISTS `object_abuse`;
CREATE TABLE IF NOT EXISTS `object_abuse` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `object_id` int(11) unsigned NOT NULL,
  `user_id` int(11) unsigned NOT NULL,
  `alias` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `description` text,
  `type_id` int(11) unsigned NOT NULL,
  `locale_id` int(11) unsigned NOT NULL,
  `is_abuse` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `object_id` (`object_id`),
  KEY `user_id` (`user_id`),
  KEY `type_id` (`type_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_abuse_type`
--

DROP TABLE IF EXISTS `object_abuse_type`;
CREATE TABLE IF NOT EXISTS `object_abuse_type` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `package_id` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `published` (`published`,`approved`),
  KEY `package_id` (`package_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_article`
--

DROP TABLE IF EXISTS `object_article`;
CREATE TABLE IF NOT EXISTS `object_article` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `alias` varchar(255) NOT NULL,
  `intro_text` varchar(1024) DEFAULT NULL,
  `full_text` text NOT NULL,
  `created_date` datetime NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `source_id` int(11) unsigned NOT NULL,
  `object_id` int(11) unsigned NOT NULL,
  `category_id` int(11) unsigned NOT NULL,
  `show_in_object` enum('Yes','No') NOT NULL DEFAULT 'Yes',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` varchar(512) DEFAULT NULL,
  `options` varchar(512) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `source_id` (`source_id`),
  KEY `object_id` (`object_id`),
  KEY `category_id` (`category_id`),
  KEY `published` (`published`,`approved`),
  KEY `show_in_object` (`show_in_object`,`published`,`approved`),
  KEY `cat_id_idx` (`category_id`,`id`),
  KEY `date_id_idx` (`date_added`,`id`),
  KEY `auth_id_idx` (`author_id`,`id`),
  KEY `date_added` (`date_added`),
  KEY `category_id_2` (`category_id`,`date_added`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_article_special`
--

DROP TABLE IF EXISTS `object_article_special`;
CREATE TABLE IF NOT EXISTS `object_article_special` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `object_id` int(11) unsigned NOT NULL,
  `object_article_id` int(11) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `object_id` (`object_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=2 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_comment`
--

DROP TABLE IF EXISTS `object_comment`;
CREATE TABLE IF NOT EXISTS `object_comment` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `object_id` int(11) unsigned NOT NULL,
  `user_id` varchar(100) NOT NULL,
  `title` varchar(150) DEFAULT NULL,
  `content` text NOT NULL,
  `email` varchar(150) DEFAULT NULL,
  `webpage` mediumtext,
  `locale_id` int(11) unsigned NOT NULL,
  `country_id` int(11) unsigned NOT NULL,
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `object_id` (`object_id`),
  KEY `email` (`email`),
  KEY `country_id` (`country_id`),
  KEY `published` (`published`,`approved`),
  KEY `date_id_idx` (`date_added`,`id`),
  KEY `date_idx` (`date_added`),
  KEY `date_object_id_idx` (`date_added`,`object_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3490137 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_directory`
--

DROP TABLE IF EXISTS `object_directory`;
CREATE TABLE IF NOT EXISTS `object_directory` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `parent_id` int(11) unsigned NOT NULL,
  `author_id` varchar(255) NOT NULL,
  `size` int(11) unsigned NOT NULL,
  `files_count` int(11) unsigned NOT NULL,
  `full_path` mediumtext NOT NULL,
  `object_id` int(11) unsigned NOT NULL,
  `category_id` int(11) unsigned NOT NULL,
  `show_in_object` enum('Yes','No') NOT NULL DEFAULT 'Yes',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `parent_id` (`parent_id`),
  KEY `author_id` (`author_id`),
  KEY `object_id` (`object_id`),
  KEY `category_id` (`category_id`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_file`
--

DROP TABLE IF EXISTS `object_file`;
CREATE TABLE IF NOT EXISTS `object_file` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `folder_id` int(11) unsigned NOT NULL,
  `author_id` varchar(255) NOT NULL,
  `mime_type` varchar(200) NOT NULL,
  `size` int(11) unsigned NOT NULL,
  `extension` varchar(10) NOT NULL,
  `full_path` mediumtext NOT NULL,
  `object_id` int(11) unsigned NOT NULL,
  `category_id` int(11) unsigned NOT NULL,
  `show_in_object` enum('Yes','No') NOT NULL DEFAULT 'Yes',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `folder_id` (`folder_id`),
  KEY `author_id` (`author_id`),
  KEY `object_id` (`object_id`),
  KEY `category_id` (`category_id`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_info`
--

DROP TABLE IF EXISTS `object_info`;
CREATE TABLE IF NOT EXISTS `object_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `object_id` int(11) unsigned NOT NULL,
  `total_views` int(11) unsigned NOT NULL DEFAULT '0',
  `total_comments` int(11) unsigned NOT NULL DEFAULT '0',
  `total_rating` int(11) unsigned NOT NULL DEFAULT '0',
  `layout_id` int(11) unsigned NOT NULL DEFAULT '0',
  `template_id` int(11) unsigned NOT NULL DEFAULT '0',
  `skin_id` int(11) unsigned NOT NULL DEFAULT '0',
  `theme_publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `theme_publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` varchar(512) DEFAULT NULL,
  `options` varchar(512) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `object_id` (`object_id`),
  KEY `total_views` (`total_views`),
  KEY `total_comments` (`total_comments`),
  KEY `total_rating` (`total_rating`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_photo`
--

DROP TABLE IF EXISTS `object_photo`;
CREATE TABLE IF NOT EXISTS `object_photo` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `alias` varchar(255) NOT NULL DEFAULT '',
  `intro_text` mediumtext NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `source_id` int(11) unsigned NOT NULL,
  `object_id` int(11) unsigned NOT NULL,
  `category_id` int(11) unsigned NOT NULL,
  `size` int(11) unsigned NOT NULL,
  `height` int(11) unsigned NOT NULL,
  `width` int(11) unsigned NOT NULL,
  `extension` varchar(5) NOT NULL,
  `taken_date` datetime NOT NULL,
  `taken_location` varchar(255) NOT NULL,
  `meta_data` text NOT NULL,
  `show_in_object` enum('Yes','No') NOT NULL DEFAULT 'Yes',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `source_id` (`source_id`),
  KEY `object_id` (`object_id`),
  KEY `category_id` (`category_id`),
  KEY `published` (`published`,`approved`),
  KEY `show_in_object` (`show_in_object`,`published`,`approved`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=67314 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_rating`
--

DROP TABLE IF EXISTS `object_rating`;
CREATE TABLE IF NOT EXISTS `object_rating` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `last_ip` varchar(50) NOT NULL,
  `object_id` int(11) unsigned NOT NULL DEFAULT '0',
  `rating_total` int(11) unsigned NOT NULL DEFAULT '0',
  `rating_count` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) unsigned NOT NULL DEFAULT '0',
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `last_ip` (`last_ip`),
  KEY `object_id` (`object_id`),
  KEY `user_id` (`user_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_source`
--

DROP TABLE IF EXISTS `object_source`;
CREATE TABLE IF NOT EXISTS `object_source` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `source_type` varchar(32) NOT NULL,
  `url` mediumtext NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `locale_id` int(11) unsigned NOT NULL,
  `country_id` int(11) unsigned NOT NULL,
  `package_id` int(11) unsigned NOT NULL DEFAULT '0',
  `time_delay` int(11) unsigned NOT NULL DEFAULT '0',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `package_id` (`package_id`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_source_info`
--

DROP TABLE IF EXISTS `object_source_info`;
CREATE TABLE IF NOT EXISTS `object_source_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `source_id` int(11) NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `source_id` (`source_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_static`
--

DROP TABLE IF EXISTS `object_static`;
CREATE TABLE IF NOT EXISTS `object_static` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `alias` varchar(255) NOT NULL,
  `url` mediumtext NOT NULL,
  `intro_text` text NOT NULL,
  `full_text` text NOT NULL,
  `created_date` datetime NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `object_id` int(11) unsigned NOT NULL,
  `category_id` int(11) unsigned NOT NULL,
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `object_id` (`object_id`),
  KEY `category_id` (`category_id`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_tag`
--

DROP TABLE IF EXISTS `object_tag`;
CREATE TABLE IF NOT EXISTS `object_tag` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `object_id` int(11) unsigned NOT NULL,
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  PRIMARY KEY (`id`),
  KEY `object_id` (`object_id`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_type`
--

DROP TABLE IF EXISTS `object_type`;
CREATE TABLE IF NOT EXISTS `object_type` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `package_id` int(11) unsigned NOT NULL DEFAULT '0',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `package_id` (`package_id`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_type_info`
--

DROP TABLE IF EXISTS `object_type_info`;
CREATE TABLE IF NOT EXISTS `object_type_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `type_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `type_id` (`type_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_url`
--

DROP TABLE IF EXISTS `object_url`;
CREATE TABLE IF NOT EXISTS `object_url` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `alias` varchar(255) NOT NULL DEFAULT '',
  `intro_text` mediumtext NOT NULL,
  `url` mediumtext NOT NULL,
  `style` mediumtext NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `source_id` int(11) unsigned NOT NULL,
  `object_id` int(11) unsigned NOT NULL,
  `category_id` int(11) unsigned NOT NULL,
  `show_in_object` enum('Yes','No') NOT NULL DEFAULT 'Yes',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `url_type` enum('Link','Iframe','YouTube') NOT NULL DEFAULT 'Link',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`,`order`),
  KEY `source_id` (`source_id`),
  KEY `object_id` (`object_id`),
  KEY `category_id` (`category_id`),
  KEY `show_in_object` (`show_in_object`,`published`,`approved`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_user_favourite`
--

DROP TABLE IF EXISTS `object_user_favourite`;
CREATE TABLE IF NOT EXISTS `object_user_favourite` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `object_id` int(11) unsigned NOT NULL,
  `user_id` int(11) unsigned NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `object_id` (`object_id`),
  KEY `user_id` (`user_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `object_video`
--

DROP TABLE IF EXISTS `object_video`;
CREATE TABLE IF NOT EXISTS `object_video` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `alias` varchar(255) NOT NULL DEFAULT '',
  `intro_text` mediumtext NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `source_id` int(11) unsigned NOT NULL,
  `object_id` int(11) unsigned NOT NULL,
  `category_id` int(11) unsigned NOT NULL,
  `size` int(11) unsigned NOT NULL,
  `height` int(11) unsigned NOT NULL,
  `width` int(11) unsigned NOT NULL,
  `extension` varchar(5) NOT NULL,
  `taken_date` datetime NOT NULL,
  `taken_location` varchar(255) NOT NULL,
  `meta_data` text NOT NULL,
  `show_in_object` enum('Yes','No') NOT NULL DEFAULT 'Yes',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `encoded` enum('Yes','No','Lock') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `source_id` (`source_id`),
  KEY `object_id` (`object_id`),
  KEY `category_id` (`category_id`),
  KEY `show_in_object` (`show_in_object`,`published`,`approved`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `package`
--

DROP TABLE IF EXISTS `package`;
CREATE TABLE IF NOT EXISTS `package` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL DEFAULT '',
  `label` varchar(255) NOT NULL DEFAULT '',
  `show_in_menu` enum('Yes','No') NOT NULL DEFAULT 'No',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `type` enum('Core','Module','Plugin') NOT NULL DEFAULT 'Module',
  `prerequisite_id` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `published` (`published`,`approved`),
  KEY `prerequisite_id` (`prerequisite_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `package_action`
--

DROP TABLE IF EXISTS `package_action`;
CREATE TABLE IF NOT EXISTS `package_action` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action_title` varchar(255) NOT NULL,
  `action_name` varchar(255) NOT NULL,
  `action_description` text NOT NULL,
  `file_name` varchar(255) NOT NULL,
  `package_id` int(11) unsigned NOT NULL,
  `class_id` int(11) unsigned NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `package_id` (`package_id`),
  KEY `class_id` (`class_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `package_class`
--

DROP TABLE IF EXISTS `package_class`;
CREATE TABLE IF NOT EXISTS `package_class` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `file_name` varchar(255) NOT NULL,
  `package_id` int(11) unsigned NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `package_id` (`package_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `package_info`
--

DROP TABLE IF EXISTS `package_info`;
CREATE TABLE IF NOT EXISTS `package_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `package_id` int(11) unsigned NOT NULL,
  `default_action_title` varchar(255) NOT NULL DEFAULT '',
  `default_action_name` varchar(255) NOT NULL DEFAULT '',
  `version` varchar(15) NOT NULL DEFAULT '1.0',
  `locked_by` int(11) unsigned NOT NULL,
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `package_id` (`package_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `poll`
--

DROP TABLE IF EXISTS `poll`;
CREATE TABLE IF NOT EXISTS `poll` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8 NOT NULL,
  `label` varchar(255) CHARACTER SET utf8 NOT NULL,
  `votes_count` int(11) unsigned NOT NULL,
  `published` enum('Yes','No') CHARACTER SET utf8 NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') CHARACTER SET utf8 NOT NULL DEFAULT 'No',
  `author_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) NOT NULL,
  `locked_time` datetime NOT NULL,
  `modified_by` int(11) NOT NULL,
  `modified_time` datetime NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `publish_from` datetime NOT NULL,
  `publish_to` datetime DEFAULT NULL,
  `comments` text CHARACTER SET utf8 NOT NULL,
  `options` text CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `published` (`published`,`approved`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `poll_answer`
--

DROP TABLE IF EXISTS `poll_answer`;
CREATE TABLE IF NOT EXISTS `poll_answer` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `poll_id` int(11) unsigned NOT NULL DEFAULT '0',
  `title` varchar(255) NOT NULL DEFAULT '',
  `label` varchar(255) NOT NULL,
  `votes_count` int(11) unsigned NOT NULL DEFAULT '0',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `author_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `FK_POLL_PARENT` (`poll_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `poll_vote`
--

DROP TABLE IF EXISTS `poll_vote`;
CREATE TABLE IF NOT EXISTS `poll_vote` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `poll_id` int(11) unsigned NOT NULL DEFAULT '0',
  `answer_id` int(11) unsigned NOT NULL DEFAULT '0',
  `ip_address` bigint(20) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `FK_POLL_ANSWER` (`answer_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `search_log`
--

DROP TABLE IF EXISTS `search_log`;
CREATE TABLE IF NOT EXISTS `search_log` (
  `search_term` varchar(128) NOT NULL DEFAULT '',
  `hits` int(11) unsigned NOT NULL DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
CREATE TABLE IF NOT EXISTS `tag` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `locale_id` int(11) unsigned NOT NULL,
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

-- --------------------------------------------------------

--
-- Table structure for table `theme`
--

DROP TABLE IF EXISTS `theme`;
CREATE TABLE IF NOT EXISTS `theme` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `layout_id` int(11) unsigned NOT NULL DEFAULT '0',
  `template_id` int(11) unsigned NOT NULL DEFAULT '0',
  `skin_id` int(11) unsigned NOT NULL DEFAULT '0',
  `package_id` int(11) unsigned NOT NULL DEFAULT '0',
  `class_id` int(11) unsigned NOT NULL DEFAULT '0',
  `action_id` int(11) unsigned NOT NULL DEFAULT '0',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `theme_layout`
--

DROP TABLE IF EXISTS `theme_layout`;
CREATE TABLE IF NOT EXISTS `theme_layout` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `direction` enum('ltr','rtl') NOT NULL DEFAULT 'ltr',
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `default` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `theme_layout_info`
--

DROP TABLE IF EXISTS `theme_layout_info`;
CREATE TABLE IF NOT EXISTS `theme_layout_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `layout_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `theme_skin`
--

DROP TABLE IF EXISTS `theme_skin`;
CREATE TABLE IF NOT EXISTS `theme_skin` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `layout_id` int(11) unsigned NOT NULL,
  `template_id` int(11) unsigned NOT NULL,
  `title` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `default` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `theme_skin_info`
--

DROP TABLE IF EXISTS `theme_skin_info`;
CREATE TABLE IF NOT EXISTS `theme_skin_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `skin_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `theme_template`
--

DROP TABLE IF EXISTS `theme_template`;
CREATE TABLE IF NOT EXISTS `theme_template` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `author_id` int(11) unsigned NOT NULL,
  `published` enum('Yes','No') NOT NULL DEFAULT 'No',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `default` enum('Yes','No') NOT NULL DEFAULT 'No',
  `order` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `theme_template_info`
--

DROP TABLE IF EXISTS `theme_template_info`;
CREATE TABLE IF NOT EXISTS `theme_template_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `template_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_from` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `publish_to` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `translation`
--

DROP TABLE IF EXISTS `translation`;
CREATE TABLE IF NOT EXISTS `translation` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `label` varchar(255) NOT NULL,
  `translation` text NOT NULL,
  `locale_id` int(11) unsigned NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
CREATE TABLE IF NOT EXISTS `user` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(32) NOT NULL,
  `password` varchar(32) NOT NULL,
  `fullname` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `user_level_id` int(11) unsigned NOT NULL DEFAULT '0',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username_2` (`username`),
  KEY `user_level_id` (`user_level_id`),
  KEY `username` (`username`,`password`),
  KEY `usr_lvl_id_idx` (`user_level_id`,`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3533 ;

--
-- Dumping data for table `user`
--

INSERT INTO `user` (`id`, `username`, `password`, `fullname`, `email`, `user_level_id`, `date_added`) VALUES
(3532, 'anas', '212c35964b5f0e476b53c59d448ab835', 'Anas K. Al-Far', 'anas@al-far.com', 1, '2012-02-20 17:36:48');

-- --------------------------------------------------------

--
-- Table structure for table `user_info`
--

DROP TABLE IF EXISTS `user_info`;
CREATE TABLE IF NOT EXISTS `user_info` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) unsigned NOT NULL,
  `date_of_birth` datetime NOT NULL,
  `registration_date` datetime NOT NULL,
  `last_login_date` datetime NOT NULL,
  `company` varchar(255) NOT NULL,
  `department` varchar(255) NOT NULL,
  `position` varchar(255) NOT NULL,
  `home_phone` varchar(17) NOT NULL,
  `work_phone` varchar(17) NOT NULL,
  `work_fax` varchar(17) NOT NULL,
  `mobile` varchar(17) NOT NULL,
  `blocked` enum('Yes','No') NOT NULL DEFAULT 'Yes',
  `approved` enum('Yes','No') NOT NULL DEFAULT 'No',
  `confirmed` enum('Yes','No') NOT NULL DEFAULT 'Yes',
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `blocked` (`blocked`),
  KEY `approved` (`approved`),
  KEY `confirmed` (`confirmed`),
  KEY `blocked_2` (`blocked`,`approved`,`confirmed`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=8984 ;

--
-- Dumping data for table `user_info`
--

INSERT INTO `user_info` (`id`, `user_id`, `date_of_birth`, `registration_date`, `last_login_date`, `company`, `department`, `position`, `home_phone`, `work_phone`, `work_fax`, `mobile`, `blocked`, `approved`, `confirmed`, `locked_by`, `locked_time`, `modified_by`, `modified_time`, `date_added`, `comments`, `options`) VALUES
(8983, 3532, '2012-02-01 00:00:00', '2012-02-01 00:00:00', '2012-02-01 00:00:00', '', '', '', '', '', '', '', 'No', 'Yes', 'Yes', 0, '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00', '2012-02-20 17:37:38', NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `user_level`
--

DROP TABLE IF EXISTS `user_level`;
CREATE TABLE IF NOT EXISTS `user_level` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `label` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `locked_by` int(11) unsigned NOT NULL DEFAULT '0',
  `locked_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0',
  `modified_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=4 ;

-- --------------------------------------------------------

--
-- Table structure for table `user_level_permission`
--

DROP TABLE IF EXISTS `user_level_permission`;
CREATE TABLE IF NOT EXISTS `user_level_permission` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_level_id` int(11) unsigned NOT NULL,
  `class_id` int(11) unsigned NOT NULL,
  `action_id` int(11) unsigned NOT NULL,
  `permission` int(11) unsigned NOT NULL,
  `comments` text,
  `options` text,
  PRIMARY KEY (`id`),
  KEY `user_level_id` (`user_level_id`),
  KEY `class_id` (`class_id`,`action_id`,`permission`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
